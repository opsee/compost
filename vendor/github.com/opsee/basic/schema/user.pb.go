// Code generated by protoc-gen-gogo.
// source: user.proto
// DO NOT EDIT!

package schema

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import _ "github.com/opsee/protobuf/opseeproto/types"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"

import database_sql_driver "database/sql/driver"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserFlags struct {
	Admin   bool `protobuf:"varint,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Edit    bool `protobuf:"varint,2,opt,name=edit,proto3" json:"edit,omitempty"`
	Billing bool `protobuf:"varint,3,opt,name=billing,proto3" json:"billing,omitempty"`
}

func (m *UserFlags) Reset()                    { *m = UserFlags{} }
func (m *UserFlags) String() string            { return proto.CompactTextString(m) }
func (*UserFlags) ProtoMessage()               {}
func (*UserFlags) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

type User struct {
	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" token:"id"`
	CustomerId   string                 `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty" token:"customer_id" db:"customer_id"`
	Email        string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty" token:"email"`
	Name         string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" token:"name"`
	Verified     bool                   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified" token:"verified"`
	Admin        bool                   `protobuf:"varint,6,opt,name=admin,proto3" json:"admin" token:"admin"`
	Active       bool                   `protobuf:"varint,7,opt,name=active,proto3" json:"active" token:"active"`
	AdminId      int32                  `protobuf:"varint,8,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty" token:"admin_id"`
	PasswordHash string                 `protobuf:"bytes,9,opt,name=password_hash,json=passwordHash,proto3" json:"-" db:"password_hash"`
	CreatedAt    *opsee_types.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty" db:"created_at"`
	UpdatedAt    *opsee_types.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" db:"updated_at"`
	Status       string                 `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty" token:"status" db:"status"`
	HasPassword  bool                   `protobuf:"varint,14,opt,name=has_password,json=hasPassword,proto3" json:"has_password" db:"has_password"`
	Perms        *UserFlags             `protobuf:"bytes,15,opt,name=perms" json:"perms,omitempty" db:"perms" token:"perms"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{1} }

func (m *User) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetUpdatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *User) GetPerms() *UserFlags {
	if m != nil {
		return m.Perms
	}
	return nil
}

type Customer struct {
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt     *opsee_types.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty" db:"created_at"`
	UpdatedAt     *opsee_types.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" db:"updated_at"`
	Users         []*User                `protobuf:"bytes,5,rep,name=users" json:"users,omitempty"`
	BastionStates []*BastionState        `protobuf:"bytes,6,rep,name=bastion_states,json=bastionStates" json:"bastion_states,omitempty"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{2} }

func (m *Customer) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Customer) GetUpdatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Customer) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Customer) GetBastionStates() []*BastionState {
	if m != nil {
		return m.BastionStates
	}
	return nil
}

type Team struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Subscription         string          `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty" db:"subscription"`
	CreditCardInfo       *CreditCardInfo `protobuf:"bytes,4,opt,name=creditCardInfo" json:"creditCardInfo,omitempty"`
	Invoices             []*Invoice      `protobuf:"bytes,5,rep,name=invoices" json:"invoices,omitempty"`
	Users                []*User         `protobuf:"bytes,6,rep,name=users" json:"users,omitempty"`
	StripeCustomerId     string          `protobuf:"bytes,7,opt,name=stripe_customer_id,json=stripeCustomerId,proto3" json:"stripe_customer_id,omitempty" db:"stripe_customer_id"`
	StripeSubscriptionId string          `protobuf:"bytes,8,opt,name=stripe_subscription_id,json=stripeSubscriptionId,proto3" json:"stripe_subscription_id,omitempty" db:"stripe_subscription_id"`
	SubscriptionQuantity int32           `protobuf:"varint,9,opt,name=subscription_quantity,json=subscriptionQuantity,proto3" json:"subscription_quantity,omitempty" db:"subscription_quantity"`
}

func (m *Team) Reset()                    { *m = Team{} }
func (m *Team) String() string            { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()               {}
func (*Team) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{3} }

func (m *Team) GetCreditCardInfo() *CreditCardInfo {
	if m != nil {
		return m.CreditCardInfo
	}
	return nil
}

func (m *Team) GetInvoices() []*Invoice {
	if m != nil {
		return m.Invoices
	}
	return nil
}

func (m *Team) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type Invoice struct {
	Date   *opsee_types.Timestamp `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	Amount int32                  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Paid   bool                   `protobuf:"varint,3,opt,name=paid,proto3" json:"paid,omitempty"`
}

func (m *Invoice) Reset()                    { *m = Invoice{} }
func (m *Invoice) String() string            { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()               {}
func (*Invoice) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{4} }

func (m *Invoice) GetDate() *opsee_types.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

type CreditCardInfo struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Last4    string `protobuf:"bytes,2,opt,name=last4,proto3" json:"last4,omitempty"`
	ExpMonth int32  `protobuf:"varint,3,opt,name=exp_month,json=expMonth,proto3" json:"exp_month,omitempty"`
	ExpYear  int32  `protobuf:"varint,4,opt,name=exp_year,json=expYear,proto3" json:"exp_year,omitempty"`
	Brand    string `protobuf:"bytes,5,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (m *CreditCardInfo) Reset()                    { *m = CreditCardInfo{} }
func (m *CreditCardInfo) String() string            { return proto.CompactTextString(m) }
func (*CreditCardInfo) ProtoMessage()               {}
func (*CreditCardInfo) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{5} }

type Invite struct {
	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email      string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CustomerId string                 `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty" db:"customer_id"`
	Perms      *UserFlags             `protobuf:"bytes,6,opt,name=perms" json:"perms,omitempty"`
	CreatedAt  *opsee_types.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty" db:"created_at"`
	UpdatedAt  *opsee_types.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" db:"updated_at"`
	Referrer   string                 `protobuf:"bytes,9,opt,name=referrer,proto3" json:"referrer,omitempty"`
	Claimed    bool                   `protobuf:"varint,10,opt,name=claimed,proto3" json:"claimed,omitempty"`
	Activated  bool                   `protobuf:"varint,11,opt,name=activated,proto3" json:"activated,omitempty"`
}

func (m *Invite) Reset()                    { *m = Invite{} }
func (m *Invite) String() string            { return proto.CompactTextString(m) }
func (*Invite) ProtoMessage()               {}
func (*Invite) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{6} }

func (m *Invite) GetPerms() *UserFlags {
	if m != nil {
		return m.Perms
	}
	return nil
}

func (m *Invite) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Invite) GetUpdatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*UserFlags)(nil), "opsee.UserFlags")
	proto.RegisterType((*User)(nil), "opsee.User")
	proto.RegisterType((*Customer)(nil), "opsee.Customer")
	proto.RegisterType((*Team)(nil), "opsee.Team")
	proto.RegisterType((*Invoice)(nil), "opsee.Invoice")
	proto.RegisterType((*CreditCardInfo)(nil), "opsee.CreditCardInfo")
	proto.RegisterType((*Invite)(nil), "opsee.Invite")
}
func (this *UserFlags) UInt64() uint64 {
	b := uint64(0)
	if this.Admin {
		b |= uint64(1) << uint64(0)
	}
	if this.Edit {
		b |= uint64(1) << uint64(1)
	}
	if this.Billing {
		b |= uint64(1) << uint64(2)
	}

	return b
}
func (this *UserFlags) HighFlags() []string {
	var b []string
	if this.Admin {
		b = append(b, "admin")
	}
	if this.Edit {
		b = append(b, "edit")
	}
	if this.Billing {
		b = append(b, "billing")
	}
	return b
}

func (this *UserFlags) LowFlags() []string {
	var b []string
	if !this.Admin {
		b = append(b, "admin")
	}
	if !this.Edit {
		b = append(b, "edit")
	}
	if !this.Billing {
		b = append(b, "billing")
	}
	return b
}

func (this *UserFlags) SetFlag(flag string) error {
	switch flag {
	case "admin":
		this.Admin = true
	case "edit":
		this.Edit = true
	case "billing":
		this.Billing = true
	default:
		return fmt.Errorf("invalid flag: %v", flag)
	}
	return nil
}
func (this *UserFlags) ClearFlag(flag string) error {
	switch flag {
	case "admin":
		this.Admin = false
	case "edit":
		this.Edit = false
	case "billing":
		this.Billing = false
	default:
		return fmt.Errorf("invalid flag: %v", flag)
	}
	return nil
}
func (this *UserFlags) SetFlags(flags ...string) []error {
	var errs []error
	for _, f := range flags {
		if err := this.SetFlag(f); err != nil {
			errs = append(errs, err)
		}
	}
	return errs
}
func (this *UserFlags) ClearFlags(flags ...string) []error {
	var errs []error
	for _, f := range flags {
		if err := this.ClearFlag(f); err != nil {
			errs = append(errs, err)
		}
	}
	return errs
}
func (this *UserFlags) TestFlag(flag string) bool {
	switch flag {
	case "admin":
		return this.Admin
	case "edit":
		return this.Edit
	case "billing":
		return this.Billing
	}
	return false
}
func (this *UserFlags) TestFlags(flags ...string) bool {
	for _, f := range flags {
		if !this.TestFlag(f) {
			return false
		}
	}
	return true
}
func (this *UserFlags) FromUInt64(b uint64) error {
	bb := b
	bb = b
	if bb&(uint64(1)<<uint(0)) > 0 {
		this.Admin = true
	} else {
		this.Admin = false
	}
	bb = b
	if bb&(uint64(1)<<uint(1)) > 0 {
		this.Edit = true
	} else {
		this.Edit = false
	}
	bb = b
	if bb&(uint64(1)<<uint(2)) > 0 {
		this.Billing = true
	} else {
		this.Billing = false
	}

	return nil
}
func (this *UserFlags) Scan(i interface{}) error {
	switch v := i.(type) {
	case int:
		return this.FromUInt64(uint64(v))
	case int32:
		return this.FromUInt64(uint64(v))
	case int64:
		return this.FromUInt64(uint64(v))
	case float32:
		return this.FromUInt64(uint64(v))
	case float64:
		return this.FromUInt64(uint64(v))
	}

	return fmt.Errorf("invalid type: %T", i)
}
func (this *UserFlags) Value() (database_sql_driver.Value, error) {
	return int64(this.UInt64()), nil
}
func (this *UserFlags) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserFlags)
	if !ok {
		that2, ok := that.(UserFlags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if this.Edit != that1.Edit {
		return false
	}
	if this.Billing != that1.Billing {
		return false
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Verified != that1.Verified {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if this.AdminId != that1.AdminId {
		return false
	}
	if this.PasswordHash != that1.PasswordHash {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.HasPassword != that1.HasPassword {
		return false
	}
	if !this.Perms.Equal(that1.Perms) {
		return false
	}
	return true
}
func (this *Customer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Customer)
	if !ok {
		that2, ok := that.(Customer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.BastionStates) != len(that1.BastionStates) {
		return false
	}
	for i := range this.BastionStates {
		if !this.BastionStates[i].Equal(that1.BastionStates[i]) {
			return false
		}
	}
	return true
}
func (this *Team) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Team)
	if !ok {
		that2, ok := that.(Team)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Subscription != that1.Subscription {
		return false
	}
	if !this.CreditCardInfo.Equal(that1.CreditCardInfo) {
		return false
	}
	if len(this.Invoices) != len(that1.Invoices) {
		return false
	}
	for i := range this.Invoices {
		if !this.Invoices[i].Equal(that1.Invoices[i]) {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if this.StripeCustomerId != that1.StripeCustomerId {
		return false
	}
	if this.StripeSubscriptionId != that1.StripeSubscriptionId {
		return false
	}
	if this.SubscriptionQuantity != that1.SubscriptionQuantity {
		return false
	}
	return true
}
func (this *Invoice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Invoice)
	if !ok {
		that2, ok := that.(Invoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Date.Equal(that1.Date) {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Paid != that1.Paid {
		return false
	}
	return true
}
func (this *CreditCardInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreditCardInfo)
	if !ok {
		that2, ok := that.(CreditCardInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Last4 != that1.Last4 {
		return false
	}
	if this.ExpMonth != that1.ExpMonth {
		return false
	}
	if this.ExpYear != that1.ExpYear {
		return false
	}
	if this.Brand != that1.Brand {
		return false
	}
	return true
}
func (this *Invite) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Invite)
	if !ok {
		that2, ok := that.(Invite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if !this.Perms.Equal(that1.Perms) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Referrer != that1.Referrer {
		return false
	}
	if this.Claimed != that1.Claimed {
		return false
	}
	if this.Activated != that1.Activated {
		return false
	}
	return true
}

type UserFlagsGetter interface {
	GetUserFlags() *UserFlags
}

var GraphQLUserFlagsType *github_com_graphql_go_graphql.Object

type UserGetter interface {
	GetUser() *User
}

var GraphQLUserType *github_com_graphql_go_graphql.Object

type CustomerGetter interface {
	GetCustomer() *Customer
}

var GraphQLCustomerType *github_com_graphql_go_graphql.Object

type TeamGetter interface {
	GetTeam() *Team
}

var GraphQLTeamType *github_com_graphql_go_graphql.Object

type InvoiceGetter interface {
	GetInvoice() *Invoice
}

var GraphQLInvoiceType *github_com_graphql_go_graphql.Object

type CreditCardInfoGetter interface {
	GetCreditCardInfo() *CreditCardInfo
}

var GraphQLCreditCardInfoType *github_com_graphql_go_graphql.Object

type InviteGetter interface {
	GetInvite() *Invite
}

var GraphQLInviteType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLUserFlagsType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaUserFlags",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"admin": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserFlags)
						if ok {
							return obj.Admin, nil
						}
						inter, ok := p.Source.(UserFlagsGetter)
						if ok {
							face := inter.GetUserFlags()
							if face == nil {
								return nil, nil
							}
							return face.Admin, nil
						}
						return nil, fmt.Errorf("field admin not resolved")
					},
				},
				"edit": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserFlags)
						if ok {
							return obj.Edit, nil
						}
						inter, ok := p.Source.(UserFlagsGetter)
						if ok {
							face := inter.GetUserFlags()
							if face == nil {
								return nil, nil
							}
							return face.Edit, nil
						}
						return nil, fmt.Errorf("field edit not resolved")
					},
				},
				"billing": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserFlags)
						if ok {
							return obj.Billing, nil
						}
						inter, ok := p.Source.(UserFlagsGetter)
						if ok {
							face := inter.GetUserFlags()
							if face == nil {
								return nil, nil
							}
							return face.Billing, nil
						}
						return nil, fmt.Errorf("field billing not resolved")
					},
				},
			}
		}),
	})
	GraphQLUserType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaUser",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"email": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Email, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Email, nil
						}
						return nil, fmt.Errorf("field email not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"verified": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Verified, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Verified, nil
						}
						return nil, fmt.Errorf("field verified not resolved")
					},
				},
				"admin": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Admin, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Admin, nil
						}
						return nil, fmt.Errorf("field admin not resolved")
					},
				},
				"active": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Active, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Active, nil
						}
						return nil, fmt.Errorf("field active not resolved")
					},
				},
				"admin_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.AdminId, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.AdminId, nil
						}
						return nil, fmt.Errorf("field admin_id not resolved")
					},
				},
				"password_hash": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.PasswordHash, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.PasswordHash, nil
						}
						return nil, fmt.Errorf("field password_hash not resolved")
					},
				},
				"created_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field created_at not resolved")
					},
				},
				"updated_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							if obj.UpdatedAt == nil {
								return nil, nil
							}
							return obj.GetUpdatedAt(), nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							if face.UpdatedAt == nil {
								return nil, nil
							}
							return face.GetUpdatedAt(), nil
						}
						return nil, fmt.Errorf("field updated_at not resolved")
					},
				},
				"status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Status, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Status, nil
						}
						return nil, fmt.Errorf("field status not resolved")
					},
				},
				"has_password": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.HasPassword, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.HasPassword, nil
						}
						return nil, fmt.Errorf("field has_password not resolved")
					},
				},
				"perms": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLUserFlagsType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							if obj.Perms == nil {
								return nil, nil
							}
							return obj.GetPerms(), nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							if face.Perms == nil {
								return nil, nil
							}
							return face.GetPerms(), nil
						}
						return nil, fmt.Errorf("field perms not resolved")
					},
				},
			}
		}),
	})
	GraphQLCustomerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCustomer",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"created_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field created_at not resolved")
					},
				},
				"updated_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							if obj.UpdatedAt == nil {
								return nil, nil
							}
							return obj.GetUpdatedAt(), nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							if face.UpdatedAt == nil {
								return nil, nil
							}
							return face.GetUpdatedAt(), nil
						}
						return nil, fmt.Errorf("field updated_at not resolved")
					},
				},
				"users": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLUserType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							return obj.Users, nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							return face.Users, nil
						}
						return nil, fmt.Errorf("field users not resolved")
					},
				},
				"bastion_states": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLBastionStateType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							return obj.BastionStates, nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							return face.BastionStates, nil
						}
						return nil, fmt.Errorf("field bastion_states not resolved")
					},
				},
			}
		}),
	})
	GraphQLTeamType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaTeam",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Team)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(TeamGetter)
						if ok {
							face := inter.GetTeam()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Team)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(TeamGetter)
						if ok {
							face := inter.GetTeam()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"subscription": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Team)
						if ok {
							return obj.Subscription, nil
						}
						inter, ok := p.Source.(TeamGetter)
						if ok {
							face := inter.GetTeam()
							if face == nil {
								return nil, nil
							}
							return face.Subscription, nil
						}
						return nil, fmt.Errorf("field subscription not resolved")
					},
				},
				"creditCardInfo": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLCreditCardInfoType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Team)
						if ok {
							if obj.CreditCardInfo == nil {
								return nil, nil
							}
							return obj.GetCreditCardInfo(), nil
						}
						inter, ok := p.Source.(TeamGetter)
						if ok {
							face := inter.GetTeam()
							if face == nil {
								return nil, nil
							}
							if face.CreditCardInfo == nil {
								return nil, nil
							}
							return face.GetCreditCardInfo(), nil
						}
						return nil, fmt.Errorf("field creditCardInfo not resolved")
					},
				},
				"invoices": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLInvoiceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Team)
						if ok {
							return obj.Invoices, nil
						}
						inter, ok := p.Source.(TeamGetter)
						if ok {
							face := inter.GetTeam()
							if face == nil {
								return nil, nil
							}
							return face.Invoices, nil
						}
						return nil, fmt.Errorf("field invoices not resolved")
					},
				},
				"users": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLUserType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Team)
						if ok {
							return obj.Users, nil
						}
						inter, ok := p.Source.(TeamGetter)
						if ok {
							face := inter.GetTeam()
							if face == nil {
								return nil, nil
							}
							return face.Users, nil
						}
						return nil, fmt.Errorf("field users not resolved")
					},
				},
				"stripe_customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Team)
						if ok {
							return obj.StripeCustomerId, nil
						}
						inter, ok := p.Source.(TeamGetter)
						if ok {
							face := inter.GetTeam()
							if face == nil {
								return nil, nil
							}
							return face.StripeCustomerId, nil
						}
						return nil, fmt.Errorf("field stripe_customer_id not resolved")
					},
				},
				"stripe_subscription_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Team)
						if ok {
							return obj.StripeSubscriptionId, nil
						}
						inter, ok := p.Source.(TeamGetter)
						if ok {
							face := inter.GetTeam()
							if face == nil {
								return nil, nil
							}
							return face.StripeSubscriptionId, nil
						}
						return nil, fmt.Errorf("field stripe_subscription_id not resolved")
					},
				},
				"subscription_quantity": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Team)
						if ok {
							return obj.SubscriptionQuantity, nil
						}
						inter, ok := p.Source.(TeamGetter)
						if ok {
							face := inter.GetTeam()
							if face == nil {
								return nil, nil
							}
							return face.SubscriptionQuantity, nil
						}
						return nil, fmt.Errorf("field subscription_quantity not resolved")
					},
				},
			}
		}),
	})
	GraphQLInvoiceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaInvoice",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"date": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invoice)
						if ok {
							if obj.Date == nil {
								return nil, nil
							}
							return obj.GetDate(), nil
						}
						inter, ok := p.Source.(InvoiceGetter)
						if ok {
							face := inter.GetInvoice()
							if face == nil {
								return nil, nil
							}
							if face.Date == nil {
								return nil, nil
							}
							return face.GetDate(), nil
						}
						return nil, fmt.Errorf("field date not resolved")
					},
				},
				"amount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invoice)
						if ok {
							return obj.Amount, nil
						}
						inter, ok := p.Source.(InvoiceGetter)
						if ok {
							face := inter.GetInvoice()
							if face == nil {
								return nil, nil
							}
							return face.Amount, nil
						}
						return nil, fmt.Errorf("field amount not resolved")
					},
				},
				"paid": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invoice)
						if ok {
							return obj.Paid, nil
						}
						inter, ok := p.Source.(InvoiceGetter)
						if ok {
							face := inter.GetInvoice()
							if face == nil {
								return nil, nil
							}
							return face.Paid, nil
						}
						return nil, fmt.Errorf("field paid not resolved")
					},
				},
			}
		}),
	})
	GraphQLCreditCardInfoType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCreditCardInfo",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"last4": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.Last4, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.Last4, nil
						}
						return nil, fmt.Errorf("field last4 not resolved")
					},
				},
				"exp_month": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.ExpMonth, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.ExpMonth, nil
						}
						return nil, fmt.Errorf("field exp_month not resolved")
					},
				},
				"exp_year": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.ExpYear, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.ExpYear, nil
						}
						return nil, fmt.Errorf("field exp_year not resolved")
					},
				},
				"brand": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.Brand, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.Brand, nil
						}
						return nil, fmt.Errorf("field brand not resolved")
					},
				},
			}
		}),
	})
	GraphQLInviteType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaInvite",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"email": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							return obj.Email, nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							return face.Email, nil
						}
						return nil, fmt.Errorf("field email not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"perms": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLUserFlagsType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							if obj.Perms == nil {
								return nil, nil
							}
							return obj.GetPerms(), nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							if face.Perms == nil {
								return nil, nil
							}
							return face.GetPerms(), nil
						}
						return nil, fmt.Errorf("field perms not resolved")
					},
				},
				"created_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field created_at not resolved")
					},
				},
				"updated_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							if obj.UpdatedAt == nil {
								return nil, nil
							}
							return obj.GetUpdatedAt(), nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							if face.UpdatedAt == nil {
								return nil, nil
							}
							return face.GetUpdatedAt(), nil
						}
						return nil, fmt.Errorf("field updated_at not resolved")
					},
				},
				"referrer": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							return obj.Referrer, nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							return face.Referrer, nil
						}
						return nil, fmt.Errorf("field referrer not resolved")
					},
				},
				"claimed": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							return obj.Claimed, nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							return face.Claimed, nil
						}
						return nil, fmt.Errorf("field claimed not resolved")
					},
				},
				"activated": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Invite)
						if ok {
							return obj.Activated, nil
						}
						inter, ok := p.Source.(InviteGetter)
						if ok {
							face := inter.GetInvite()
							if face == nil {
								return nil, nil
							}
							return face.Activated, nil
						}
						return nil, fmt.Errorf("field activated not resolved")
					},
				},
			}
		}),
	})
}
func (m *UserFlags) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UserFlags) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Admin {
		data[i] = 0x8
		i++
		if m.Admin {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Edit {
		data[i] = 0x10
		i++
		if m.Edit {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Billing {
		data[i] = 0x18
		i++
		if m.Billing {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *User) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *User) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintUser(data, i, uint64(m.Id))
	}
	if len(m.CustomerId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintUser(data, i, uint64(len(m.CustomerId)))
		i += copy(data[i:], m.CustomerId)
	}
	if len(m.Email) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.Name) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Verified {
		data[i] = 0x28
		i++
		if m.Verified {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Admin {
		data[i] = 0x30
		i++
		if m.Admin {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Active {
		data[i] = 0x38
		i++
		if m.Active {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.AdminId != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintUser(data, i, uint64(m.AdminId))
	}
	if len(m.PasswordHash) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.PasswordHash)))
		i += copy(data[i:], m.PasswordHash)
	}
	if m.CreatedAt != nil {
		data[i] = 0x52
		i++
		i = encodeVarintUser(data, i, uint64(m.CreatedAt.Size()))
		n1, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdatedAt != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintUser(data, i, uint64(m.UpdatedAt.Size()))
		n2, err := m.UpdatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Status) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if m.HasPassword {
		data[i] = 0x70
		i++
		if m.HasPassword {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Perms != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintUser(data, i, uint64(m.Perms.Size()))
		n3, err := m.Perms.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Customer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Customer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.CreatedAt != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintUser(data, i, uint64(m.CreatedAt.Size()))
		n4, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.UpdatedAt != nil {
		data[i] = 0x22
		i++
		i = encodeVarintUser(data, i, uint64(m.UpdatedAt.Size()))
		n5, err := m.UpdatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			data[i] = 0x2a
			i++
			i = encodeVarintUser(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BastionStates) > 0 {
		for _, msg := range m.BastionStates {
			data[i] = 0x32
			i++
			i = encodeVarintUser(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Team) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Team) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Subscription) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Subscription)))
		i += copy(data[i:], m.Subscription)
	}
	if m.CreditCardInfo != nil {
		data[i] = 0x22
		i++
		i = encodeVarintUser(data, i, uint64(m.CreditCardInfo.Size()))
		n6, err := m.CreditCardInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Invoices) > 0 {
		for _, msg := range m.Invoices {
			data[i] = 0x2a
			i++
			i = encodeVarintUser(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			data[i] = 0x32
			i++
			i = encodeVarintUser(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.StripeCustomerId) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.StripeCustomerId)))
		i += copy(data[i:], m.StripeCustomerId)
	}
	if len(m.StripeSubscriptionId) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintUser(data, i, uint64(len(m.StripeSubscriptionId)))
		i += copy(data[i:], m.StripeSubscriptionId)
	}
	if m.SubscriptionQuantity != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintUser(data, i, uint64(m.SubscriptionQuantity))
	}
	return i, nil
}

func (m *Invoice) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Invoice) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Date != nil {
		data[i] = 0xa
		i++
		i = encodeVarintUser(data, i, uint64(m.Date.Size()))
		n7, err := m.Date.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Amount != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintUser(data, i, uint64(m.Amount))
	}
	if m.Paid {
		data[i] = 0x18
		i++
		if m.Paid {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreditCardInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreditCardInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Last4) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Last4)))
		i += copy(data[i:], m.Last4)
	}
	if m.ExpMonth != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintUser(data, i, uint64(m.ExpMonth))
	}
	if m.ExpYear != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintUser(data, i, uint64(m.ExpYear))
	}
	if len(m.Brand) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Brand)))
		i += copy(data[i:], m.Brand)
	}
	return i, nil
}

func (m *Invite) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Invite) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintUser(data, i, uint64(m.Id))
	}
	if len(m.Email) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.CustomerId) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintUser(data, i, uint64(len(m.CustomerId)))
		i += copy(data[i:], m.CustomerId)
	}
	if m.Perms != nil {
		data[i] = 0x32
		i++
		i = encodeVarintUser(data, i, uint64(m.Perms.Size()))
		n8, err := m.Perms.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.CreatedAt != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintUser(data, i, uint64(m.CreatedAt.Size()))
		n9, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.UpdatedAt != nil {
		data[i] = 0x42
		i++
		i = encodeVarintUser(data, i, uint64(m.UpdatedAt.Size()))
		n10, err := m.UpdatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Referrer) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Referrer)))
		i += copy(data[i:], m.Referrer)
	}
	if m.Claimed {
		data[i] = 0x50
		i++
		if m.Claimed {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Activated {
		data[i] = 0x58
		i++
		if m.Activated {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64User(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32User(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUser(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUserFlags(r randyUser, easy bool) *UserFlags {
	this := &UserFlags{}
	this.Admin = bool(bool(r.Intn(2) == 0))
	this.Edit = bool(bool(r.Intn(2) == 0))
	this.Billing = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUser(r randyUser, easy bool) *User {
	this := &User{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.CustomerId = randStringUser(r)
	this.Email = randStringUser(r)
	this.Name = randStringUser(r)
	this.Verified = bool(bool(r.Intn(2) == 0))
	this.Admin = bool(bool(r.Intn(2) == 0))
	this.Active = bool(bool(r.Intn(2) == 0))
	this.AdminId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.AdminId *= -1
	}
	this.PasswordHash = randStringUser(r)
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UpdatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	this.Status = randStringUser(r)
	this.HasPassword = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.Perms = NewPopulatedUserFlags(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCustomer(r randyUser, easy bool) *Customer {
	this := &Customer{}
	this.Id = randStringUser(r)
	this.Name = randStringUser(r)
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UpdatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Users = make([]*User, v1)
		for i := 0; i < v1; i++ {
			this.Users[i] = NewPopulatedUser(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.BastionStates = make([]*BastionState, v2)
		for i := 0; i < v2; i++ {
			this.BastionStates[i] = NewPopulatedBastionState(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTeam(r randyUser, easy bool) *Team {
	this := &Team{}
	this.Id = randStringUser(r)
	this.Name = randStringUser(r)
	this.Subscription = randStringUser(r)
	if r.Intn(10) != 0 {
		this.CreditCardInfo = NewPopulatedCreditCardInfo(r, easy)
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Invoices = make([]*Invoice, v3)
		for i := 0; i < v3; i++ {
			this.Invoices[i] = NewPopulatedInvoice(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Users = make([]*User, v4)
		for i := 0; i < v4; i++ {
			this.Users[i] = NewPopulatedUser(r, easy)
		}
	}
	this.StripeCustomerId = randStringUser(r)
	this.StripeSubscriptionId = randStringUser(r)
	this.SubscriptionQuantity = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.SubscriptionQuantity *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInvoice(r randyUser, easy bool) *Invoice {
	this := &Invoice{}
	if r.Intn(10) != 0 {
		this.Date = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	this.Amount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Amount *= -1
	}
	this.Paid = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreditCardInfo(r randyUser, easy bool) *CreditCardInfo {
	this := &CreditCardInfo{}
	this.Name = randStringUser(r)
	this.Last4 = randStringUser(r)
	this.ExpMonth = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ExpMonth *= -1
	}
	this.ExpYear = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ExpYear *= -1
	}
	this.Brand = randStringUser(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInvite(r randyUser, easy bool) *Invite {
	this := &Invite{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Email = randStringUser(r)
	this.Name = randStringUser(r)
	this.CustomerId = randStringUser(r)
	if r.Intn(10) != 0 {
		this.Perms = NewPopulatedUserFlags(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UpdatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	this.Referrer = randStringUser(r)
	this.Claimed = bool(bool(r.Intn(2) == 0))
	this.Activated = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyUser interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUser(r randyUser) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUser(r randyUser) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneUser(r)
	}
	return string(tmps)
}
func randUnrecognizedUser(r randyUser, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldUser(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldUser(data []byte, r randyUser, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateUser(data, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		data = encodeVarintPopulateUser(data, uint64(v6))
	case 1:
		data = encodeVarintPopulateUser(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateUser(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateUser(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateUser(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateUser(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *UserFlags) Size() (n int) {
	var l int
	_ = l
	if m.Admin {
		n += 2
	}
	if m.Edit {
		n += 2
	}
	if m.Billing {
		n += 2
	}
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	if m.Admin {
		n += 2
	}
	if m.Active {
		n += 2
	}
	if m.AdminId != 0 {
		n += 1 + sovUser(uint64(m.AdminId))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.HasPassword {
		n += 2
	}
	if m.Perms != nil {
		l = m.Perms.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *Customer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.BastionStates) > 0 {
		for _, e := range m.BastionStates {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *Team) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Subscription)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreditCardInfo != nil {
		l = m.CreditCardInfo.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Invoices) > 0 {
		for _, e := range m.Invoices {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	l = len(m.StripeCustomerId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.StripeSubscriptionId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.SubscriptionQuantity != 0 {
		n += 1 + sovUser(uint64(m.SubscriptionQuantity))
	}
	return n
}

func (m *Invoice) Size() (n int) {
	var l int
	_ = l
	if m.Date != nil {
		l = m.Date.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovUser(uint64(m.Amount))
	}
	if m.Paid {
		n += 2
	}
	return n
}

func (m *CreditCardInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Last4)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.ExpMonth != 0 {
		n += 1 + sovUser(uint64(m.ExpMonth))
	}
	if m.ExpYear != 0 {
		n += 1 + sovUser(uint64(m.ExpYear))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *Invite) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Perms != nil {
		l = m.Perms.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Referrer)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Claimed {
		n += 2
	}
	if m.Activated {
		n += 2
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserFlags) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Edit = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Billing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Billing = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &opsee_types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPassword = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Perms == nil {
				m.Perms = &UserFlags{}
			}
			if err := m.Perms.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Customer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Customer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Customer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &opsee_types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BastionStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BastionStates = append(m.BastionStates, &BastionState{})
			if err := m.BastionStates[len(m.BastionStates)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscription = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreditCardInfo == nil {
				m.CreditCardInfo = &CreditCardInfo{}
			}
			if err := m.CreditCardInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invoices = append(m.Invoices, &Invoice{})
			if err := m.Invoices[len(m.Invoices)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripeCustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StripeCustomerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripeSubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StripeSubscriptionId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionQuantity", wireType)
			}
			m.SubscriptionQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SubscriptionQuantity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invoice) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Date == nil {
				m.Date = &opsee_types.Timestamp{}
			}
			if err := m.Date.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditCardInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditCardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditCardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last4 = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpMonth", wireType)
			}
			m.ExpMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpMonth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpYear", wireType)
			}
			m.ExpYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpYear |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invite) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Perms == nil {
				m.Perms = &UserFlags{}
			}
			if err := m.Perms.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &opsee_types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referrer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referrer = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorUser = []byte{
	// 1094 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x97, 0x63, 0xaf, 0xbd, 0xfb, 0x9c, 0xb8, 0x61, 0x9a, 0x84, 0x25, 0x29, 0x49, 0x3a, 0x0a,
	0xa8, 0x02, 0x9a, 0x20, 0x28, 0x08, 0x22, 0x90, 0xca, 0x06, 0xa1, 0x06, 0xa9, 0x12, 0x4c, 0x9a,
	0x03, 0x5c, 0xac, 0xb5, 0x77, 0x12, 0xaf, 0xea, 0xfd, 0xc3, 0xce, 0x3a, 0x90, 0x1b, 0x47, 0x2e,
	0x7c, 0x09, 0x24, 0x10, 0x1f, 0x81, 0x23, 0xc7, 0x1e, 0xb9, 0x70, 0xad, 0x80, 0x23, 0x47, 0x4e,
	0x70, 0xe3, 0xcd, 0x9b, 0x59, 0x7b, 0x6d, 0x28, 0x2a, 0x6a, 0x0f, 0x96, 0xe6, 0xf7, 0xde, 0xef,
	0x3d, 0xcf, 0x7b, 0xf3, 0xfe, 0x2c, 0xc0, 0x44, 0xc9, 0x62, 0x3f, 0x2f, 0xb2, 0x32, 0x63, 0x4e,
	0x96, 0x2b, 0x29, 0x37, 0x6f, 0x9e, 0xc7, 0xe5, 0x68, 0x32, 0xd8, 0x1f, 0x66, 0xc9, 0xc1, 0x79,
	0x76, 0x9e, 0x1d, 0x90, 0x76, 0x30, 0x39, 0x23, 0x44, 0x80, 0x4e, 0xc6, 0x6a, 0xf3, 0xd5, 0x1a,
	0x9d, 0x1c, 0xcc, 0xf8, 0x04, 0x8d, 0x01, 0x1d, 0xad, 0xc5, 0x3b, 0x8f, 0x65, 0x51, 0x5e, 0xe6,
	0x52, 0x1d, 0xe4, 0xb2, 0x48, 0x62, 0xa5, 0xe2, 0x2c, 0x55, 0xd6, 0xfa, 0xf0, 0x7f, 0x58, 0x97,
	0x71, 0x22, 0x55, 0x19, 0x26, 0xb9, 0xb5, 0xed, 0x22, 0x18, 0xde, 0x37, 0x80, 0x9f, 0x82, 0x77,
	0x8a, 0xc1, 0x7f, 0x30, 0x0e, 0xcf, 0x15, 0x5b, 0x03, 0x27, 0x8c, 0x92, 0x38, 0xf5, 0x1b, 0xbb,
	0x8d, 0x1b, 0xae, 0x30, 0x80, 0x31, 0x68, 0xc9, 0x28, 0x2e, 0xfd, 0x25, 0x12, 0xd2, 0x99, 0xf9,
	0xd0, 0x19, 0xc4, 0xe3, 0x71, 0x9c, 0x9e, 0xfb, 0x4d, 0x12, 0x57, 0xf0, 0xb0, 0xf5, 0xe0, 0x9b,
	0x9d, 0x06, 0xff, 0xb9, 0x0d, 0x2d, 0xed, 0x97, 0x71, 0x58, 0x8a, 0x23, 0xf2, 0xe7, 0x04, 0xec,
	0xcb, 0xef, 0x9e, 0x6f, 0xfc, 0xf1, 0x70, 0x07, 0xca, 0xec, 0xbe, 0x4c, 0x0f, 0x79, 0x1c, 0x71,
	0x81, 0x5a, 0x76, 0x17, 0xba, 0xc3, 0x89, 0x2a, 0xb3, 0x44, 0x16, 0x7d, 0x24, 0xeb, 0xff, 0xf1,
	0x82, 0x57, 0x2c, 0x79, 0xcf, 0x92, 0x6b, 0x0c, 0xbe, 0x1b, 0x0d, 0xe6, 0x05, 0x02, 0x2a, 0x74,
	0x1c, 0xb1, 0x97, 0xc1, 0x91, 0x49, 0x18, 0x8f, 0xe9, 0x66, 0x5e, 0xb0, 0x6e, 0x1d, 0xad, 0x58,
	0x47, 0xa4, 0xe3, 0xc2, 0x70, 0xd8, 0x0d, 0x68, 0xa5, 0x61, 0x22, 0xfd, 0x16, 0x71, 0xd7, 0x2c,
	0x77, 0xd9, 0x72, 0xb5, 0x8a, 0x0b, 0x62, 0xb0, 0xdb, 0xe0, 0x5e, 0xc8, 0x22, 0x3e, 0x8b, 0x65,
	0xe4, 0x3b, 0x3a, 0xe6, 0x60, 0x4f, 0xb3, 0x7f, 0x7f, 0xb8, 0x33, 0x95, 0xa3, 0xe5, 0xaa, 0xb5,
	0xac, 0x44, 0x5c, 0x4c, 0xb5, 0xec, 0x56, 0x95, 0xde, 0x36, 0x99, 0x6f, 0x5b, 0x73, 0x23, 0xac,
	0xdd, 0x90, 0x30, 0xaf, 0xd2, 0xff, 0x16, 0xb4, 0xc3, 0x61, 0x19, 0x5f, 0x48, 0xbf, 0x43, 0x66,
	0xbb, 0xd6, 0xcc, 0x4a, 0xd1, 0xae, 0x57, 0xd9, 0x91, 0x80, 0x0b, 0xab, 0x61, 0x07, 0xe0, 0x92,
	0x0b, 0x9d, 0x54, 0x97, 0x5e, 0x60, 0xad, 0x76, 0xc3, 0x4a, 0xc5, 0x45, 0x87, 0x8e, 0x98, 0xb9,
	0xdb, 0xb0, 0x92, 0x87, 0x4a, 0x7d, 0x9e, 0x15, 0x51, 0x7f, 0x14, 0xaa, 0x91, 0xef, 0x51, 0x56,
	0xb6, 0xf0, 0xdf, 0x1a, 0x37, 0xd1, 0x94, 0xe9, 0xbc, 0xcf, 0x31, 0xb8, 0x58, 0xae, 0xf0, 0x1d,
	0x84, 0xec, 0x43, 0x80, 0x61, 0x21, 0xc3, 0x52, 0x46, 0xfd, 0xb0, 0xf4, 0x01, 0xcd, 0xbb, 0xaf,
	0x6d, 0xec, 0x9b, 0xba, 0xa7, 0x6a, 0xdc, 0xbf, 0x57, 0x55, 0x63, 0x70, 0x15, 0x3d, 0x5e, 0xa1,
	0x97, 0x9c, 0x5a, 0x70, 0xe1, 0x59, 0xf0, 0x5e, 0xa9, 0x7d, 0x4d, 0xf2, 0xa8, 0xf2, 0xd5, 0x7d,
	0x3c, 0x5f, 0x33, 0x0b, 0xf4, 0x65, 0x01, 0xfa, 0x7a, 0x13, 0xda, 0x48, 0x2c, 0x27, 0xca, 0x5f,
	0xa6, 0x90, 0xb6, 0x91, 0xbf, 0x69, 0x13, 0x61, 0x14, 0xa6, 0xa8, 0xec, 0x59, 0x58, 0x36, 0xbb,
	0x03, 0xcb, 0x18, 0x66, 0xbf, 0x8a, 0xd1, 0xef, 0xd1, 0x13, 0xbc, 0x80, 0x09, 0x99, 0x93, 0xa3,
	0xb7, 0x67, 0xb4, 0x79, 0x5d, 0xc6, 0x45, 0x17, 0xe1, 0x47, 0x16, 0xb1, 0xf7, 0xc1, 0xd1, 0x6d,
	0xac, 0xfc, 0x2b, 0x14, 0xc8, 0xaa, 0x0d, 0x64, 0xda, 0x7c, 0xc1, 0x35, 0x74, 0xe2, 0x53, 0x82,
	0x35, 0x8d, 0xef, 0xda, 0xdb, 0x19, 0x24, 0x8c, 0x31, 0xff, 0x76, 0x09, 0xdc, 0x23, 0x5b, 0xea,
	0xac, 0x37, 0xed, 0x2d, 0x8f, 0xfa, 0x88, 0xd9, 0x5a, 0xa6, 0x06, 0xb2, 0x55, 0x3b, 0xff, 0x20,
	0xcd, 0xa7, 0xf8, 0x20, 0xad, 0x27, 0x7a, 0x90, 0xeb, 0xe0, 0xe8, 0xa1, 0xab, 0xb0, 0x95, 0x9a,
	0xe8, 0xa6, 0x5b, 0x4b, 0x87, 0x30, 0x1a, 0x76, 0x08, 0xbd, 0x41, 0xa8, 0x4a, 0x9c, 0x7a, 0x7d,
	0xfd, 0x1a, 0x52, 0x61, 0xdf, 0x68, 0xee, 0x55, 0xcb, 0x0d, 0x8c, 0xf2, 0x44, 0xeb, 0xc4, 0xca,
	0xa0, 0x86, 0x14, 0xff, 0xab, 0x09, 0xad, 0x7b, 0x32, 0x4c, 0xfe, 0x91, 0xa3, 0xeb, 0xf5, 0x1c,
	0x05, 0x2b, 0x78, 0x4b, 0x4f, 0xdf, 0xb2, 0xde, 0xe8, 0x6f, 0xc3, 0xb2, 0x9a, 0x0c, 0xd4, 0xb0,
	0x88, 0x73, 0xed, 0xb1, 0x1a, 0x23, 0xd5, 0x1b, 0xd7, 0x75, 0x58, 0xfe, 0x75, 0xc8, 0xde, 0x85,
	0x1e, 0xa6, 0x0b, 0x07, 0xe4, 0x51, 0x58, 0x44, 0xc7, 0xe9, 0x59, 0x66, 0xb3, 0xb4, 0x6e, 0xaf,
	0x7c, 0x34, 0xa7, 0x14, 0x0b, 0x64, 0xf6, 0x12, 0xb8, 0x71, 0x7a, 0x91, 0xc5, 0x43, 0x59, 0xe5,
	0xa5, 0x67, 0x0d, 0x8f, 0x8d, 0x58, 0x4c, 0xf5, 0xb3, 0x04, 0xb6, 0x1f, 0x99, 0xc0, 0x63, 0x60,
	0xaa, 0xc4, 0xab, 0xc9, 0x7e, 0x7d, 0xbc, 0x76, 0x4c, 0x4f, 0x63, 0x38, 0xcf, 0x9a, 0x8a, 0x5f,
	0x64, 0x70, 0xb1, 0x6a, 0x84, 0x47, 0xb3, 0x99, 0x7a, 0x0a, 0x1b, 0x96, 0x58, 0x8f, 0xb7, 0x1a,
	0x2c, 0x5e, 0xb0, 0x83, 0xee, 0xb6, 0x6a, 0xee, 0x16, 0x58, 0x5c, 0xac, 0x19, 0xc5, 0x49, 0x4d,
	0x8e, 0x6e, 0x4f, 0x60, 0x7d, 0x8e, 0xf9, 0xd9, 0x24, 0x4c, 0xcb, 0xb8, 0xbc, 0xa4, 0xc1, 0xe3,
	0x98, 0x2e, 0x5d, 0xcc, 0xf9, 0x94, 0xa4, 0x9d, 0xd6, 0xe4, 0x1f, 0x57, 0xe2, 0x10, 0x3a, 0x36,
	0x5d, 0x98, 0xd0, 0x96, 0x2e, 0x38, 0x7a, 0xff, 0x47, 0xd6, 0xaa, 0x20, 0x0e, 0xdb, 0xc0, 0x39,
	0x9b, 0x64, 0x93, 0xd4, 0x2c, 0x3a, 0x47, 0x58, 0xa4, 0xbb, 0x2a, 0x0f, 0x31, 0x50, 0xb3, 0xe7,
	0xe8, 0xcc, 0xbf, 0x6a, 0x40, 0x6f, 0xfe, 0x2d, 0xa7, 0xcd, 0xd7, 0xa8, 0x35, 0x1f, 0xee, 0xd3,
	0x31, 0x96, 0xe5, 0x2d, 0xdb, 0x91, 0x06, 0xb0, 0x2d, 0xf0, 0xe4, 0x17, 0x79, 0x3f, 0xc9, 0xd2,
	0x72, 0x44, 0x5e, 0x1d, 0xe1, 0xa2, 0xe0, 0xae, 0xc6, 0xec, 0x39, 0xd0, 0xe7, 0xfe, 0xa5, 0x0c,
	0x0b, 0xaa, 0x1d, 0x47, 0x74, 0x10, 0x7f, 0x82, 0x50, 0x7b, 0x1b, 0x14, 0x61, 0x6a, 0xb6, 0x0f,
	0x7a, 0x23, 0xc0, 0xbf, 0x6e, 0x42, 0x1b, 0xc3, 0x8d, 0x31, 0x82, 0x59, 0xad, 0x3b, 0x54, 0xeb,
	0x6b, 0xd5, 0x22, 0xb4, 0x7f, 0x6f, 0x36, 0x5e, 0x75, 0xd1, 0x66, 0xed, 0xa2, 0x6f, 0xcc, 0x6f,
	0x60, 0xbb, 0x0c, 0xf5, 0xb2, 0xf8, 0xcf, 0x4d, 0xfb, 0x62, 0x35, 0xd3, 0xda, 0xff, 0x3e, 0xd3,
	0xec, 0xd4, 0x5a, 0x18, 0x42, 0x9d, 0xa7, 0x38, 0x84, 0xdc, 0x27, 0x1a, 0x42, 0x9b, 0xe0, 0x16,
	0xf2, 0x4c, 0x16, 0x85, 0x2c, 0xcc, 0xaa, 0x13, 0x53, 0xac, 0xbf, 0x70, 0x86, 0xe3, 0x10, 0x5d,
	0x45, 0xb4, 0xc6, 0xf0, 0x0b, 0xc7, 0x42, 0x76, 0x0d, 0x3c, 0x5a, 0xb0, 0xda, 0x09, 0xad, 0x25,
	0x57, 0xcc, 0x04, 0xc1, 0xde, 0x9f, 0xbf, 0x6e, 0x37, 0xbe, 0xff, 0x6d, 0xbb, 0xf1, 0x03, 0xfe,
	0x1e, 0xe0, 0xef, 0x27, 0xfc, 0xfd, 0x82, 0xbf, 0x1f, 0xf1, 0xbb, 0xe8, 0xd3, 0xb6, 0x1a, 0x8e,
	0xf0, 0x19, 0x06, 0x6d, 0xfa, 0xfa, 0x7a, 0xfd, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x32,
	0xda, 0xd8, 0x7a, 0x0a, 0x00, 0x00,
}
