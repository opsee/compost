syntax = "proto3";

import "github.com/opsee/protobuf/opseeproto/types/timestamp.proto";
import "github.com/opsee/protobuf/opseeproto/types/any.proto";
import "github.com/opsee/protobuf/opseeproto/types/errors.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/opsee/protobuf/opseeproto/opsee.proto";


package opsee;

option java_package = "co.opsee.proto";
option java_multiple_files = true;
option java_outer_classname = "BastionProto";

option go_package = "schema";
option (opseeproto.graphql) = true;

message Target {
	string name = 1;
	string type = 2 [(opseeproto.required) = true];
	string id = 3 [(opseeproto.required) = true];
	string address = 4 [(gogoproto.moretags) = "dynamodbav:\",omitempty\""];
}

message Check {
	string id = 1;
	int32 interval = 2 [(opseeproto.required) = true];
	Target target = 3 [(opseeproto.required) = true];
	opsee.types.Timestamp last_run = 4;
	opsee.types.Any check_spec = 5 [(opseeproto.required) = true];
	string name = 6 [(opseeproto.required) = true];
	repeated Assertion assertions = 7;
	repeated CheckResult results = 8;
	oneof spec {
		HttpCheck http_check = 101;
		CloudWatchCheck cloudwatch_check = 102;
	}
	repeated Notification notifications = 9;
	string customer_id = 10 [(gogoproto.moretags) = "db:\"customer_id\""];
	string execution_group_id = 11;
	int32 min_failing_count = 12 [(gogoproto.moretags) = "db:\"min_failing_count\""];
	int64 min_failing_time = 13 [(gogoproto.moretags) = "db:\"min_failing_time\""];
}

message Notification {
	string type = 1;
	string value = 2;
}

message Assertion {
	// key is one of "code", "header", "body".
	string key = 1 [(opseeproto.required) = true];
	// In the case of key=header, value would be the header field.
	string value = 2;
	// relationship is one of: "equal" "notEqual" "empty" "notEmpty" "contain" "notContain" "regExp"
	string relationship = 3 [(opseeproto.required) = true];
	string operand = 4;
}

message Header {
	string name = 1 [(opseeproto.required) = true];
	repeated string values = 2;
}

message HttpCheck {
	string name = 1; //deprecated
	string path = 2 [(opseeproto.required) = true];
	string protocol = 3 [(opseeproto.required) = true];
	int32 port = 4 [(opseeproto.required) = true];
	string verb = 5 [(opseeproto.required) = true];
	repeated Header headers = 6;
	string body = 7;
}

message CloudWatchCheck {
	repeated CloudWatchMetric metrics = 1;
}

message CloudWatchMetric {
	string namespace = 1;
	string name = 2;
}

message CloudWatchResponse {
	// The AWS CloudWatch metric namespace, e.g. AWS/RDS
	string namespace = 1;
	repeated Metric metrics = 2;
	repeated opsee.types.Error errors = 3; // code field corresponds to MetricName
}

message Tag {
	string name = 1;
	string value = 2;
}

message Metric {
	string name = 1;
	double value = 2 [(opseeproto.required) = true];
	repeated Tag tags = 3 [(gogoproto.moretags) = "dynamodbav:\",omitempty\""];
	opsee.types.Timestamp timestamp = 4;
	string unit = 5;	  // kbps, percent, ...
	string statistic = 6 [(gogoproto.moretags) = "dynamodbav:\",omitempty\""]; // average, sum, ...
}

message HttpResponse {
	int32 code = 1;
	string body = 2 [(gogoproto.moretags) = "dynamodbav:\",omitempty\""];
	repeated Header headers = 3 [(gogoproto.moretags) = "dynamodbav:\",omitempty\""];
	repeated Metric metrics = 4 [(gogoproto.moretags) = "dynamodbav:\",omitempty\""];
	string host = 5;
}


message CheckResponse {
	Target target = 1;
	opsee.types.Any response = 2 [(gogoproto.moretags) = "dynamodbav:\"-\""];
	string error = 3;
	bool passing = 4;
	oneof reply {
		HttpResponse http_response = 101 [(gogoproto.moretags) = "dynamodbav:\",omitempty\""];
		CloudWatchResponse cloudwatch_response = 102 [(gogoproto.moretags) = "dynamodbav:\",omitempty\""];
	}
}

message CheckResult {
	string check_id = 1;
	string customer_id = 2;
	opsee.types.Timestamp timestamp = 3;
	bool passing = 4;
	repeated CheckResponse responses = 5 [(gogoproto.moretags) = "dynamodbav:\"-\""];
	Target target = 6;
	string check_name = 7;
	int32 version = 8;
	string bastion_id = 9;
}
