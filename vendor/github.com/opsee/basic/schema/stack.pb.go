// Code generated by protoc-gen-gogo.
// source: stack.proto
// DO NOT EDIT!

package schema

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BastionState struct {
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerId string                 `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty" db:"customer_id"`
	Status     string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	LastSeen   *opsee_types.Timestamp `protobuf:"bytes,4,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty" db:"last_seen"`
	Region     string                 `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	VpcId      string                 `protobuf:"bytes,6,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
}

func (m *BastionState) Reset()                    { *m = BastionState{} }
func (m *BastionState) String() string            { return proto.CompactTextString(m) }
func (*BastionState) ProtoMessage()               {}
func (*BastionState) Descriptor() ([]byte, []int) { return fileDescriptorStack, []int{0} }

func (m *BastionState) GetLastSeen() *opsee_types.Timestamp {
	if m != nil {
		return m.LastSeen
	}
	return nil
}

type Stack struct {
	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerId   string                 `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty" db:"customer_id"`
	UserId       int32                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" db:"user_id"`
	VpcId        string                 `protobuf:"bytes,4,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty" db:"vpc_id"`
	State        string                 `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Password     string                 `protobuf:"bytes,6,opt,name=password,proto3" json:"-"`
	PasswordHash string                 `protobuf:"bytes,7,opt,name=password_hash,json=passwordHash,proto3" json:"-" db:"password_hash"`
	CreatedAt    *opsee_types.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty" db:"created_at"`
	UpdatedAt    *opsee_types.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" db:"updated_at"`
}

func (m *Stack) Reset()                    { *m = Stack{} }
func (m *Stack) String() string            { return proto.CompactTextString(m) }
func (*Stack) ProtoMessage()               {}
func (*Stack) Descriptor() ([]byte, []int) { return fileDescriptorStack, []int{1} }

func (m *Stack) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Stack) GetUpdatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*BastionState)(nil), "opsee.BastionState")
	proto.RegisterType((*Stack)(nil), "opsee.Stack")
}
func (this *BastionState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BastionState)
	if !ok {
		that2, ok := that.(BastionState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.LastSeen.Equal(that1.LastSeen) {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	return true
}
func (this *Stack) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Stack)
	if !ok {
		that2, ok := that.(Stack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.PasswordHash != that1.PasswordHash {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}

type BastionStateGetter interface {
	GetBastionState() *BastionState
}

var GraphQLBastionStateType *github_com_graphql_go_graphql.Object

type StackGetter interface {
	GetStack() *Stack
}

var GraphQLStackType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLBastionStateType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaBastionState",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BastionState)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(BastionStateGetter)
						if ok {
							face := inter.GetBastionState()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BastionState)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(BastionStateGetter)
						if ok {
							face := inter.GetBastionState()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BastionState)
						if ok {
							return obj.Status, nil
						}
						inter, ok := p.Source.(BastionStateGetter)
						if ok {
							face := inter.GetBastionState()
							if face == nil {
								return nil, nil
							}
							return face.Status, nil
						}
						return nil, fmt.Errorf("field status not resolved")
					},
				},
				"last_seen": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BastionState)
						if ok {
							if obj.LastSeen == nil {
								return nil, nil
							}
							return obj.GetLastSeen(), nil
						}
						inter, ok := p.Source.(BastionStateGetter)
						if ok {
							face := inter.GetBastionState()
							if face == nil {
								return nil, nil
							}
							if face.LastSeen == nil {
								return nil, nil
							}
							return face.GetLastSeen(), nil
						}
						return nil, fmt.Errorf("field last_seen not resolved")
					},
				},
				"region": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BastionState)
						if ok {
							return obj.Region, nil
						}
						inter, ok := p.Source.(BastionStateGetter)
						if ok {
							face := inter.GetBastionState()
							if face == nil {
								return nil, nil
							}
							return face.Region, nil
						}
						return nil, fmt.Errorf("field region not resolved")
					},
				},
				"vpc_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BastionState)
						if ok {
							return obj.VpcId, nil
						}
						inter, ok := p.Source.(BastionStateGetter)
						if ok {
							face := inter.GetBastionState()
							if face == nil {
								return nil, nil
							}
							return face.VpcId, nil
						}
						return nil, fmt.Errorf("field vpc_id not resolved")
					},
				},
			}
		}),
	})
	GraphQLStackType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaStack",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Stack)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(StackGetter)
						if ok {
							face := inter.GetStack()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Stack)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(StackGetter)
						if ok {
							face := inter.GetStack()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"user_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Stack)
						if ok {
							return obj.UserId, nil
						}
						inter, ok := p.Source.(StackGetter)
						if ok {
							face := inter.GetStack()
							if face == nil {
								return nil, nil
							}
							return face.UserId, nil
						}
						return nil, fmt.Errorf("field user_id not resolved")
					},
				},
				"vpc_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Stack)
						if ok {
							return obj.VpcId, nil
						}
						inter, ok := p.Source.(StackGetter)
						if ok {
							face := inter.GetStack()
							if face == nil {
								return nil, nil
							}
							return face.VpcId, nil
						}
						return nil, fmt.Errorf("field vpc_id not resolved")
					},
				},
				"state": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Stack)
						if ok {
							return obj.State, nil
						}
						inter, ok := p.Source.(StackGetter)
						if ok {
							face := inter.GetStack()
							if face == nil {
								return nil, nil
							}
							return face.State, nil
						}
						return nil, fmt.Errorf("field state not resolved")
					},
				},
				"password": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Stack)
						if ok {
							return obj.Password, nil
						}
						inter, ok := p.Source.(StackGetter)
						if ok {
							face := inter.GetStack()
							if face == nil {
								return nil, nil
							}
							return face.Password, nil
						}
						return nil, fmt.Errorf("field password not resolved")
					},
				},
				"password_hash": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Stack)
						if ok {
							return obj.PasswordHash, nil
						}
						inter, ok := p.Source.(StackGetter)
						if ok {
							face := inter.GetStack()
							if face == nil {
								return nil, nil
							}
							return face.PasswordHash, nil
						}
						return nil, fmt.Errorf("field password_hash not resolved")
					},
				},
				"created_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Stack)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(StackGetter)
						if ok {
							face := inter.GetStack()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field created_at not resolved")
					},
				},
				"updated_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Stack)
						if ok {
							if obj.UpdatedAt == nil {
								return nil, nil
							}
							return obj.GetUpdatedAt(), nil
						}
						inter, ok := p.Source.(StackGetter)
						if ok {
							face := inter.GetStack()
							if face == nil {
								return nil, nil
							}
							if face.UpdatedAt == nil {
								return nil, nil
							}
							return face.GetUpdatedAt(), nil
						}
						return nil, fmt.Errorf("field updated_at not resolved")
					},
				},
			}
		}),
	})
}
func (m *BastionState) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BastionState) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintStack(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.CustomerId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintStack(data, i, uint64(len(m.CustomerId)))
		i += copy(data[i:], m.CustomerId)
	}
	if len(m.Status) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintStack(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if m.LastSeen != nil {
		data[i] = 0x22
		i++
		i = encodeVarintStack(data, i, uint64(m.LastSeen.Size()))
		n1, err := m.LastSeen.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Region) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintStack(data, i, uint64(len(m.Region)))
		i += copy(data[i:], m.Region)
	}
	if len(m.VpcId) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintStack(data, i, uint64(len(m.VpcId)))
		i += copy(data[i:], m.VpcId)
	}
	return i, nil
}

func (m *Stack) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Stack) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintStack(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.CustomerId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintStack(data, i, uint64(len(m.CustomerId)))
		i += copy(data[i:], m.CustomerId)
	}
	if m.UserId != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintStack(data, i, uint64(m.UserId))
	}
	if len(m.VpcId) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintStack(data, i, uint64(len(m.VpcId)))
		i += copy(data[i:], m.VpcId)
	}
	if len(m.State) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintStack(data, i, uint64(len(m.State)))
		i += copy(data[i:], m.State)
	}
	if len(m.Password) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintStack(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if len(m.PasswordHash) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintStack(data, i, uint64(len(m.PasswordHash)))
		i += copy(data[i:], m.PasswordHash)
	}
	if m.CreatedAt != nil {
		data[i] = 0x42
		i++
		i = encodeVarintStack(data, i, uint64(m.CreatedAt.Size()))
		n2, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.UpdatedAt != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintStack(data, i, uint64(m.UpdatedAt.Size()))
		n3, err := m.UpdatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64Stack(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Stack(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintStack(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedBastionState(r randyStack, easy bool) *BastionState {
	this := &BastionState{}
	this.Id = randStringStack(r)
	this.CustomerId = randStringStack(r)
	this.Status = randStringStack(r)
	if r.Intn(10) != 0 {
		this.LastSeen = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	this.Region = randStringStack(r)
	this.VpcId = randStringStack(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStack(r randyStack, easy bool) *Stack {
	this := &Stack{}
	this.Id = randStringStack(r)
	this.CustomerId = randStringStack(r)
	this.UserId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.VpcId = randStringStack(r)
	this.State = randStringStack(r)
	this.Password = randStringStack(r)
	this.PasswordHash = randStringStack(r)
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UpdatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyStack interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneStack(r randyStack) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringStack(r randyStack) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneStack(r)
	}
	return string(tmps)
}
func randUnrecognizedStack(r randyStack, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldStack(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldStack(data []byte, r randyStack, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateStack(data, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		data = encodeVarintPopulateStack(data, uint64(v2))
	case 1:
		data = encodeVarintPopulateStack(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateStack(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateStack(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateStack(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateStack(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *BastionState) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	if m.LastSeen != nil {
		l = m.LastSeen.Size()
		n += 1 + l + sovStack(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	return n
}

func (m *Stack) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovStack(uint64(m.UserId))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovStack(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovStack(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovStack(uint64(l))
	}
	return n
}

func sovStack(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStack(x uint64) (n int) {
	return sovStack(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BastionState) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BastionState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BastionState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSeen == nil {
				m.LastSeen = &opsee_types.Timestamp{}
			}
			if err := m.LastSeen.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStack(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stack) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStack
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &opsee_types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStack(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStack(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStack
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStack
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStack
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStack(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStack = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStack   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorStack = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x52, 0xbd, 0x8e, 0xd3, 0x40,
	0x10, 0x96, 0xef, 0xce, 0xbe, 0x78, 0x1d, 0xee, 0x4e, 0xcb, 0x71, 0xb2, 0x0e, 0xe9, 0x02, 0x2b,
	0x84, 0xa0, 0x38, 0x07, 0x81, 0x68, 0x52, 0x11, 0x37, 0x10, 0x4a, 0x87, 0x8a, 0xc6, 0xf2, 0xcf,
	0x62, 0x5b, 0xe0, 0xac, 0xe5, 0x5d, 0x83, 0x78, 0x1d, 0x2a, 0x1e, 0x80, 0x82, 0x92, 0x92, 0x92,
	0x27, 0x88, 0x00, 0x89, 0x86, 0x92, 0x8a, 0x92, 0xd9, 0x1f, 0x3b, 0xa1, 0x41, 0x29, 0x28, 0x56,
	0x9a, 0x6f, 0x67, 0xbe, 0x9f, 0xf1, 0x1a, 0x79, 0x5c, 0x24, 0xd9, 0xcb, 0xa0, 0x69, 0x99, 0x60,
	0xd8, 0x66, 0x0d, 0xa7, 0xf4, 0xfc, 0xb2, 0xa8, 0x44, 0xd9, 0xa5, 0x41, 0xc6, 0xea, 0x69, 0xc1,
	0x0a, 0x36, 0x55, 0xdd, 0xb4, 0x7b, 0xa1, 0x90, 0x02, 0xaa, 0xd2, 0xac, 0xf3, 0x7b, 0x5b, 0xe3,
	0x4a, 0x60, 0x33, 0xaf, 0xa0, 0x26, 0xa8, 0xd2, 0x30, 0x66, 0x3b, 0x31, 0xc4, 0xdb, 0x86, 0xf2,
	0xa9, 0xa8, 0x6a, 0x0a, 0x19, 0xeb, 0x46, 0x73, 0xc9, 0x0f, 0x0b, 0x8d, 0xc3, 0x84, 0x8b, 0x8a,
	0xad, 0x96, 0x22, 0x11, 0x14, 0x1f, 0xa1, 0xbd, 0x2a, 0xf7, 0xad, 0x1b, 0xd6, 0x1d, 0x37, 0x82,
	0x0a, 0x3f, 0x44, 0x5e, 0xd6, 0x71, 0xc1, 0x6a, 0xda, 0xc6, 0xd0, 0xd8, 0x93, 0x8d, 0xf0, 0xf4,
	0xd7, 0x7a, 0x72, 0x92, 0xa7, 0x33, 0xb2, 0xd5, 0x22, 0x11, 0xea, 0xd1, 0x22, 0xc7, 0x67, 0xc8,
	0x01, 0x1b, 0xd1, 0x71, 0x7f, 0x5f, 0x49, 0x19, 0x84, 0x1f, 0x23, 0xf7, 0x15, 0xd8, 0xc5, 0x10,
	0x6b, 0xe5, 0x1f, 0x40, 0xcb, 0xbb, 0x7f, 0x16, 0xe8, 0x65, 0x54, 0xc0, 0xe0, 0x59, 0x1f, 0x30,
	0xc4, 0x60, 0x72, 0x24, 0x4d, 0x06, 0x02, 0x89, 0x46, 0xb2, 0x5e, 0x42, 0x29, 0x0d, 0x5a, 0x5a,
	0x40, 0x6c, 0xdf, 0xd6, 0x06, 0x1a, 0xe1, 0x6b, 0xc8, 0x79, 0xdd, 0x64, 0x32, 0xaa, 0xa3, 0xee,
	0x6d, 0x40, 0x8b, 0x9c, 0x7c, 0xd8, 0x47, 0xf6, 0x52, 0xbe, 0xcd, 0xff, 0x5a, 0xf0, 0x2e, 0x3a,
	0xec, 0xb8, 0xa6, 0xc8, 0x0d, 0xed, 0xf0, 0x04, 0x28, 0x63, 0x49, 0x31, 0xd7, 0x24, 0x72, 0x64,
	0x05, 0xa3, 0xb7, 0x87, 0x48, 0x07, 0x4a, 0xfc, 0x18, 0x26, 0x3d, 0x39, 0xa9, 0x6f, 0x89, 0xc9,
	0x88, 0x4f, 0x91, 0x2d, 0xbf, 0x12, 0x35, 0x1b, 0x69, 0x80, 0x6f, 0xa2, 0x51, 0x93, 0x70, 0xfe,
	0x86, 0xb5, 0x66, 0xa5, 0xd0, 0xfe, 0xb9, 0x9e, 0x58, 0x97, 0xd1, 0x70, 0x8d, 0x1f, 0xa1, 0x2b,
	0x7d, 0x1d, 0x97, 0x09, 0x2f, 0xfd, 0x43, 0x35, 0x77, 0x5d, 0xcd, 0x81, 0x19, 0x96, 0x66, 0x7f,
	0x4d, 0x90, 0x68, 0xdc, 0xe3, 0x27, 0x00, 0xf1, 0x53, 0x84, 0xb2, 0x96, 0x82, 0x5d, 0x1e, 0x27,
	0xc2, 0x1f, 0xfd, 0xf3, 0x5d, 0xae, 0x82, 0xe2, 0xb1, 0xfa, 0x36, 0x03, 0x83, 0x44, 0xae, 0x01,
	0x73, 0x21, 0xb5, 0xba, 0x26, 0xef, 0xb5, 0xdc, 0xdd, 0xb4, 0x36, 0x0c, 0xd0, 0x32, 0x60, 0x2e,
	0xc2, 0x5b, 0xbf, 0xbf, 0x5d, 0x58, 0xef, 0xbf, 0x5f, 0x58, 0x1f, 0xe1, 0x7c, 0x86, 0xf3, 0x05,
	0xce, 0x57, 0x38, 0x9f, 0xde, 0x4d, 0xac, 0xe7, 0x0e, 0xcf, 0x4a, 0x5a, 0x27, 0xa9, 0xa3, 0xfe,
	0xe5, 0x07, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x77, 0xa4, 0xa3, 0xa1, 0x7e, 0x03, 0x00, 0x00,
}
