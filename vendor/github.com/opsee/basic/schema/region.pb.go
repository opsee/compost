// Code generated by protoc-gen-gogo.
// source: region.proto
// DO NOT EDIT!

package schema

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import _ "github.com/opsee/protobuf/opseeproto/types"
import _ "github.com/opsee/basic/schema/aws/autoscaling"
import opsee_aws_ec2 "github.com/opsee/basic/schema/aws/ec2"
import _ "github.com/opsee/basic/schema/aws/elb"
import _ "github.com/opsee/basic/schema/aws/rds"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// An Opsee region object representing an AWS region.
type Region struct {
	// The region identifier, e.g. us-west-1.
	Region     string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// The region's supported platforms [EC2-VPC, Classic].
	SupportedPlatforms []string `protobuf:"bytes,3,rep,name=supported_platforms,json=supportedPlatforms" json:"supported_platforms,omitempty"`
	// The region's VPCs.
	Vpcs []*Vpc `protobuf:"bytes,4,rep,name=vpcs" json:"vpcs,omitempty"`
	// The region's subnets.
	Subnets []*Subnet `protobuf:"bytes,5,rep,name=subnets" json:"subnets,omitempty"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (m *Region) String() string            { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{0} }

func (m *Region) GetVpcs() []*Vpc {
	if m != nil {
		return m.Vpcs
	}
	return nil
}

func (m *Region) GetSubnets() []*Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

// An Opsee VPC object representing an AWS VPC resource.
type Vpc struct {
	// The VPC identifier.
	VpcId string               `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	State string               `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Tags  []*opsee_aws_ec2.Tag `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	// The last seen number of instances in the VPC. This value is cached, so it may not be consistent.
	InstanceCount int32  `protobuf:"varint,4,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
	IsDefault     bool   `protobuf:"varint,5,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	CidrBlock     string `protobuf:"bytes,6,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidr_block,omitempty"`
}

func (m *Vpc) Reset()                    { *m = Vpc{} }
func (m *Vpc) String() string            { return proto.CompactTextString(m) }
func (*Vpc) ProtoMessage()               {}
func (*Vpc) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{1} }

func (m *Vpc) GetTags() []*opsee_aws_ec2.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

// An Opsee subnet object representing an AWS Subnet resource.
type Subnet struct {
	AvailabilityZone        string               `protobuf:"bytes,1,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	AvailableIpAddressCount int64                `protobuf:"varint,2,opt,name=available_ip_address_count,json=availableIpAddressCount,proto3" json:"available_ip_address_count,omitempty"`
	CidrBlock               string               `protobuf:"bytes,3,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidr_block,omitempty"`
	DefaultForAz            bool                 `protobuf:"varint,4,opt,name=default_for_az,json=defaultForAz,proto3" json:"default_for_az,omitempty"`
	MapPublicIpOnLaunch     bool                 `protobuf:"varint,5,opt,name=map_public_ip_on_launch,json=mapPublicIpOnLaunch,proto3" json:"map_public_ip_on_launch,omitempty"`
	State                   string               `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	SubnetId                string               `protobuf:"bytes,7,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	VpcId                   string               `protobuf:"bytes,8,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Tags                    []*opsee_aws_ec2.Tag `protobuf:"bytes,9,rep,name=tags" json:"tags,omitempty"`
	InstanceCount           int32                `protobuf:"varint,10,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
	Routing                 string               `protobuf:"bytes,11,opt,name=routing,proto3" json:"routing,omitempty"`
}

func (m *Subnet) Reset()                    { *m = Subnet{} }
func (m *Subnet) String() string            { return proto.CompactTextString(m) }
func (*Subnet) ProtoMessage()               {}
func (*Subnet) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{2} }

func (m *Subnet) GetTags() []*opsee_aws_ec2.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Region)(nil), "opsee.Region")
	proto.RegisterType((*Vpc)(nil), "opsee.Vpc")
	proto.RegisterType((*Subnet)(nil), "opsee.Subnet")
}
func (this *Region) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Region)
	if !ok {
		that2, ok := that.(Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if len(this.SupportedPlatforms) != len(that1.SupportedPlatforms) {
		return false
	}
	for i := range this.SupportedPlatforms {
		if this.SupportedPlatforms[i] != that1.SupportedPlatforms[i] {
			return false
		}
	}
	if len(this.Vpcs) != len(that1.Vpcs) {
		return false
	}
	for i := range this.Vpcs {
		if !this.Vpcs[i].Equal(that1.Vpcs[i]) {
			return false
		}
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if !this.Subnets[i].Equal(that1.Subnets[i]) {
			return false
		}
	}
	return true
}
func (this *Vpc) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Vpc)
	if !ok {
		that2, ok := that.(Vpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if this.InstanceCount != that1.InstanceCount {
		return false
	}
	if this.IsDefault != that1.IsDefault {
		return false
	}
	if this.CidrBlock != that1.CidrBlock {
		return false
	}
	return true
}
func (this *Subnet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Subnet)
	if !ok {
		that2, ok := that.(Subnet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AvailabilityZone != that1.AvailabilityZone {
		return false
	}
	if this.AvailableIpAddressCount != that1.AvailableIpAddressCount {
		return false
	}
	if this.CidrBlock != that1.CidrBlock {
		return false
	}
	if this.DefaultForAz != that1.DefaultForAz {
		return false
	}
	if this.MapPublicIpOnLaunch != that1.MapPublicIpOnLaunch {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.SubnetId != that1.SubnetId {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if this.InstanceCount != that1.InstanceCount {
		return false
	}
	if this.Routing != that1.Routing {
		return false
	}
	return true
}

type RegionGetter interface {
	GetRegion() *Region
}

var GraphQLRegionType *github_com_graphql_go_graphql.Object

type VpcGetter interface {
	GetVpc() *Vpc
}

var GraphQLVpcType *github_com_graphql_go_graphql.Object

type SubnetGetter interface {
	GetSubnet() *Subnet
}

var GraphQLSubnetType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLRegionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaRegion",
		Description: "An Opsee region object representing an AWS region.",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"region": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "The region identifier, e.g. us-west-1.",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Region)
						if ok {
							return obj.Region, nil
						}
						inter, ok := p.Source.(RegionGetter)
						if ok {
							face := inter.GetRegion()
							if face == nil {
								return nil, nil
							}
							return face.Region, nil
						}
						return nil, fmt.Errorf("field region not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Region)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(RegionGetter)
						if ok {
							face := inter.GetRegion()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"supported_platforms": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "The region's supported platforms [EC2-VPC, Classic].",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Region)
						if ok {
							return obj.SupportedPlatforms, nil
						}
						inter, ok := p.Source.(RegionGetter)
						if ok {
							face := inter.GetRegion()
							if face == nil {
								return nil, nil
							}
							return face.SupportedPlatforms, nil
						}
						return nil, fmt.Errorf("field supported_platforms not resolved")
					},
				},
				"vpcs": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLVpcType),
					Description: "The region's VPCs.",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Region)
						if ok {
							return obj.Vpcs, nil
						}
						inter, ok := p.Source.(RegionGetter)
						if ok {
							face := inter.GetRegion()
							if face == nil {
								return nil, nil
							}
							return face.Vpcs, nil
						}
						return nil, fmt.Errorf("field vpcs not resolved")
					},
				},
				"subnets": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLSubnetType),
					Description: "The region's subnets.",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Region)
						if ok {
							return obj.Subnets, nil
						}
						inter, ok := p.Source.(RegionGetter)
						if ok {
							face := inter.GetRegion()
							if face == nil {
								return nil, nil
							}
							return face.Subnets, nil
						}
						return nil, fmt.Errorf("field subnets not resolved")
					},
				},
			}
		}),
	})
	GraphQLVpcType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaVpc",
		Description: "An Opsee VPC object representing an AWS VPC resource.",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"vpc_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "The VPC identifier.",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							return obj.VpcId, nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							return face.VpcId, nil
						}
						return nil, fmt.Errorf("field vpc_id not resolved")
					},
				},
				"state": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							return obj.State, nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							return face.State, nil
						}
						return nil, fmt.Errorf("field state not resolved")
					},
				},
				"tags": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee_aws_ec2.GraphQLTagType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							return obj.Tags, nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							return face.Tags, nil
						}
						return nil, fmt.Errorf("field tags not resolved")
					},
				},
				"instance_count": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "The last seen number of instances in the VPC. This value is cached, so it may not be consistent.",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							return obj.InstanceCount, nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							return face.InstanceCount, nil
						}
						return nil, fmt.Errorf("field instance_count not resolved")
					},
				},
				"is_default": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							return obj.IsDefault, nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							return face.IsDefault, nil
						}
						return nil, fmt.Errorf("field is_default not resolved")
					},
				},
				"cidr_block": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Vpc)
						if ok {
							return obj.CidrBlock, nil
						}
						inter, ok := p.Source.(VpcGetter)
						if ok {
							face := inter.GetVpc()
							if face == nil {
								return nil, nil
							}
							return face.CidrBlock, nil
						}
						return nil, fmt.Errorf("field cidr_block not resolved")
					},
				},
			}
		}),
	})
	GraphQLSubnetType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaSubnet",
		Description: "An Opsee subnet object representing an AWS Subnet resource.",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"availability_zone": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.AvailabilityZone, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.AvailabilityZone, nil
						}
						return nil, fmt.Errorf("field availability_zone not resolved")
					},
				},
				"available_ip_address_count": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.AvailableIpAddressCount, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.AvailableIpAddressCount, nil
						}
						return nil, fmt.Errorf("field available_ip_address_count not resolved")
					},
				},
				"cidr_block": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.CidrBlock, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.CidrBlock, nil
						}
						return nil, fmt.Errorf("field cidr_block not resolved")
					},
				},
				"default_for_az": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.DefaultForAz, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.DefaultForAz, nil
						}
						return nil, fmt.Errorf("field default_for_az not resolved")
					},
				},
				"map_public_ip_on_launch": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.MapPublicIpOnLaunch, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.MapPublicIpOnLaunch, nil
						}
						return nil, fmt.Errorf("field map_public_ip_on_launch not resolved")
					},
				},
				"state": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.State, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.State, nil
						}
						return nil, fmt.Errorf("field state not resolved")
					},
				},
				"subnet_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.SubnetId, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.SubnetId, nil
						}
						return nil, fmt.Errorf("field subnet_id not resolved")
					},
				},
				"vpc_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.VpcId, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.VpcId, nil
						}
						return nil, fmt.Errorf("field vpc_id not resolved")
					},
				},
				"tags": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee_aws_ec2.GraphQLTagType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.Tags, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.Tags, nil
						}
						return nil, fmt.Errorf("field tags not resolved")
					},
				},
				"instance_count": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.InstanceCount, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.InstanceCount, nil
						}
						return nil, fmt.Errorf("field instance_count not resolved")
					},
				},
				"routing": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Subnet)
						if ok {
							return obj.Routing, nil
						}
						inter, ok := p.Source.(SubnetGetter)
						if ok {
							face := inter.GetSubnet()
							if face == nil {
								return nil, nil
							}
							return face.Routing, nil
						}
						return nil, fmt.Errorf("field routing not resolved")
					},
				},
			}
		}),
	})
}
func (m *Region) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Region) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.Region)))
		i += copy(data[i:], m.Region)
	}
	if len(m.CustomerId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.CustomerId)))
		i += copy(data[i:], m.CustomerId)
	}
	if len(m.SupportedPlatforms) > 0 {
		for _, s := range m.SupportedPlatforms {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Vpcs) > 0 {
		for _, msg := range m.Vpcs {
			data[i] = 0x22
			i++
			i = encodeVarintRegion(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Subnets) > 0 {
		for _, msg := range m.Subnets {
			data[i] = 0x2a
			i++
			i = encodeVarintRegion(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Vpc) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Vpc) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VpcId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.VpcId)))
		i += copy(data[i:], m.VpcId)
	}
	if len(m.State) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.State)))
		i += copy(data[i:], m.State)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x1a
			i++
			i = encodeVarintRegion(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.InstanceCount != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintRegion(data, i, uint64(m.InstanceCount))
	}
	if m.IsDefault {
		data[i] = 0x28
		i++
		if m.IsDefault {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.CidrBlock) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.CidrBlock)))
		i += copy(data[i:], m.CidrBlock)
	}
	return i, nil
}

func (m *Subnet) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Subnet) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AvailabilityZone) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.AvailabilityZone)))
		i += copy(data[i:], m.AvailabilityZone)
	}
	if m.AvailableIpAddressCount != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintRegion(data, i, uint64(m.AvailableIpAddressCount))
	}
	if len(m.CidrBlock) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.CidrBlock)))
		i += copy(data[i:], m.CidrBlock)
	}
	if m.DefaultForAz {
		data[i] = 0x20
		i++
		if m.DefaultForAz {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.MapPublicIpOnLaunch {
		data[i] = 0x28
		i++
		if m.MapPublicIpOnLaunch {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.State) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.State)))
		i += copy(data[i:], m.State)
	}
	if len(m.SubnetId) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.SubnetId)))
		i += copy(data[i:], m.SubnetId)
	}
	if len(m.VpcId) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.VpcId)))
		i += copy(data[i:], m.VpcId)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x4a
			i++
			i = encodeVarintRegion(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.InstanceCount != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintRegion(data, i, uint64(m.InstanceCount))
	}
	if len(m.Routing) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintRegion(data, i, uint64(len(m.Routing)))
		i += copy(data[i:], m.Routing)
	}
	return i, nil
}

func encodeFixed64Region(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Region(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRegion(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRegion(r randyRegion, easy bool) *Region {
	this := &Region{}
	this.Region = randStringRegion(r)
	this.CustomerId = randStringRegion(r)
	v1 := r.Intn(10)
	this.SupportedPlatforms = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.SupportedPlatforms[i] = randStringRegion(r)
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Vpcs = make([]*Vpc, v2)
		for i := 0; i < v2; i++ {
			this.Vpcs[i] = NewPopulatedVpc(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Subnets = make([]*Subnet, v3)
		for i := 0; i < v3; i++ {
			this.Subnets[i] = NewPopulatedSubnet(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVpc(r randyRegion, easy bool) *Vpc {
	this := &Vpc{}
	this.VpcId = randStringRegion(r)
	this.State = randStringRegion(r)
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Tags = make([]*opsee_aws_ec2.Tag, v4)
		for i := 0; i < v4; i++ {
			this.Tags[i] = opsee_aws_ec2.NewPopulatedTag(r, easy)
		}
	}
	this.InstanceCount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.InstanceCount *= -1
	}
	this.IsDefault = bool(bool(r.Intn(2) == 0))
	this.CidrBlock = randStringRegion(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubnet(r randyRegion, easy bool) *Subnet {
	this := &Subnet{}
	this.AvailabilityZone = randStringRegion(r)
	this.AvailableIpAddressCount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AvailableIpAddressCount *= -1
	}
	this.CidrBlock = randStringRegion(r)
	this.DefaultForAz = bool(bool(r.Intn(2) == 0))
	this.MapPublicIpOnLaunch = bool(bool(r.Intn(2) == 0))
	this.State = randStringRegion(r)
	this.SubnetId = randStringRegion(r)
	this.VpcId = randStringRegion(r)
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Tags = make([]*opsee_aws_ec2.Tag, v5)
		for i := 0; i < v5; i++ {
			this.Tags[i] = opsee_aws_ec2.NewPopulatedTag(r, easy)
		}
	}
	this.InstanceCount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.InstanceCount *= -1
	}
	this.Routing = randStringRegion(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRegion interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRegion(r randyRegion) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRegion(r randyRegion) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneRegion(r)
	}
	return string(tmps)
}
func randUnrecognizedRegion(r randyRegion, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldRegion(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldRegion(data []byte, r randyRegion, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateRegion(data, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		data = encodeVarintPopulateRegion(data, uint64(v7))
	case 1:
		data = encodeVarintPopulateRegion(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateRegion(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateRegion(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateRegion(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateRegion(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Region) Size() (n int) {
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if len(m.SupportedPlatforms) > 0 {
		for _, s := range m.SupportedPlatforms {
			l = len(s)
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	if len(m.Vpcs) > 0 {
		for _, e := range m.Vpcs {
			l = e.Size()
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	if len(m.Subnets) > 0 {
		for _, e := range m.Subnets {
			l = e.Size()
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	return n
}

func (m *Vpc) Size() (n int) {
	var l int
	_ = l
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	if m.InstanceCount != 0 {
		n += 1 + sovRegion(uint64(m.InstanceCount))
	}
	if m.IsDefault {
		n += 2
	}
	l = len(m.CidrBlock)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *Subnet) Size() (n int) {
	var l int
	_ = l
	l = len(m.AvailabilityZone)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.AvailableIpAddressCount != 0 {
		n += 1 + sovRegion(uint64(m.AvailableIpAddressCount))
	}
	l = len(m.CidrBlock)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.DefaultForAz {
		n += 2
	}
	if m.MapPublicIpOnLaunch {
		n += 2
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	if m.InstanceCount != 0 {
		n += 1 + sovRegion(uint64(m.InstanceCount))
	}
	l = len(m.Routing)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func sovRegion(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRegion(x uint64) (n int) {
	return sovRegion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Region) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedPlatforms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedPlatforms = append(m.SupportedPlatforms, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vpcs = append(m.Vpcs, &Vpc{})
			if err := m.Vpcs[len(m.Vpcs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, &Subnet{})
			if err := m.Subnets[len(m.Subnets)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vpc) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vpc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vpc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &opsee_aws_ec2.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceCount", wireType)
			}
			m.InstanceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.InstanceCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidrBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CidrBlock = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subnet) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subnet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subnet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZone = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableIpAddressCount", wireType)
			}
			m.AvailableIpAddressCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AvailableIpAddressCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidrBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CidrBlock = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultForAz", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultForAz = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapPublicIpOnLaunch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MapPublicIpOnLaunch = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &opsee_aws_ec2.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceCount", wireType)
			}
			m.InstanceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.InstanceCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routing = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegion(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRegion
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegion(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegion = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegion   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorRegion = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6b, 0xd5, 0x4c,
	0x14, 0x25, 0xdf, 0xeb, 0x4b, 0xdf, 0xbb, 0xaf, 0x2d, 0x9f, 0x53, 0xb5, 0xa1, 0x62, 0x5b, 0x4a,
	0xd5, 0x82, 0xf8, 0xa2, 0xd5, 0x8d, 0xba, 0x6a, 0x15, 0xa1, 0x20, 0x58, 0xa2, 0xb8, 0xe8, 0x66,
	0x98, 0x4c, 0xa6, 0xe9, 0x60, 0x92, 0x19, 0x32, 0x93, 0x4a, 0xfb, 0x6b, 0xc4, 0x95, 0x3f, 0x41,
	0x70, 0xa1, 0x4b, 0x97, 0xfe, 0x04, 0xf5, 0x57, 0xb8, 0x74, 0x32, 0x33, 0x69, 0x83, 0x0a, 0xda,
	0xc5, 0x85, 0xdc, 0x73, 0xee, 0x99, 0x9c, 0x3b, 0x87, 0x81, 0xb9, 0x9a, 0xe5, 0x5c, 0x54, 0x53,
	0x59, 0x0b, 0x2d, 0xd0, 0x50, 0x48, 0xc5, 0xd8, 0xf2, 0xad, 0x9c, 0xeb, 0xc3, 0x26, 0x9d, 0x52,
	0x51, 0xc6, 0xb9, 0xc8, 0x45, 0x6c, 0xd9, 0xb4, 0x39, 0xb0, 0x9d, 0x6d, 0xec, 0x97, 0x53, 0x2d,
	0xdf, 0xee, 0x8d, 0xdb, 0x03, 0xce, 0xe6, 0x6d, 0xeb, 0x04, 0xf6, 0xd3, 0x2b, 0x1e, 0xfc, 0x93,
	0x42, 0x1f, 0x4b, 0xa6, 0x62, 0xcd, 0x4b, 0xa6, 0x34, 0x29, 0xa5, 0xd7, 0xde, 0xff, 0x4d, 0x9b,
	0x12, 0xc5, 0x69, 0xac, 0xe8, 0x21, 0x2b, 0x49, 0x4c, 0x5e, 0xab, 0x98, 0x34, 0x5a, 0x28, 0x4a,
	0x0a, 0x5e, 0xe5, 0xee, 0x10, 0x2f, 0xbd, 0xf3, 0x77, 0x29, 0xa3, 0x5b, 0xe7, 0x96, 0x14, 0xe9,
	0x79, 0x25, 0x75, 0xa6, 0xfa, 0x92, 0xf5, 0x0f, 0x01, 0x84, 0x89, 0x0d, 0x02, 0x5d, 0x86, 0xd0,
	0x45, 0x12, 0x05, 0x6b, 0xc1, 0xe6, 0x38, 0xf1, 0x1d, 0x5a, 0x85, 0x09, 0x6d, 0x94, 0x16, 0x25,
	0xab, 0x31, 0xcf, 0xa2, 0xff, 0x2c, 0x09, 0x1d, 0xb4, 0x9b, 0xa1, 0x18, 0x16, 0x55, 0x23, 0xa5,
	0xa8, 0x35, 0xcb, 0xb0, 0x2c, 0x88, 0x3e, 0x10, 0x75, 0xa9, 0xa2, 0xc1, 0xda, 0xc0, 0x0c, 0xa2,
	0x53, 0x6a, 0xaf, 0x63, 0xd0, 0x0a, 0xcc, 0x1c, 0x49, 0xaa, 0xa2, 0x19, 0x33, 0x31, 0xd9, 0x82,
	0xa9, 0x0b, 0xe8, 0xa5, 0xa4, 0x89, 0xc5, 0xd1, 0x0d, 0x98, 0x55, 0x4d, 0x5a, 0x31, 0xad, 0xa2,
	0xa1, 0x1d, 0x99, 0xf7, 0x23, 0xcf, 0x2d, 0x9a, 0x74, 0xec, 0xfa, 0xc7, 0x00, 0x06, 0x46, 0x86,
	0x2e, 0x41, 0x68, 0x84, 0xad, 0x3b, 0x67, 0x7d, 0x68, 0x3a, 0x63, 0xec, 0x22, 0x0c, 0x4d, 0x7e,
	0x9a, 0x79, 0xcf, 0xae, 0x41, 0xd7, 0x61, 0x46, 0x93, 0xdc, 0xf9, 0x9b, 0x6c, 0x21, 0x7f, 0xb4,
	0xb9, 0x9c, 0xa9, 0x89, 0x60, 0xfa, 0x82, 0xe4, 0x89, 0xe5, 0xd1, 0x35, 0x58, 0xe0, 0x95, 0x91,
	0x54, 0x94, 0x61, 0x2a, 0x9a, 0x4a, 0x1b, 0xbf, 0xc1, 0xe6, 0x30, 0x99, 0xef, 0xd0, 0x47, 0x2d,
	0x88, 0xae, 0x02, 0x70, 0x85, 0x33, 0x76, 0x40, 0x9a, 0x42, 0x1b, 0xbf, 0xc1, 0xe6, 0x28, 0x19,
	0x73, 0xf5, 0xd8, 0x01, 0x2d, 0x4d, 0x79, 0x56, 0xe3, 0xb4, 0x10, 0xf4, 0x55, 0x14, 0x5a, 0x23,
	0xe3, 0x16, 0xd9, 0x69, 0x81, 0xf5, 0x37, 0x03, 0x08, 0xdd, 0x56, 0xe8, 0x26, 0x5c, 0x20, 0x47,
	0x84, 0x17, 0x24, 0xe5, 0x05, 0xd7, 0xc7, 0xf8, 0x44, 0x54, 0xcc, 0xef, 0xf3, 0x7f, 0x9f, 0xd8,
	0x37, 0x38, 0x7a, 0x08, 0xcb, 0x1e, 0x2b, 0x18, 0xe6, 0x12, 0x93, 0x2c, 0xab, 0x99, 0x52, 0xde,
	0x68, 0xbb, 0xef, 0x20, 0x59, 0x3a, 0x9d, 0xd8, 0x95, 0xdb, 0x8e, 0x3f, 0xb5, 0xdc, 0xf3, 0x34,
	0xf8, 0xc5, 0x13, 0xda, 0x80, 0x05, 0xbf, 0x0e, 0x36, 0x79, 0x61, 0x72, 0x62, 0x17, 0x1f, 0x25,
	0x73, 0x1e, 0x7d, 0x22, 0xea, 0xed, 0x13, 0x74, 0x0f, 0x96, 0x4a, 0x22, 0xb1, 0x6c, 0xd2, 0x82,
	0xd3, 0xd6, 0x82, 0xa8, 0x70, 0x41, 0x9a, 0x8a, 0x1e, 0xfa, 0x4b, 0x58, 0x34, 0xf4, 0x9e, 0x65,
	0x77, 0xe5, 0xb3, 0xea, 0xa9, 0xa5, 0xce, 0x22, 0x09, 0xfb, 0x91, 0x5c, 0x81, 0xb1, 0x8b, 0xb4,
	0x8d, 0x70, 0xd6, 0x32, 0x23, 0x07, 0x98, 0x14, 0xcf, 0xc2, 0x1d, 0xf5, 0xc3, 0xed, 0x62, 0x1c,
	0x9f, 0x3b, 0x46, 0xf8, 0x53, 0x8c, 0x11, 0xcc, 0xd6, 0xa2, 0xd1, 0xe6, 0xe1, 0x46, 0x13, 0xfb,
	0x9b, 0xae, 0xdd, 0xd9, 0xf8, 0xf1, 0x6d, 0x25, 0x78, 0xf7, 0x7d, 0x25, 0x78, 0x6f, 0xea, 0xb3,
	0xa9, 0x2f, 0xa6, 0xbe, 0x9a, 0xfa, 0xf4, 0x76, 0x35, 0xd8, 0x0f, 0xdd, 0xe3, 0x4a, 0x43, 0xfb,
	0x9e, 0xee, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x60, 0x09, 0xcd, 0xde, 0xd7, 0x04, 0x00, 0x00,
}
