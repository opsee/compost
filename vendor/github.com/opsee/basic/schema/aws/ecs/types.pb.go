// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
	Package ecs is a generated protocol buffer package.

	It is generated from these files:
		types.proto

	It has these top-level messages:
		Attribute
		Container
		ContainerInstance
		ContainerOverride
		Deployment
		DeploymentConfiguration
		DescribeContainerInstancesInput
		DescribeContainerInstancesOutput
		DescribeServicesInput
		DescribeServicesOutput
		DescribeTasksInput
		DescribeTasksOutput
		Failure
		KeyValuePair
		ListClustersInput
		ListClustersOutput
		ListContainerInstancesInput
		ListContainerInstancesOutput
		ListServicesInput
		ListServicesOutput
		ListTasksInput
		ListTasksOutput
		LoadBalancer
		NetworkBinding
		Resource
		Service
		ServiceEvent
		Task
		TaskOverride
		VersionInfo
*/
package ecs

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Attribute struct {
	Name             *string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Value            *string `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *Attribute) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Attribute) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Container struct {
	ContainerArn     *string           `protobuf:"bytes,2,opt,name=ContainerArn,json=containerArn" json:"ContainerArn,omitempty"`
	ExitCode         *int64            `protobuf:"zigzag64,3,opt,name=ExitCode,json=exitCode" json:"ExitCode,omitempty"`
	LastStatus       *string           `protobuf:"bytes,4,opt,name=LastStatus,json=lastStatus" json:"LastStatus,omitempty"`
	Name             *string           `protobuf:"bytes,5,opt,name=Name,json=name" json:"Name,omitempty"`
	NetworkBindings  []*NetworkBinding `protobuf:"bytes,6,rep,name=NetworkBindings,json=networkBindings" json:"NetworkBindings,omitempty"`
	Reason           *string           `protobuf:"bytes,7,opt,name=Reason,json=reason" json:"Reason,omitempty"`
	TaskArn          *string           `protobuf:"bytes,8,opt,name=TaskArn,json=taskArn" json:"TaskArn,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *Container) GetContainerArn() string {
	if m != nil && m.ContainerArn != nil {
		return *m.ContainerArn
	}
	return ""
}

func (m *Container) GetExitCode() int64 {
	if m != nil && m.ExitCode != nil {
		return *m.ExitCode
	}
	return 0
}

func (m *Container) GetLastStatus() string {
	if m != nil && m.LastStatus != nil {
		return *m.LastStatus
	}
	return ""
}

func (m *Container) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Container) GetNetworkBindings() []*NetworkBinding {
	if m != nil {
		return m.NetworkBindings
	}
	return nil
}

func (m *Container) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *Container) GetTaskArn() string {
	if m != nil && m.TaskArn != nil {
		return *m.TaskArn
	}
	return ""
}

type ContainerInstance struct {
	AgentConnected       *bool        `protobuf:"varint,2,opt,name=AgentConnected,json=agentConnected" json:"AgentConnected,omitempty"`
	AgentUpdateStatus    *string      `protobuf:"bytes,3,opt,name=AgentUpdateStatus,json=agentUpdateStatus" json:"AgentUpdateStatus,omitempty"`
	Attributes           []*Attribute `protobuf:"bytes,4,rep,name=Attributes,json=attributes" json:"Attributes,omitempty"`
	ContainerInstanceArn *string      `protobuf:"bytes,5,opt,name=ContainerInstanceArn,json=containerInstanceArn" json:"ContainerInstanceArn,omitempty"`
	Ec2InstanceId        *string      `protobuf:"bytes,6,opt,name=Ec2InstanceId,json=ec2InstanceId" json:"Ec2InstanceId,omitempty"`
	PendingTasksCount    *int64       `protobuf:"zigzag64,7,opt,name=PendingTasksCount,json=pendingTasksCount" json:"PendingTasksCount,omitempty"`
	RegisteredResources  []*Resource  `protobuf:"bytes,8,rep,name=RegisteredResources,json=registeredResources" json:"RegisteredResources,omitempty"`
	RemainingResources   []*Resource  `protobuf:"bytes,9,rep,name=RemainingResources,json=remainingResources" json:"RemainingResources,omitempty"`
	RunningTasksCount    *int64       `protobuf:"zigzag64,10,opt,name=RunningTasksCount,json=runningTasksCount" json:"RunningTasksCount,omitempty"`
	Status               *string      `protobuf:"bytes,11,opt,name=Status,json=status" json:"Status,omitempty"`
	VersionInfo          *VersionInfo `protobuf:"bytes,12,opt,name=VersionInfo,json=versionInfo" json:"VersionInfo,omitempty"`
	XXX_unrecognized     []byte       `json:"-"`
}

func (m *ContainerInstance) Reset()                    { *m = ContainerInstance{} }
func (m *ContainerInstance) String() string            { return proto.CompactTextString(m) }
func (*ContainerInstance) ProtoMessage()               {}
func (*ContainerInstance) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *ContainerInstance) GetAgentConnected() bool {
	if m != nil && m.AgentConnected != nil {
		return *m.AgentConnected
	}
	return false
}

func (m *ContainerInstance) GetAgentUpdateStatus() string {
	if m != nil && m.AgentUpdateStatus != nil {
		return *m.AgentUpdateStatus
	}
	return ""
}

func (m *ContainerInstance) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ContainerInstance) GetContainerInstanceArn() string {
	if m != nil && m.ContainerInstanceArn != nil {
		return *m.ContainerInstanceArn
	}
	return ""
}

func (m *ContainerInstance) GetEc2InstanceId() string {
	if m != nil && m.Ec2InstanceId != nil {
		return *m.Ec2InstanceId
	}
	return ""
}

func (m *ContainerInstance) GetPendingTasksCount() int64 {
	if m != nil && m.PendingTasksCount != nil {
		return *m.PendingTasksCount
	}
	return 0
}

func (m *ContainerInstance) GetRegisteredResources() []*Resource {
	if m != nil {
		return m.RegisteredResources
	}
	return nil
}

func (m *ContainerInstance) GetRemainingResources() []*Resource {
	if m != nil {
		return m.RemainingResources
	}
	return nil
}

func (m *ContainerInstance) GetRunningTasksCount() int64 {
	if m != nil && m.RunningTasksCount != nil {
		return *m.RunningTasksCount
	}
	return 0
}

func (m *ContainerInstance) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *ContainerInstance) GetVersionInfo() *VersionInfo {
	if m != nil {
		return m.VersionInfo
	}
	return nil
}

type ContainerOverride struct {
	Command          []string        `protobuf:"bytes,2,rep,name=Command,json=command" json:"Command,omitempty"`
	Environment      []*KeyValuePair `protobuf:"bytes,3,rep,name=Environment,json=environment" json:"Environment,omitempty"`
	Name             *string         `protobuf:"bytes,4,opt,name=Name,json=name" json:"Name,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ContainerOverride) Reset()                    { *m = ContainerOverride{} }
func (m *ContainerOverride) String() string            { return proto.CompactTextString(m) }
func (*ContainerOverride) ProtoMessage()               {}
func (*ContainerOverride) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *ContainerOverride) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ContainerOverride) GetEnvironment() []*KeyValuePair {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *ContainerOverride) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Deployment struct {
	CreatedAt        *opsee_types.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	DesiredCount     *int64                 `protobuf:"zigzag64,3,opt,name=DesiredCount,json=desiredCount" json:"DesiredCount,omitempty"`
	Id               *string                `protobuf:"bytes,4,opt,name=Id,json=id" json:"Id,omitempty"`
	PendingCount     *int64                 `protobuf:"zigzag64,5,opt,name=PendingCount,json=pendingCount" json:"PendingCount,omitempty"`
	RunningCount     *int64                 `protobuf:"zigzag64,6,opt,name=RunningCount,json=runningCount" json:"RunningCount,omitempty"`
	Status           *string                `protobuf:"bytes,7,opt,name=Status,json=status" json:"Status,omitempty"`
	TaskDefinition   *string                `protobuf:"bytes,8,opt,name=TaskDefinition,json=taskDefinition" json:"TaskDefinition,omitempty"`
	UpdatedAt        *opsee_types.Timestamp `protobuf:"bytes,9,opt,name=UpdatedAt,json=updatedAt" json:"UpdatedAt,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *Deployment) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Deployment) GetDesiredCount() int64 {
	if m != nil && m.DesiredCount != nil {
		return *m.DesiredCount
	}
	return 0
}

func (m *Deployment) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Deployment) GetPendingCount() int64 {
	if m != nil && m.PendingCount != nil {
		return *m.PendingCount
	}
	return 0
}

func (m *Deployment) GetRunningCount() int64 {
	if m != nil && m.RunningCount != nil {
		return *m.RunningCount
	}
	return 0
}

func (m *Deployment) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Deployment) GetTaskDefinition() string {
	if m != nil && m.TaskDefinition != nil {
		return *m.TaskDefinition
	}
	return ""
}

func (m *Deployment) GetUpdatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type DeploymentConfiguration struct {
	MaximumPercent        *int64 `protobuf:"zigzag64,2,opt,name=MaximumPercent,json=maximumPercent" json:"MaximumPercent,omitempty"`
	MinimumHealthyPercent *int64 `protobuf:"zigzag64,3,opt,name=MinimumHealthyPercent,json=minimumHealthyPercent" json:"MinimumHealthyPercent,omitempty"`
	XXX_unrecognized      []byte `json:"-"`
}

func (m *DeploymentConfiguration) Reset()                    { *m = DeploymentConfiguration{} }
func (m *DeploymentConfiguration) String() string            { return proto.CompactTextString(m) }
func (*DeploymentConfiguration) ProtoMessage()               {}
func (*DeploymentConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *DeploymentConfiguration) GetMaximumPercent() int64 {
	if m != nil && m.MaximumPercent != nil {
		return *m.MaximumPercent
	}
	return 0
}

func (m *DeploymentConfiguration) GetMinimumHealthyPercent() int64 {
	if m != nil && m.MinimumHealthyPercent != nil {
		return *m.MinimumHealthyPercent
	}
	return 0
}

type DescribeContainerInstancesInput struct {
	Cluster            *string  `protobuf:"bytes,2,opt,name=Cluster,json=cluster" json:"Cluster,omitempty"`
	ContainerInstances []string `protobuf:"bytes,3,rep,name=ContainerInstances,json=containerInstances" json:"ContainerInstances,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *DescribeContainerInstancesInput) Reset()         { *m = DescribeContainerInstancesInput{} }
func (m *DescribeContainerInstancesInput) String() string { return proto.CompactTextString(m) }
func (*DescribeContainerInstancesInput) ProtoMessage()    {}
func (*DescribeContainerInstancesInput) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{6}
}

func (m *DescribeContainerInstancesInput) GetCluster() string {
	if m != nil && m.Cluster != nil {
		return *m.Cluster
	}
	return ""
}

func (m *DescribeContainerInstancesInput) GetContainerInstances() []string {
	if m != nil {
		return m.ContainerInstances
	}
	return nil
}

type DescribeContainerInstancesOutput struct {
	ContainerInstances []*ContainerInstance `protobuf:"bytes,2,rep,name=ContainerInstances,json=containerInstances" json:"ContainerInstances,omitempty"`
	Failures           []*Failure           `protobuf:"bytes,3,rep,name=Failures,json=failures" json:"Failures,omitempty"`
	XXX_unrecognized   []byte               `json:"-"`
}

func (m *DescribeContainerInstancesOutput) Reset()         { *m = DescribeContainerInstancesOutput{} }
func (m *DescribeContainerInstancesOutput) String() string { return proto.CompactTextString(m) }
func (*DescribeContainerInstancesOutput) ProtoMessage()    {}
func (*DescribeContainerInstancesOutput) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{7}
}

func (m *DescribeContainerInstancesOutput) GetContainerInstances() []*ContainerInstance {
	if m != nil {
		return m.ContainerInstances
	}
	return nil
}

func (m *DescribeContainerInstancesOutput) GetFailures() []*Failure {
	if m != nil {
		return m.Failures
	}
	return nil
}

type DescribeServicesInput struct {
	Cluster          *string  `protobuf:"bytes,2,opt,name=Cluster,json=cluster" json:"Cluster,omitempty"`
	Services         []string `protobuf:"bytes,3,rep,name=Services,json=services" json:"Services,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DescribeServicesInput) Reset()                    { *m = DescribeServicesInput{} }
func (m *DescribeServicesInput) String() string            { return proto.CompactTextString(m) }
func (*DescribeServicesInput) ProtoMessage()               {}
func (*DescribeServicesInput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *DescribeServicesInput) GetCluster() string {
	if m != nil && m.Cluster != nil {
		return *m.Cluster
	}
	return ""
}

func (m *DescribeServicesInput) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type DescribeServicesOutput struct {
	Failures         []*Failure `protobuf:"bytes,2,rep,name=Failures,json=failures" json:"Failures,omitempty"`
	Services         []*Service `protobuf:"bytes,3,rep,name=Services,json=services" json:"Services,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *DescribeServicesOutput) Reset()                    { *m = DescribeServicesOutput{} }
func (m *DescribeServicesOutput) String() string            { return proto.CompactTextString(m) }
func (*DescribeServicesOutput) ProtoMessage()               {}
func (*DescribeServicesOutput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *DescribeServicesOutput) GetFailures() []*Failure {
	if m != nil {
		return m.Failures
	}
	return nil
}

func (m *DescribeServicesOutput) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type DescribeTasksInput struct {
	Cluster          *string  `protobuf:"bytes,2,opt,name=Cluster,json=cluster" json:"Cluster,omitempty"`
	Tasks            []string `protobuf:"bytes,3,rep,name=Tasks,json=tasks" json:"Tasks,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DescribeTasksInput) Reset()                    { *m = DescribeTasksInput{} }
func (m *DescribeTasksInput) String() string            { return proto.CompactTextString(m) }
func (*DescribeTasksInput) ProtoMessage()               {}
func (*DescribeTasksInput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *DescribeTasksInput) GetCluster() string {
	if m != nil && m.Cluster != nil {
		return *m.Cluster
	}
	return ""
}

func (m *DescribeTasksInput) GetTasks() []string {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type DescribeTasksOutput struct {
	Failures         []*Failure `protobuf:"bytes,2,rep,name=Failures,json=failures" json:"Failures,omitempty"`
	Tasks            []*Task    `protobuf:"bytes,3,rep,name=Tasks,json=tasks" json:"Tasks,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *DescribeTasksOutput) Reset()                    { *m = DescribeTasksOutput{} }
func (m *DescribeTasksOutput) String() string            { return proto.CompactTextString(m) }
func (*DescribeTasksOutput) ProtoMessage()               {}
func (*DescribeTasksOutput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *DescribeTasksOutput) GetFailures() []*Failure {
	if m != nil {
		return m.Failures
	}
	return nil
}

func (m *DescribeTasksOutput) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type Failure struct {
	Arn              *string `protobuf:"bytes,2,opt,name=Arn,json=arn" json:"Arn,omitempty"`
	Reason           *string `protobuf:"bytes,3,opt,name=Reason,json=reason" json:"Reason,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (m *Failure) String() string            { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *Failure) GetArn() string {
	if m != nil && m.Arn != nil {
		return *m.Arn
	}
	return ""
}

func (m *Failure) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type KeyValuePair struct {
	Name             *string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Value            *string `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValuePair) Reset()                    { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string            { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()               {}
func (*KeyValuePair) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

func (m *KeyValuePair) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type ListClustersInput struct {
	MaxResults       *int64  `protobuf:"zigzag64,2,opt,name=MaxResults,json=maxResults" json:"MaxResults,omitempty"`
	NextToken        *string `protobuf:"bytes,3,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListClustersInput) Reset()                    { *m = ListClustersInput{} }
func (m *ListClustersInput) String() string            { return proto.CompactTextString(m) }
func (*ListClustersInput) ProtoMessage()               {}
func (*ListClustersInput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

func (m *ListClustersInput) GetMaxResults() int64 {
	if m != nil && m.MaxResults != nil {
		return *m.MaxResults
	}
	return 0
}

func (m *ListClustersInput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

type ListClustersOutput struct {
	ClusterArns      []string `protobuf:"bytes,2,rep,name=ClusterArns,json=clusterArns" json:"ClusterArns,omitempty"`
	NextToken        *string  `protobuf:"bytes,3,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ListClustersOutput) Reset()                    { *m = ListClustersOutput{} }
func (m *ListClustersOutput) String() string            { return proto.CompactTextString(m) }
func (*ListClustersOutput) ProtoMessage()               {}
func (*ListClustersOutput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

func (m *ListClustersOutput) GetClusterArns() []string {
	if m != nil {
		return m.ClusterArns
	}
	return nil
}

func (m *ListClustersOutput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

type ListContainerInstancesInput struct {
	Cluster          *string `protobuf:"bytes,2,opt,name=Cluster,json=cluster" json:"Cluster,omitempty"`
	MaxResults       *int64  `protobuf:"zigzag64,3,opt,name=MaxResults,json=maxResults" json:"MaxResults,omitempty"`
	NextToken        *string `protobuf:"bytes,4,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListContainerInstancesInput) Reset()         { *m = ListContainerInstancesInput{} }
func (m *ListContainerInstancesInput) String() string { return proto.CompactTextString(m) }
func (*ListContainerInstancesInput) ProtoMessage()    {}
func (*ListContainerInstancesInput) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{16}
}

func (m *ListContainerInstancesInput) GetCluster() string {
	if m != nil && m.Cluster != nil {
		return *m.Cluster
	}
	return ""
}

func (m *ListContainerInstancesInput) GetMaxResults() int64 {
	if m != nil && m.MaxResults != nil {
		return *m.MaxResults
	}
	return 0
}

func (m *ListContainerInstancesInput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

type ListContainerInstancesOutput struct {
	ContainerInstanceArns []string `protobuf:"bytes,2,rep,name=ContainerInstanceArns,json=containerInstanceArns" json:"ContainerInstanceArns,omitempty"`
	NextToken             *string  `protobuf:"bytes,3,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	XXX_unrecognized      []byte   `json:"-"`
}

func (m *ListContainerInstancesOutput) Reset()         { *m = ListContainerInstancesOutput{} }
func (m *ListContainerInstancesOutput) String() string { return proto.CompactTextString(m) }
func (*ListContainerInstancesOutput) ProtoMessage()    {}
func (*ListContainerInstancesOutput) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{17}
}

func (m *ListContainerInstancesOutput) GetContainerInstanceArns() []string {
	if m != nil {
		return m.ContainerInstanceArns
	}
	return nil
}

func (m *ListContainerInstancesOutput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

type ListServicesInput struct {
	Cluster          *string `protobuf:"bytes,2,opt,name=Cluster,json=cluster" json:"Cluster,omitempty"`
	MaxResults       *int64  `protobuf:"zigzag64,3,opt,name=MaxResults,json=maxResults" json:"MaxResults,omitempty"`
	NextToken        *string `protobuf:"bytes,4,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListServicesInput) Reset()                    { *m = ListServicesInput{} }
func (m *ListServicesInput) String() string            { return proto.CompactTextString(m) }
func (*ListServicesInput) ProtoMessage()               {}
func (*ListServicesInput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{18} }

func (m *ListServicesInput) GetCluster() string {
	if m != nil && m.Cluster != nil {
		return *m.Cluster
	}
	return ""
}

func (m *ListServicesInput) GetMaxResults() int64 {
	if m != nil && m.MaxResults != nil {
		return *m.MaxResults
	}
	return 0
}

func (m *ListServicesInput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

type ListServicesOutput struct {
	NextToken        *string  `protobuf:"bytes,2,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	ServiceArns      []string `protobuf:"bytes,3,rep,name=ServiceArns,json=serviceArns" json:"ServiceArns,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ListServicesOutput) Reset()                    { *m = ListServicesOutput{} }
func (m *ListServicesOutput) String() string            { return proto.CompactTextString(m) }
func (*ListServicesOutput) ProtoMessage()               {}
func (*ListServicesOutput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{19} }

func (m *ListServicesOutput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

func (m *ListServicesOutput) GetServiceArns() []string {
	if m != nil {
		return m.ServiceArns
	}
	return nil
}

type ListTasksInput struct {
	Cluster           *string `protobuf:"bytes,2,opt,name=Cluster,json=cluster" json:"Cluster,omitempty"`
	ContainerInstance *string `protobuf:"bytes,3,opt,name=ContainerInstance,json=containerInstance" json:"ContainerInstance,omitempty"`
	DesiredStatus     *string `protobuf:"bytes,4,opt,name=DesiredStatus,json=desiredStatus" json:"DesiredStatus,omitempty"`
	Family            *string `protobuf:"bytes,5,opt,name=Family,json=family" json:"Family,omitempty"`
	MaxResults        *int64  `protobuf:"zigzag64,6,opt,name=MaxResults,json=maxResults" json:"MaxResults,omitempty"`
	NextToken         *string `protobuf:"bytes,7,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	ServiceName       *string `protobuf:"bytes,8,opt,name=ServiceName,json=serviceName" json:"ServiceName,omitempty"`
	StartedBy         *string `protobuf:"bytes,9,opt,name=StartedBy,json=startedBy" json:"StartedBy,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *ListTasksInput) Reset()                    { *m = ListTasksInput{} }
func (m *ListTasksInput) String() string            { return proto.CompactTextString(m) }
func (*ListTasksInput) ProtoMessage()               {}
func (*ListTasksInput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{20} }

func (m *ListTasksInput) GetCluster() string {
	if m != nil && m.Cluster != nil {
		return *m.Cluster
	}
	return ""
}

func (m *ListTasksInput) GetContainerInstance() string {
	if m != nil && m.ContainerInstance != nil {
		return *m.ContainerInstance
	}
	return ""
}

func (m *ListTasksInput) GetDesiredStatus() string {
	if m != nil && m.DesiredStatus != nil {
		return *m.DesiredStatus
	}
	return ""
}

func (m *ListTasksInput) GetFamily() string {
	if m != nil && m.Family != nil {
		return *m.Family
	}
	return ""
}

func (m *ListTasksInput) GetMaxResults() int64 {
	if m != nil && m.MaxResults != nil {
		return *m.MaxResults
	}
	return 0
}

func (m *ListTasksInput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

func (m *ListTasksInput) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *ListTasksInput) GetStartedBy() string {
	if m != nil && m.StartedBy != nil {
		return *m.StartedBy
	}
	return ""
}

type ListTasksOutput struct {
	NextToken        *string  `protobuf:"bytes,2,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	TaskArns         []string `protobuf:"bytes,3,rep,name=TaskArns,json=taskArns" json:"TaskArns,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ListTasksOutput) Reset()                    { *m = ListTasksOutput{} }
func (m *ListTasksOutput) String() string            { return proto.CompactTextString(m) }
func (*ListTasksOutput) ProtoMessage()               {}
func (*ListTasksOutput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{21} }

func (m *ListTasksOutput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

func (m *ListTasksOutput) GetTaskArns() []string {
	if m != nil {
		return m.TaskArns
	}
	return nil
}

type LoadBalancer struct {
	ContainerName    *string `protobuf:"bytes,2,opt,name=ContainerName,json=containerName" json:"ContainerName,omitempty"`
	ContainerPort    *int64  `protobuf:"zigzag64,3,opt,name=ContainerPort,json=containerPort" json:"ContainerPort,omitempty"`
	LoadBalancerName *string `protobuf:"bytes,4,opt,name=LoadBalancerName,json=loadBalancerName" json:"LoadBalancerName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LoadBalancer) Reset()                    { *m = LoadBalancer{} }
func (m *LoadBalancer) String() string            { return proto.CompactTextString(m) }
func (*LoadBalancer) ProtoMessage()               {}
func (*LoadBalancer) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{22} }

func (m *LoadBalancer) GetContainerName() string {
	if m != nil && m.ContainerName != nil {
		return *m.ContainerName
	}
	return ""
}

func (m *LoadBalancer) GetContainerPort() int64 {
	if m != nil && m.ContainerPort != nil {
		return *m.ContainerPort
	}
	return 0
}

func (m *LoadBalancer) GetLoadBalancerName() string {
	if m != nil && m.LoadBalancerName != nil {
		return *m.LoadBalancerName
	}
	return ""
}

type NetworkBinding struct {
	BindIP           *string `protobuf:"bytes,2,opt,name=BindIP,json=bindIP" json:"BindIP,omitempty"`
	ContainerPort    *int64  `protobuf:"zigzag64,3,opt,name=ContainerPort,json=containerPort" json:"ContainerPort,omitempty"`
	HostPort         *int64  `protobuf:"zigzag64,4,opt,name=HostPort,json=hostPort" json:"HostPort,omitempty"`
	Protocol         *string `protobuf:"bytes,5,opt,name=Protocol,json=protocol" json:"Protocol,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NetworkBinding) Reset()                    { *m = NetworkBinding{} }
func (m *NetworkBinding) String() string            { return proto.CompactTextString(m) }
func (*NetworkBinding) ProtoMessage()               {}
func (*NetworkBinding) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{23} }

func (m *NetworkBinding) GetBindIP() string {
	if m != nil && m.BindIP != nil {
		return *m.BindIP
	}
	return ""
}

func (m *NetworkBinding) GetContainerPort() int64 {
	if m != nil && m.ContainerPort != nil {
		return *m.ContainerPort
	}
	return 0
}

func (m *NetworkBinding) GetHostPort() int64 {
	if m != nil && m.HostPort != nil {
		return *m.HostPort
	}
	return 0
}

func (m *NetworkBinding) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

type Resource struct {
	DoubleValue      *float64 `protobuf:"fixed64,2,opt,name=DoubleValue,json=doubleValue" json:"DoubleValue,omitempty"`
	IntegerValue     *int64   `protobuf:"zigzag64,3,opt,name=IntegerValue,json=integerValue" json:"IntegerValue,omitempty"`
	LongValue        *int64   `protobuf:"zigzag64,4,opt,name=LongValue,json=longValue" json:"LongValue,omitempty"`
	Name             *string  `protobuf:"bytes,5,opt,name=Name,json=name" json:"Name,omitempty"`
	StringSetValue   []string `protobuf:"bytes,6,rep,name=StringSetValue,json=stringSetValue" json:"StringSetValue,omitempty"`
	Type             *string  `protobuf:"bytes,7,opt,name=Type,json=type" json:"Type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{24} }

func (m *Resource) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *Resource) GetIntegerValue() int64 {
	if m != nil && m.IntegerValue != nil {
		return *m.IntegerValue
	}
	return 0
}

func (m *Resource) GetLongValue() int64 {
	if m != nil && m.LongValue != nil {
		return *m.LongValue
	}
	return 0
}

func (m *Resource) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Resource) GetStringSetValue() []string {
	if m != nil {
		return m.StringSetValue
	}
	return nil
}

func (m *Resource) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

type Service struct {
	ClusterArn              *string                  `protobuf:"bytes,2,opt,name=ClusterArn,json=clusterArn" json:"ClusterArn,omitempty"`
	CreatedAt               *opsee_types.Timestamp   `protobuf:"bytes,3,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	DeploymentConfiguration *DeploymentConfiguration `protobuf:"bytes,4,opt,name=DeploymentConfiguration,json=deploymentConfiguration" json:"DeploymentConfiguration,omitempty"`
	Deployments             []*Deployment            `protobuf:"bytes,5,rep,name=Deployments,json=deployments" json:"Deployments,omitempty"`
	DesiredCount            *int64                   `protobuf:"zigzag64,6,opt,name=DesiredCount,json=desiredCount" json:"DesiredCount,omitempty"`
	Events                  []*ServiceEvent          `protobuf:"bytes,7,rep,name=Events,json=events" json:"Events,omitempty"`
	LoadBalancers           []*LoadBalancer          `protobuf:"bytes,8,rep,name=LoadBalancers,json=loadBalancers" json:"LoadBalancers,omitempty"`
	PendingCount            *int64                   `protobuf:"zigzag64,9,opt,name=PendingCount,json=pendingCount" json:"PendingCount,omitempty"`
	RoleArn                 *string                  `protobuf:"bytes,10,opt,name=RoleArn,json=roleArn" json:"RoleArn,omitempty"`
	RunningCount            *int64                   `protobuf:"zigzag64,11,opt,name=RunningCount,json=runningCount" json:"RunningCount,omitempty"`
	ServiceArn              *string                  `protobuf:"bytes,12,opt,name=ServiceArn,json=serviceArn" json:"ServiceArn,omitempty"`
	ServiceName             *string                  `protobuf:"bytes,13,opt,name=ServiceName,json=serviceName" json:"ServiceName,omitempty"`
	Status                  *string                  `protobuf:"bytes,14,opt,name=Status,json=status" json:"Status,omitempty"`
	TaskDefinition          *string                  `protobuf:"bytes,15,opt,name=TaskDefinition,json=taskDefinition" json:"TaskDefinition,omitempty"`
	XXX_unrecognized        []byte                   `json:"-"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{25} }

func (m *Service) GetClusterArn() string {
	if m != nil && m.ClusterArn != nil {
		return *m.ClusterArn
	}
	return ""
}

func (m *Service) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Service) GetDeploymentConfiguration() *DeploymentConfiguration {
	if m != nil {
		return m.DeploymentConfiguration
	}
	return nil
}

func (m *Service) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

func (m *Service) GetDesiredCount() int64 {
	if m != nil && m.DesiredCount != nil {
		return *m.DesiredCount
	}
	return 0
}

func (m *Service) GetEvents() []*ServiceEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Service) GetLoadBalancers() []*LoadBalancer {
	if m != nil {
		return m.LoadBalancers
	}
	return nil
}

func (m *Service) GetPendingCount() int64 {
	if m != nil && m.PendingCount != nil {
		return *m.PendingCount
	}
	return 0
}

func (m *Service) GetRoleArn() string {
	if m != nil && m.RoleArn != nil {
		return *m.RoleArn
	}
	return ""
}

func (m *Service) GetRunningCount() int64 {
	if m != nil && m.RunningCount != nil {
		return *m.RunningCount
	}
	return 0
}

func (m *Service) GetServiceArn() string {
	if m != nil && m.ServiceArn != nil {
		return *m.ServiceArn
	}
	return ""
}

func (m *Service) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *Service) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Service) GetTaskDefinition() string {
	if m != nil && m.TaskDefinition != nil {
		return *m.TaskDefinition
	}
	return ""
}

type ServiceEvent struct {
	CreatedAt        *opsee_types.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	Id               *string                `protobuf:"bytes,3,opt,name=Id,json=id" json:"Id,omitempty"`
	Message          *string                `protobuf:"bytes,4,opt,name=Message,json=message" json:"Message,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ServiceEvent) Reset()                    { *m = ServiceEvent{} }
func (m *ServiceEvent) String() string            { return proto.CompactTextString(m) }
func (*ServiceEvent) ProtoMessage()               {}
func (*ServiceEvent) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{26} }

func (m *ServiceEvent) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ServiceEvent) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ServiceEvent) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type Task struct {
	ClusterArn           *string                `protobuf:"bytes,2,opt,name=ClusterArn,json=clusterArn" json:"ClusterArn,omitempty"`
	ContainerInstanceArn *string                `protobuf:"bytes,3,opt,name=ContainerInstanceArn,json=containerInstanceArn" json:"ContainerInstanceArn,omitempty"`
	Containers           []*Container           `protobuf:"bytes,4,rep,name=Containers,json=containers" json:"Containers,omitempty"`
	CreatedAt            *opsee_types.Timestamp `protobuf:"bytes,5,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	DesiredStatus        *string                `protobuf:"bytes,6,opt,name=DesiredStatus,json=desiredStatus" json:"DesiredStatus,omitempty"`
	LastStatus           *string                `protobuf:"bytes,7,opt,name=LastStatus,json=lastStatus" json:"LastStatus,omitempty"`
	Overrides            *TaskOverride          `protobuf:"bytes,8,opt,name=Overrides,json=overrides" json:"Overrides,omitempty"`
	StartedAt            *opsee_types.Timestamp `protobuf:"bytes,9,opt,name=StartedAt,json=startedAt" json:"StartedAt,omitempty"`
	StartedBy            *string                `protobuf:"bytes,10,opt,name=StartedBy,json=startedBy" json:"StartedBy,omitempty"`
	StoppedAt            *opsee_types.Timestamp `protobuf:"bytes,11,opt,name=StoppedAt,json=stoppedAt" json:"StoppedAt,omitempty"`
	StoppedReason        *string                `protobuf:"bytes,12,opt,name=StoppedReason,json=stoppedReason" json:"StoppedReason,omitempty"`
	TaskArn              *string                `protobuf:"bytes,13,opt,name=TaskArn,json=taskArn" json:"TaskArn,omitempty"`
	TaskDefinitionArn    *string                `protobuf:"bytes,14,opt,name=TaskDefinitionArn,json=taskDefinitionArn" json:"TaskDefinitionArn,omitempty"`
	XXX_unrecognized     []byte                 `json:"-"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{27} }

func (m *Task) GetClusterArn() string {
	if m != nil && m.ClusterArn != nil {
		return *m.ClusterArn
	}
	return ""
}

func (m *Task) GetContainerInstanceArn() string {
	if m != nil && m.ContainerInstanceArn != nil {
		return *m.ContainerInstanceArn
	}
	return ""
}

func (m *Task) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *Task) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Task) GetDesiredStatus() string {
	if m != nil && m.DesiredStatus != nil {
		return *m.DesiredStatus
	}
	return ""
}

func (m *Task) GetLastStatus() string {
	if m != nil && m.LastStatus != nil {
		return *m.LastStatus
	}
	return ""
}

func (m *Task) GetOverrides() *TaskOverride {
	if m != nil {
		return m.Overrides
	}
	return nil
}

func (m *Task) GetStartedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *Task) GetStartedBy() string {
	if m != nil && m.StartedBy != nil {
		return *m.StartedBy
	}
	return ""
}

func (m *Task) GetStoppedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.StoppedAt
	}
	return nil
}

func (m *Task) GetStoppedReason() string {
	if m != nil && m.StoppedReason != nil {
		return *m.StoppedReason
	}
	return ""
}

func (m *Task) GetTaskArn() string {
	if m != nil && m.TaskArn != nil {
		return *m.TaskArn
	}
	return ""
}

func (m *Task) GetTaskDefinitionArn() string {
	if m != nil && m.TaskDefinitionArn != nil {
		return *m.TaskDefinitionArn
	}
	return ""
}

type TaskOverride struct {
	ContainerOverrides []*ContainerOverride `protobuf:"bytes,2,rep,name=ContainerOverrides,json=containerOverrides" json:"ContainerOverrides,omitempty"`
	XXX_unrecognized   []byte               `json:"-"`
}

func (m *TaskOverride) Reset()                    { *m = TaskOverride{} }
func (m *TaskOverride) String() string            { return proto.CompactTextString(m) }
func (*TaskOverride) ProtoMessage()               {}
func (*TaskOverride) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{28} }

func (m *TaskOverride) GetContainerOverrides() []*ContainerOverride {
	if m != nil {
		return m.ContainerOverrides
	}
	return nil
}

type VersionInfo struct {
	AgentHash        *string `protobuf:"bytes,2,opt,name=AgentHash,json=agentHash" json:"AgentHash,omitempty"`
	AgentVersion     *string `protobuf:"bytes,3,opt,name=AgentVersion,json=agentVersion" json:"AgentVersion,omitempty"`
	DockerVersion    *string `protobuf:"bytes,4,opt,name=DockerVersion,json=dockerVersion" json:"DockerVersion,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VersionInfo) Reset()                    { *m = VersionInfo{} }
func (m *VersionInfo) String() string            { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()               {}
func (*VersionInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{29} }

func (m *VersionInfo) GetAgentHash() string {
	if m != nil && m.AgentHash != nil {
		return *m.AgentHash
	}
	return ""
}

func (m *VersionInfo) GetAgentVersion() string {
	if m != nil && m.AgentVersion != nil {
		return *m.AgentVersion
	}
	return ""
}

func (m *VersionInfo) GetDockerVersion() string {
	if m != nil && m.DockerVersion != nil {
		return *m.DockerVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*Attribute)(nil), "opsee.aws.ecs.Attribute")
	proto.RegisterType((*Container)(nil), "opsee.aws.ecs.Container")
	proto.RegisterType((*ContainerInstance)(nil), "opsee.aws.ecs.ContainerInstance")
	proto.RegisterType((*ContainerOverride)(nil), "opsee.aws.ecs.ContainerOverride")
	proto.RegisterType((*Deployment)(nil), "opsee.aws.ecs.Deployment")
	proto.RegisterType((*DeploymentConfiguration)(nil), "opsee.aws.ecs.DeploymentConfiguration")
	proto.RegisterType((*DescribeContainerInstancesInput)(nil), "opsee.aws.ecs.DescribeContainerInstancesInput")
	proto.RegisterType((*DescribeContainerInstancesOutput)(nil), "opsee.aws.ecs.DescribeContainerInstancesOutput")
	proto.RegisterType((*DescribeServicesInput)(nil), "opsee.aws.ecs.DescribeServicesInput")
	proto.RegisterType((*DescribeServicesOutput)(nil), "opsee.aws.ecs.DescribeServicesOutput")
	proto.RegisterType((*DescribeTasksInput)(nil), "opsee.aws.ecs.DescribeTasksInput")
	proto.RegisterType((*DescribeTasksOutput)(nil), "opsee.aws.ecs.DescribeTasksOutput")
	proto.RegisterType((*Failure)(nil), "opsee.aws.ecs.Failure")
	proto.RegisterType((*KeyValuePair)(nil), "opsee.aws.ecs.KeyValuePair")
	proto.RegisterType((*ListClustersInput)(nil), "opsee.aws.ecs.ListClustersInput")
	proto.RegisterType((*ListClustersOutput)(nil), "opsee.aws.ecs.ListClustersOutput")
	proto.RegisterType((*ListContainerInstancesInput)(nil), "opsee.aws.ecs.ListContainerInstancesInput")
	proto.RegisterType((*ListContainerInstancesOutput)(nil), "opsee.aws.ecs.ListContainerInstancesOutput")
	proto.RegisterType((*ListServicesInput)(nil), "opsee.aws.ecs.ListServicesInput")
	proto.RegisterType((*ListServicesOutput)(nil), "opsee.aws.ecs.ListServicesOutput")
	proto.RegisterType((*ListTasksInput)(nil), "opsee.aws.ecs.ListTasksInput")
	proto.RegisterType((*ListTasksOutput)(nil), "opsee.aws.ecs.ListTasksOutput")
	proto.RegisterType((*LoadBalancer)(nil), "opsee.aws.ecs.LoadBalancer")
	proto.RegisterType((*NetworkBinding)(nil), "opsee.aws.ecs.NetworkBinding")
	proto.RegisterType((*Resource)(nil), "opsee.aws.ecs.Resource")
	proto.RegisterType((*Service)(nil), "opsee.aws.ecs.Service")
	proto.RegisterType((*ServiceEvent)(nil), "opsee.aws.ecs.ServiceEvent")
	proto.RegisterType((*Task)(nil), "opsee.aws.ecs.Task")
	proto.RegisterType((*TaskOverride)(nil), "opsee.aws.ecs.TaskOverride")
	proto.RegisterType((*VersionInfo)(nil), "opsee.aws.ecs.VersionInfo")
}
func (this *Attribute) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attribute)
	if !ok {
		that2, ok := that.(Attribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.Value != nil && that1.Value != nil {
		if *this.Value != *that1.Value {
			return false
		}
	} else if this.Value != nil {
		return false
	} else if that1.Value != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Container) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Container)
	if !ok {
		that2, ok := that.(Container)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainerArn != nil && that1.ContainerArn != nil {
		if *this.ContainerArn != *that1.ContainerArn {
			return false
		}
	} else if this.ContainerArn != nil {
		return false
	} else if that1.ContainerArn != nil {
		return false
	}
	if this.ExitCode != nil && that1.ExitCode != nil {
		if *this.ExitCode != *that1.ExitCode {
			return false
		}
	} else if this.ExitCode != nil {
		return false
	} else if that1.ExitCode != nil {
		return false
	}
	if this.LastStatus != nil && that1.LastStatus != nil {
		if *this.LastStatus != *that1.LastStatus {
			return false
		}
	} else if this.LastStatus != nil {
		return false
	} else if that1.LastStatus != nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if len(this.NetworkBindings) != len(that1.NetworkBindings) {
		return false
	}
	for i := range this.NetworkBindings {
		if !this.NetworkBindings[i].Equal(that1.NetworkBindings[i]) {
			return false
		}
	}
	if this.Reason != nil && that1.Reason != nil {
		if *this.Reason != *that1.Reason {
			return false
		}
	} else if this.Reason != nil {
		return false
	} else if that1.Reason != nil {
		return false
	}
	if this.TaskArn != nil && that1.TaskArn != nil {
		if *this.TaskArn != *that1.TaskArn {
			return false
		}
	} else if this.TaskArn != nil {
		return false
	} else if that1.TaskArn != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ContainerInstance) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ContainerInstance)
	if !ok {
		that2, ok := that.(ContainerInstance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AgentConnected != nil && that1.AgentConnected != nil {
		if *this.AgentConnected != *that1.AgentConnected {
			return false
		}
	} else if this.AgentConnected != nil {
		return false
	} else if that1.AgentConnected != nil {
		return false
	}
	if this.AgentUpdateStatus != nil && that1.AgentUpdateStatus != nil {
		if *this.AgentUpdateStatus != *that1.AgentUpdateStatus {
			return false
		}
	} else if this.AgentUpdateStatus != nil {
		return false
	} else if that1.AgentUpdateStatus != nil {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	if this.ContainerInstanceArn != nil && that1.ContainerInstanceArn != nil {
		if *this.ContainerInstanceArn != *that1.ContainerInstanceArn {
			return false
		}
	} else if this.ContainerInstanceArn != nil {
		return false
	} else if that1.ContainerInstanceArn != nil {
		return false
	}
	if this.Ec2InstanceId != nil && that1.Ec2InstanceId != nil {
		if *this.Ec2InstanceId != *that1.Ec2InstanceId {
			return false
		}
	} else if this.Ec2InstanceId != nil {
		return false
	} else if that1.Ec2InstanceId != nil {
		return false
	}
	if this.PendingTasksCount != nil && that1.PendingTasksCount != nil {
		if *this.PendingTasksCount != *that1.PendingTasksCount {
			return false
		}
	} else if this.PendingTasksCount != nil {
		return false
	} else if that1.PendingTasksCount != nil {
		return false
	}
	if len(this.RegisteredResources) != len(that1.RegisteredResources) {
		return false
	}
	for i := range this.RegisteredResources {
		if !this.RegisteredResources[i].Equal(that1.RegisteredResources[i]) {
			return false
		}
	}
	if len(this.RemainingResources) != len(that1.RemainingResources) {
		return false
	}
	for i := range this.RemainingResources {
		if !this.RemainingResources[i].Equal(that1.RemainingResources[i]) {
			return false
		}
	}
	if this.RunningTasksCount != nil && that1.RunningTasksCount != nil {
		if *this.RunningTasksCount != *that1.RunningTasksCount {
			return false
		}
	} else if this.RunningTasksCount != nil {
		return false
	} else if that1.RunningTasksCount != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if !this.VersionInfo.Equal(that1.VersionInfo) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ContainerOverride) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ContainerOverride)
	if !ok {
		that2, ok := that.(ContainerOverride)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Command) != len(that1.Command) {
		return false
	}
	for i := range this.Command {
		if this.Command[i] != that1.Command[i] {
			return false
		}
	}
	if len(this.Environment) != len(that1.Environment) {
		return false
	}
	for i := range this.Environment {
		if !this.Environment[i].Equal(that1.Environment[i]) {
			return false
		}
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Deployment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Deployment)
	if !ok {
		that2, ok := that.(Deployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.DesiredCount != nil && that1.DesiredCount != nil {
		if *this.DesiredCount != *that1.DesiredCount {
			return false
		}
	} else if this.DesiredCount != nil {
		return false
	} else if that1.DesiredCount != nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if this.PendingCount != nil && that1.PendingCount != nil {
		if *this.PendingCount != *that1.PendingCount {
			return false
		}
	} else if this.PendingCount != nil {
		return false
	} else if that1.PendingCount != nil {
		return false
	}
	if this.RunningCount != nil && that1.RunningCount != nil {
		if *this.RunningCount != *that1.RunningCount {
			return false
		}
	} else if this.RunningCount != nil {
		return false
	} else if that1.RunningCount != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if this.TaskDefinition != nil && that1.TaskDefinition != nil {
		if *this.TaskDefinition != *that1.TaskDefinition {
			return false
		}
	} else if this.TaskDefinition != nil {
		return false
	} else if that1.TaskDefinition != nil {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeploymentConfiguration) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeploymentConfiguration)
	if !ok {
		that2, ok := that.(DeploymentConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaximumPercent != nil && that1.MaximumPercent != nil {
		if *this.MaximumPercent != *that1.MaximumPercent {
			return false
		}
	} else if this.MaximumPercent != nil {
		return false
	} else if that1.MaximumPercent != nil {
		return false
	}
	if this.MinimumHealthyPercent != nil && that1.MinimumHealthyPercent != nil {
		if *this.MinimumHealthyPercent != *that1.MinimumHealthyPercent {
			return false
		}
	} else if this.MinimumHealthyPercent != nil {
		return false
	} else if that1.MinimumHealthyPercent != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeContainerInstancesInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeContainerInstancesInput)
	if !ok {
		that2, ok := that.(DescribeContainerInstancesInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cluster != nil && that1.Cluster != nil {
		if *this.Cluster != *that1.Cluster {
			return false
		}
	} else if this.Cluster != nil {
		return false
	} else if that1.Cluster != nil {
		return false
	}
	if len(this.ContainerInstances) != len(that1.ContainerInstances) {
		return false
	}
	for i := range this.ContainerInstances {
		if this.ContainerInstances[i] != that1.ContainerInstances[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeContainerInstancesOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeContainerInstancesOutput)
	if !ok {
		that2, ok := that.(DescribeContainerInstancesOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ContainerInstances) != len(that1.ContainerInstances) {
		return false
	}
	for i := range this.ContainerInstances {
		if !this.ContainerInstances[i].Equal(that1.ContainerInstances[i]) {
			return false
		}
	}
	if len(this.Failures) != len(that1.Failures) {
		return false
	}
	for i := range this.Failures {
		if !this.Failures[i].Equal(that1.Failures[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeServicesInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeServicesInput)
	if !ok {
		that2, ok := that.(DescribeServicesInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cluster != nil && that1.Cluster != nil {
		if *this.Cluster != *that1.Cluster {
			return false
		}
	} else if this.Cluster != nil {
		return false
	} else if that1.Cluster != nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if this.Services[i] != that1.Services[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeServicesOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeServicesOutput)
	if !ok {
		that2, ok := that.(DescribeServicesOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Failures) != len(that1.Failures) {
		return false
	}
	for i := range this.Failures {
		if !this.Failures[i].Equal(that1.Failures[i]) {
			return false
		}
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeTasksInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeTasksInput)
	if !ok {
		that2, ok := that.(DescribeTasksInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cluster != nil && that1.Cluster != nil {
		if *this.Cluster != *that1.Cluster {
			return false
		}
	} else if this.Cluster != nil {
		return false
	} else if that1.Cluster != nil {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if this.Tasks[i] != that1.Tasks[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeTasksOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeTasksOutput)
	if !ok {
		that2, ok := that.(DescribeTasksOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Failures) != len(that1.Failures) {
		return false
	}
	for i := range this.Failures {
		if !this.Failures[i].Equal(that1.Failures[i]) {
			return false
		}
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Failure) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Failure)
	if !ok {
		that2, ok := that.(Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Arn != nil && that1.Arn != nil {
		if *this.Arn != *that1.Arn {
			return false
		}
	} else if this.Arn != nil {
		return false
	} else if that1.Arn != nil {
		return false
	}
	if this.Reason != nil && that1.Reason != nil {
		if *this.Reason != *that1.Reason {
			return false
		}
	} else if this.Reason != nil {
		return false
	} else if that1.Reason != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *KeyValuePair) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KeyValuePair)
	if !ok {
		that2, ok := that.(KeyValuePair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.Value != nil && that1.Value != nil {
		if *this.Value != *that1.Value {
			return false
		}
	} else if this.Value != nil {
		return false
	} else if that1.Value != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListClustersInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListClustersInput)
	if !ok {
		that2, ok := that.(ListClustersInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaxResults != nil && that1.MaxResults != nil {
		if *this.MaxResults != *that1.MaxResults {
			return false
		}
	} else if this.MaxResults != nil {
		return false
	} else if that1.MaxResults != nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListClustersOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListClustersOutput)
	if !ok {
		that2, ok := that.(ListClustersOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ClusterArns) != len(that1.ClusterArns) {
		return false
	}
	for i := range this.ClusterArns {
		if this.ClusterArns[i] != that1.ClusterArns[i] {
			return false
		}
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListContainerInstancesInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListContainerInstancesInput)
	if !ok {
		that2, ok := that.(ListContainerInstancesInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cluster != nil && that1.Cluster != nil {
		if *this.Cluster != *that1.Cluster {
			return false
		}
	} else if this.Cluster != nil {
		return false
	} else if that1.Cluster != nil {
		return false
	}
	if this.MaxResults != nil && that1.MaxResults != nil {
		if *this.MaxResults != *that1.MaxResults {
			return false
		}
	} else if this.MaxResults != nil {
		return false
	} else if that1.MaxResults != nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListContainerInstancesOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListContainerInstancesOutput)
	if !ok {
		that2, ok := that.(ListContainerInstancesOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ContainerInstanceArns) != len(that1.ContainerInstanceArns) {
		return false
	}
	for i := range this.ContainerInstanceArns {
		if this.ContainerInstanceArns[i] != that1.ContainerInstanceArns[i] {
			return false
		}
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListServicesInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListServicesInput)
	if !ok {
		that2, ok := that.(ListServicesInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cluster != nil && that1.Cluster != nil {
		if *this.Cluster != *that1.Cluster {
			return false
		}
	} else if this.Cluster != nil {
		return false
	} else if that1.Cluster != nil {
		return false
	}
	if this.MaxResults != nil && that1.MaxResults != nil {
		if *this.MaxResults != *that1.MaxResults {
			return false
		}
	} else if this.MaxResults != nil {
		return false
	} else if that1.MaxResults != nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListServicesOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListServicesOutput)
	if !ok {
		that2, ok := that.(ListServicesOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if len(this.ServiceArns) != len(that1.ServiceArns) {
		return false
	}
	for i := range this.ServiceArns {
		if this.ServiceArns[i] != that1.ServiceArns[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListTasksInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListTasksInput)
	if !ok {
		that2, ok := that.(ListTasksInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cluster != nil && that1.Cluster != nil {
		if *this.Cluster != *that1.Cluster {
			return false
		}
	} else if this.Cluster != nil {
		return false
	} else if that1.Cluster != nil {
		return false
	}
	if this.ContainerInstance != nil && that1.ContainerInstance != nil {
		if *this.ContainerInstance != *that1.ContainerInstance {
			return false
		}
	} else if this.ContainerInstance != nil {
		return false
	} else if that1.ContainerInstance != nil {
		return false
	}
	if this.DesiredStatus != nil && that1.DesiredStatus != nil {
		if *this.DesiredStatus != *that1.DesiredStatus {
			return false
		}
	} else if this.DesiredStatus != nil {
		return false
	} else if that1.DesiredStatus != nil {
		return false
	}
	if this.Family != nil && that1.Family != nil {
		if *this.Family != *that1.Family {
			return false
		}
	} else if this.Family != nil {
		return false
	} else if that1.Family != nil {
		return false
	}
	if this.MaxResults != nil && that1.MaxResults != nil {
		if *this.MaxResults != *that1.MaxResults {
			return false
		}
	} else if this.MaxResults != nil {
		return false
	} else if that1.MaxResults != nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if this.ServiceName != nil && that1.ServiceName != nil {
		if *this.ServiceName != *that1.ServiceName {
			return false
		}
	} else if this.ServiceName != nil {
		return false
	} else if that1.ServiceName != nil {
		return false
	}
	if this.StartedBy != nil && that1.StartedBy != nil {
		if *this.StartedBy != *that1.StartedBy {
			return false
		}
	} else if this.StartedBy != nil {
		return false
	} else if that1.StartedBy != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListTasksOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListTasksOutput)
	if !ok {
		that2, ok := that.(ListTasksOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if len(this.TaskArns) != len(that1.TaskArns) {
		return false
	}
	for i := range this.TaskArns {
		if this.TaskArns[i] != that1.TaskArns[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LoadBalancer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoadBalancer)
	if !ok {
		that2, ok := that.(LoadBalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainerName != nil && that1.ContainerName != nil {
		if *this.ContainerName != *that1.ContainerName {
			return false
		}
	} else if this.ContainerName != nil {
		return false
	} else if that1.ContainerName != nil {
		return false
	}
	if this.ContainerPort != nil && that1.ContainerPort != nil {
		if *this.ContainerPort != *that1.ContainerPort {
			return false
		}
	} else if this.ContainerPort != nil {
		return false
	} else if that1.ContainerPort != nil {
		return false
	}
	if this.LoadBalancerName != nil && that1.LoadBalancerName != nil {
		if *this.LoadBalancerName != *that1.LoadBalancerName {
			return false
		}
	} else if this.LoadBalancerName != nil {
		return false
	} else if that1.LoadBalancerName != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NetworkBinding) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NetworkBinding)
	if !ok {
		that2, ok := that.(NetworkBinding)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BindIP != nil && that1.BindIP != nil {
		if *this.BindIP != *that1.BindIP {
			return false
		}
	} else if this.BindIP != nil {
		return false
	} else if that1.BindIP != nil {
		return false
	}
	if this.ContainerPort != nil && that1.ContainerPort != nil {
		if *this.ContainerPort != *that1.ContainerPort {
			return false
		}
	} else if this.ContainerPort != nil {
		return false
	} else if that1.ContainerPort != nil {
		return false
	}
	if this.HostPort != nil && that1.HostPort != nil {
		if *this.HostPort != *that1.HostPort {
			return false
		}
	} else if this.HostPort != nil {
		return false
	} else if that1.HostPort != nil {
		return false
	}
	if this.Protocol != nil && that1.Protocol != nil {
		if *this.Protocol != *that1.Protocol {
			return false
		}
	} else if this.Protocol != nil {
		return false
	} else if that1.Protocol != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Resource) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Resource)
	if !ok {
		that2, ok := that.(Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DoubleValue != nil && that1.DoubleValue != nil {
		if *this.DoubleValue != *that1.DoubleValue {
			return false
		}
	} else if this.DoubleValue != nil {
		return false
	} else if that1.DoubleValue != nil {
		return false
	}
	if this.IntegerValue != nil && that1.IntegerValue != nil {
		if *this.IntegerValue != *that1.IntegerValue {
			return false
		}
	} else if this.IntegerValue != nil {
		return false
	} else if that1.IntegerValue != nil {
		return false
	}
	if this.LongValue != nil && that1.LongValue != nil {
		if *this.LongValue != *that1.LongValue {
			return false
		}
	} else if this.LongValue != nil {
		return false
	} else if that1.LongValue != nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if len(this.StringSetValue) != len(that1.StringSetValue) {
		return false
	}
	for i := range this.StringSetValue {
		if this.StringSetValue[i] != that1.StringSetValue[i] {
			return false
		}
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return false
		}
	} else if this.Type != nil {
		return false
	} else if that1.Type != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Service) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Service)
	if !ok {
		that2, ok := that.(Service)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ClusterArn != nil && that1.ClusterArn != nil {
		if *this.ClusterArn != *that1.ClusterArn {
			return false
		}
	} else if this.ClusterArn != nil {
		return false
	} else if that1.ClusterArn != nil {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.DeploymentConfiguration.Equal(that1.DeploymentConfiguration) {
		return false
	}
	if len(this.Deployments) != len(that1.Deployments) {
		return false
	}
	for i := range this.Deployments {
		if !this.Deployments[i].Equal(that1.Deployments[i]) {
			return false
		}
	}
	if this.DesiredCount != nil && that1.DesiredCount != nil {
		if *this.DesiredCount != *that1.DesiredCount {
			return false
		}
	} else if this.DesiredCount != nil {
		return false
	} else if that1.DesiredCount != nil {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	if len(this.LoadBalancers) != len(that1.LoadBalancers) {
		return false
	}
	for i := range this.LoadBalancers {
		if !this.LoadBalancers[i].Equal(that1.LoadBalancers[i]) {
			return false
		}
	}
	if this.PendingCount != nil && that1.PendingCount != nil {
		if *this.PendingCount != *that1.PendingCount {
			return false
		}
	} else if this.PendingCount != nil {
		return false
	} else if that1.PendingCount != nil {
		return false
	}
	if this.RoleArn != nil && that1.RoleArn != nil {
		if *this.RoleArn != *that1.RoleArn {
			return false
		}
	} else if this.RoleArn != nil {
		return false
	} else if that1.RoleArn != nil {
		return false
	}
	if this.RunningCount != nil && that1.RunningCount != nil {
		if *this.RunningCount != *that1.RunningCount {
			return false
		}
	} else if this.RunningCount != nil {
		return false
	} else if that1.RunningCount != nil {
		return false
	}
	if this.ServiceArn != nil && that1.ServiceArn != nil {
		if *this.ServiceArn != *that1.ServiceArn {
			return false
		}
	} else if this.ServiceArn != nil {
		return false
	} else if that1.ServiceArn != nil {
		return false
	}
	if this.ServiceName != nil && that1.ServiceName != nil {
		if *this.ServiceName != *that1.ServiceName {
			return false
		}
	} else if this.ServiceName != nil {
		return false
	} else if that1.ServiceName != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if this.TaskDefinition != nil && that1.TaskDefinition != nil {
		if *this.TaskDefinition != *that1.TaskDefinition {
			return false
		}
	} else if this.TaskDefinition != nil {
		return false
	} else if that1.TaskDefinition != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServiceEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceEvent)
	if !ok {
		that2, ok := that.(ServiceEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if this.Message != nil && that1.Message != nil {
		if *this.Message != *that1.Message {
			return false
		}
	} else if this.Message != nil {
		return false
	} else if that1.Message != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ClusterArn != nil && that1.ClusterArn != nil {
		if *this.ClusterArn != *that1.ClusterArn {
			return false
		}
	} else if this.ClusterArn != nil {
		return false
	} else if that1.ClusterArn != nil {
		return false
	}
	if this.ContainerInstanceArn != nil && that1.ContainerInstanceArn != nil {
		if *this.ContainerInstanceArn != *that1.ContainerInstanceArn {
			return false
		}
	} else if this.ContainerInstanceArn != nil {
		return false
	} else if that1.ContainerInstanceArn != nil {
		return false
	}
	if len(this.Containers) != len(that1.Containers) {
		return false
	}
	for i := range this.Containers {
		if !this.Containers[i].Equal(that1.Containers[i]) {
			return false
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.DesiredStatus != nil && that1.DesiredStatus != nil {
		if *this.DesiredStatus != *that1.DesiredStatus {
			return false
		}
	} else if this.DesiredStatus != nil {
		return false
	} else if that1.DesiredStatus != nil {
		return false
	}
	if this.LastStatus != nil && that1.LastStatus != nil {
		if *this.LastStatus != *that1.LastStatus {
			return false
		}
	} else if this.LastStatus != nil {
		return false
	} else if that1.LastStatus != nil {
		return false
	}
	if !this.Overrides.Equal(that1.Overrides) {
		return false
	}
	if !this.StartedAt.Equal(that1.StartedAt) {
		return false
	}
	if this.StartedBy != nil && that1.StartedBy != nil {
		if *this.StartedBy != *that1.StartedBy {
			return false
		}
	} else if this.StartedBy != nil {
		return false
	} else if that1.StartedBy != nil {
		return false
	}
	if !this.StoppedAt.Equal(that1.StoppedAt) {
		return false
	}
	if this.StoppedReason != nil && that1.StoppedReason != nil {
		if *this.StoppedReason != *that1.StoppedReason {
			return false
		}
	} else if this.StoppedReason != nil {
		return false
	} else if that1.StoppedReason != nil {
		return false
	}
	if this.TaskArn != nil && that1.TaskArn != nil {
		if *this.TaskArn != *that1.TaskArn {
			return false
		}
	} else if this.TaskArn != nil {
		return false
	} else if that1.TaskArn != nil {
		return false
	}
	if this.TaskDefinitionArn != nil && that1.TaskDefinitionArn != nil {
		if *this.TaskDefinitionArn != *that1.TaskDefinitionArn {
			return false
		}
	} else if this.TaskDefinitionArn != nil {
		return false
	} else if that1.TaskDefinitionArn != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TaskOverride) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskOverride)
	if !ok {
		that2, ok := that.(TaskOverride)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ContainerOverrides) != len(that1.ContainerOverrides) {
		return false
	}
	for i := range this.ContainerOverrides {
		if !this.ContainerOverrides[i].Equal(that1.ContainerOverrides[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VersionInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VersionInfo)
	if !ok {
		that2, ok := that.(VersionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AgentHash != nil && that1.AgentHash != nil {
		if *this.AgentHash != *that1.AgentHash {
			return false
		}
	} else if this.AgentHash != nil {
		return false
	} else if that1.AgentHash != nil {
		return false
	}
	if this.AgentVersion != nil && that1.AgentVersion != nil {
		if *this.AgentVersion != *that1.AgentVersion {
			return false
		}
	} else if this.AgentVersion != nil {
		return false
	} else if that1.AgentVersion != nil {
		return false
	}
	if this.DockerVersion != nil && that1.DockerVersion != nil {
		if *this.DockerVersion != *that1.DockerVersion {
			return false
		}
	} else if this.DockerVersion != nil {
		return false
	} else if that1.DockerVersion != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type AttributeGetter interface {
	GetAttribute() *Attribute
}

var GraphQLAttributeType *github_com_graphql_go_graphql.Object

type ContainerGetter interface {
	GetContainer() *Container
}

var GraphQLContainerType *github_com_graphql_go_graphql.Object

type ContainerInstanceGetter interface {
	GetContainerInstance() *ContainerInstance
}

var GraphQLContainerInstanceType *github_com_graphql_go_graphql.Object

type ContainerOverrideGetter interface {
	GetContainerOverride() *ContainerOverride
}

var GraphQLContainerOverrideType *github_com_graphql_go_graphql.Object

type DeploymentGetter interface {
	GetDeployment() *Deployment
}

var GraphQLDeploymentType *github_com_graphql_go_graphql.Object

type DeploymentConfigurationGetter interface {
	GetDeploymentConfiguration() *DeploymentConfiguration
}

var GraphQLDeploymentConfigurationType *github_com_graphql_go_graphql.Object

type DescribeContainerInstancesInputGetter interface {
	GetDescribeContainerInstancesInput() *DescribeContainerInstancesInput
}

var GraphQLDescribeContainerInstancesInputType *github_com_graphql_go_graphql.Object

type DescribeContainerInstancesOutputGetter interface {
	GetDescribeContainerInstancesOutput() *DescribeContainerInstancesOutput
}

var GraphQLDescribeContainerInstancesOutputType *github_com_graphql_go_graphql.Object

type DescribeServicesInputGetter interface {
	GetDescribeServicesInput() *DescribeServicesInput
}

var GraphQLDescribeServicesInputType *github_com_graphql_go_graphql.Object

type DescribeServicesOutputGetter interface {
	GetDescribeServicesOutput() *DescribeServicesOutput
}

var GraphQLDescribeServicesOutputType *github_com_graphql_go_graphql.Object

type DescribeTasksInputGetter interface {
	GetDescribeTasksInput() *DescribeTasksInput
}

var GraphQLDescribeTasksInputType *github_com_graphql_go_graphql.Object

type DescribeTasksOutputGetter interface {
	GetDescribeTasksOutput() *DescribeTasksOutput
}

var GraphQLDescribeTasksOutputType *github_com_graphql_go_graphql.Object

type FailureGetter interface {
	GetFailure() *Failure
}

var GraphQLFailureType *github_com_graphql_go_graphql.Object

type KeyValuePairGetter interface {
	GetKeyValuePair() *KeyValuePair
}

var GraphQLKeyValuePairType *github_com_graphql_go_graphql.Object

type ListClustersInputGetter interface {
	GetListClustersInput() *ListClustersInput
}

var GraphQLListClustersInputType *github_com_graphql_go_graphql.Object

type ListClustersOutputGetter interface {
	GetListClustersOutput() *ListClustersOutput
}

var GraphQLListClustersOutputType *github_com_graphql_go_graphql.Object

type ListContainerInstancesInputGetter interface {
	GetListContainerInstancesInput() *ListContainerInstancesInput
}

var GraphQLListContainerInstancesInputType *github_com_graphql_go_graphql.Object

type ListContainerInstancesOutputGetter interface {
	GetListContainerInstancesOutput() *ListContainerInstancesOutput
}

var GraphQLListContainerInstancesOutputType *github_com_graphql_go_graphql.Object

type ListServicesInputGetter interface {
	GetListServicesInput() *ListServicesInput
}

var GraphQLListServicesInputType *github_com_graphql_go_graphql.Object

type ListServicesOutputGetter interface {
	GetListServicesOutput() *ListServicesOutput
}

var GraphQLListServicesOutputType *github_com_graphql_go_graphql.Object

type ListTasksInputGetter interface {
	GetListTasksInput() *ListTasksInput
}

var GraphQLListTasksInputType *github_com_graphql_go_graphql.Object

type ListTasksOutputGetter interface {
	GetListTasksOutput() *ListTasksOutput
}

var GraphQLListTasksOutputType *github_com_graphql_go_graphql.Object

type LoadBalancerGetter interface {
	GetLoadBalancer() *LoadBalancer
}

var GraphQLLoadBalancerType *github_com_graphql_go_graphql.Object

type NetworkBindingGetter interface {
	GetNetworkBinding() *NetworkBinding
}

var GraphQLNetworkBindingType *github_com_graphql_go_graphql.Object

type ResourceGetter interface {
	GetResource() *Resource
}

var GraphQLResourceType *github_com_graphql_go_graphql.Object

type ServiceGetter interface {
	GetService() *Service
}

var GraphQLServiceType *github_com_graphql_go_graphql.Object

type ServiceEventGetter interface {
	GetServiceEvent() *ServiceEvent
}

var GraphQLServiceEventType *github_com_graphql_go_graphql.Object

type TaskGetter interface {
	GetTask() *Task
}

var GraphQLTaskType *github_com_graphql_go_graphql.Object

type TaskOverrideGetter interface {
	GetTaskOverride() *TaskOverride
}

var GraphQLTaskOverrideType *github_com_graphql_go_graphql.Object

type VersionInfoGetter interface {
	GetVersionInfo() *VersionInfo
}

var GraphQLVersionInfoType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLAttributeType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsAttribute",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Attribute)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(AttributeGetter)
						if ok {
							face := inter.GetAttribute()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"Value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Attribute)
						if ok {
							if obj.Value == nil {
								return nil, nil
							}
							return obj.GetValue(), nil
						}
						inter, ok := p.Source.(AttributeGetter)
						if ok {
							face := inter.GetAttribute()
							if face == nil {
								return nil, nil
							}
							if face.Value == nil {
								return nil, nil
							}
							return face.GetValue(), nil
						}
						return nil, fmt.Errorf("field Value not resolved")
					},
				},
			}
		}),
	})
	GraphQLContainerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsContainer",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ContainerArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Container)
						if ok {
							if obj.ContainerArn == nil {
								return nil, nil
							}
							return obj.GetContainerArn(), nil
						}
						inter, ok := p.Source.(ContainerGetter)
						if ok {
							face := inter.GetContainer()
							if face == nil {
								return nil, nil
							}
							if face.ContainerArn == nil {
								return nil, nil
							}
							return face.GetContainerArn(), nil
						}
						return nil, fmt.Errorf("field ContainerArn not resolved")
					},
				},
				"ExitCode": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Container)
						if ok {
							if obj.ExitCode == nil {
								return nil, nil
							}
							return obj.GetExitCode(), nil
						}
						inter, ok := p.Source.(ContainerGetter)
						if ok {
							face := inter.GetContainer()
							if face == nil {
								return nil, nil
							}
							if face.ExitCode == nil {
								return nil, nil
							}
							return face.GetExitCode(), nil
						}
						return nil, fmt.Errorf("field ExitCode not resolved")
					},
				},
				"LastStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Container)
						if ok {
							if obj.LastStatus == nil {
								return nil, nil
							}
							return obj.GetLastStatus(), nil
						}
						inter, ok := p.Source.(ContainerGetter)
						if ok {
							face := inter.GetContainer()
							if face == nil {
								return nil, nil
							}
							if face.LastStatus == nil {
								return nil, nil
							}
							return face.GetLastStatus(), nil
						}
						return nil, fmt.Errorf("field LastStatus not resolved")
					},
				},
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Container)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(ContainerGetter)
						if ok {
							face := inter.GetContainer()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"NetworkBindings": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLNetworkBindingType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Container)
						if ok {
							return obj.NetworkBindings, nil
						}
						inter, ok := p.Source.(ContainerGetter)
						if ok {
							face := inter.GetContainer()
							if face == nil {
								return nil, nil
							}
							return face.NetworkBindings, nil
						}
						return nil, fmt.Errorf("field NetworkBindings not resolved")
					},
				},
				"Reason": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Container)
						if ok {
							if obj.Reason == nil {
								return nil, nil
							}
							return obj.GetReason(), nil
						}
						inter, ok := p.Source.(ContainerGetter)
						if ok {
							face := inter.GetContainer()
							if face == nil {
								return nil, nil
							}
							if face.Reason == nil {
								return nil, nil
							}
							return face.GetReason(), nil
						}
						return nil, fmt.Errorf("field Reason not resolved")
					},
				},
				"TaskArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Container)
						if ok {
							if obj.TaskArn == nil {
								return nil, nil
							}
							return obj.GetTaskArn(), nil
						}
						inter, ok := p.Source.(ContainerGetter)
						if ok {
							face := inter.GetContainer()
							if face == nil {
								return nil, nil
							}
							if face.TaskArn == nil {
								return nil, nil
							}
							return face.GetTaskArn(), nil
						}
						return nil, fmt.Errorf("field TaskArn not resolved")
					},
				},
			}
		}),
	})
	GraphQLContainerInstanceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsContainerInstance",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AgentConnected": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.AgentConnected == nil {
								return nil, nil
							}
							return obj.GetAgentConnected(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.AgentConnected == nil {
								return nil, nil
							}
							return face.GetAgentConnected(), nil
						}
						return nil, fmt.Errorf("field AgentConnected not resolved")
					},
				},
				"AgentUpdateStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.AgentUpdateStatus == nil {
								return nil, nil
							}
							return obj.GetAgentUpdateStatus(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.AgentUpdateStatus == nil {
								return nil, nil
							}
							return face.GetAgentUpdateStatus(), nil
						}
						return nil, fmt.Errorf("field AgentUpdateStatus not resolved")
					},
				},
				"Attributes": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLAttributeType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							return obj.Attributes, nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							return face.Attributes, nil
						}
						return nil, fmt.Errorf("field Attributes not resolved")
					},
				},
				"ContainerInstanceArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.ContainerInstanceArn == nil {
								return nil, nil
							}
							return obj.GetContainerInstanceArn(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.ContainerInstanceArn == nil {
								return nil, nil
							}
							return face.GetContainerInstanceArn(), nil
						}
						return nil, fmt.Errorf("field ContainerInstanceArn not resolved")
					},
				},
				"Ec2InstanceId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.Ec2InstanceId == nil {
								return nil, nil
							}
							return obj.GetEc2InstanceId(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.Ec2InstanceId == nil {
								return nil, nil
							}
							return face.GetEc2InstanceId(), nil
						}
						return nil, fmt.Errorf("field Ec2InstanceId not resolved")
					},
				},
				"PendingTasksCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.PendingTasksCount == nil {
								return nil, nil
							}
							return obj.GetPendingTasksCount(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.PendingTasksCount == nil {
								return nil, nil
							}
							return face.GetPendingTasksCount(), nil
						}
						return nil, fmt.Errorf("field PendingTasksCount not resolved")
					},
				},
				"RegisteredResources": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLResourceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							return obj.RegisteredResources, nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							return face.RegisteredResources, nil
						}
						return nil, fmt.Errorf("field RegisteredResources not resolved")
					},
				},
				"RemainingResources": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLResourceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							return obj.RemainingResources, nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							return face.RemainingResources, nil
						}
						return nil, fmt.Errorf("field RemainingResources not resolved")
					},
				},
				"RunningTasksCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.RunningTasksCount == nil {
								return nil, nil
							}
							return obj.GetRunningTasksCount(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.RunningTasksCount == nil {
								return nil, nil
							}
							return face.GetRunningTasksCount(), nil
						}
						return nil, fmt.Errorf("field RunningTasksCount not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
				"VersionInfo": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLVersionInfoType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.VersionInfo == nil {
								return nil, nil
							}
							return obj.GetVersionInfo(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.VersionInfo == nil {
								return nil, nil
							}
							return face.GetVersionInfo(), nil
						}
						return nil, fmt.Errorf("field VersionInfo not resolved")
					},
				},
			}
		}),
	})
	GraphQLContainerOverrideType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsContainerOverride",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Command": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerOverride)
						if ok {
							return obj.Command, nil
						}
						inter, ok := p.Source.(ContainerOverrideGetter)
						if ok {
							face := inter.GetContainerOverride()
							if face == nil {
								return nil, nil
							}
							return face.Command, nil
						}
						return nil, fmt.Errorf("field Command not resolved")
					},
				},
				"Environment": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLKeyValuePairType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerOverride)
						if ok {
							return obj.Environment, nil
						}
						inter, ok := p.Source.(ContainerOverrideGetter)
						if ok {
							face := inter.GetContainerOverride()
							if face == nil {
								return nil, nil
							}
							return face.Environment, nil
						}
						return nil, fmt.Errorf("field Environment not resolved")
					},
				},
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerOverride)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(ContainerOverrideGetter)
						if ok {
							face := inter.GetContainerOverride()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
			}
		}),
	})
	GraphQLDeploymentType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDeployment",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"CreatedAt": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Deployment)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(DeploymentGetter)
						if ok {
							face := inter.GetDeployment()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field CreatedAt not resolved")
					},
				},
				"DesiredCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Deployment)
						if ok {
							if obj.DesiredCount == nil {
								return nil, nil
							}
							return obj.GetDesiredCount(), nil
						}
						inter, ok := p.Source.(DeploymentGetter)
						if ok {
							face := inter.GetDeployment()
							if face == nil {
								return nil, nil
							}
							if face.DesiredCount == nil {
								return nil, nil
							}
							return face.GetDesiredCount(), nil
						}
						return nil, fmt.Errorf("field DesiredCount not resolved")
					},
				},
				"Id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Deployment)
						if ok {
							if obj.Id == nil {
								return nil, nil
							}
							return obj.GetId(), nil
						}
						inter, ok := p.Source.(DeploymentGetter)
						if ok {
							face := inter.GetDeployment()
							if face == nil {
								return nil, nil
							}
							if face.Id == nil {
								return nil, nil
							}
							return face.GetId(), nil
						}
						return nil, fmt.Errorf("field Id not resolved")
					},
				},
				"PendingCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Deployment)
						if ok {
							if obj.PendingCount == nil {
								return nil, nil
							}
							return obj.GetPendingCount(), nil
						}
						inter, ok := p.Source.(DeploymentGetter)
						if ok {
							face := inter.GetDeployment()
							if face == nil {
								return nil, nil
							}
							if face.PendingCount == nil {
								return nil, nil
							}
							return face.GetPendingCount(), nil
						}
						return nil, fmt.Errorf("field PendingCount not resolved")
					},
				},
				"RunningCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Deployment)
						if ok {
							if obj.RunningCount == nil {
								return nil, nil
							}
							return obj.GetRunningCount(), nil
						}
						inter, ok := p.Source.(DeploymentGetter)
						if ok {
							face := inter.GetDeployment()
							if face == nil {
								return nil, nil
							}
							if face.RunningCount == nil {
								return nil, nil
							}
							return face.GetRunningCount(), nil
						}
						return nil, fmt.Errorf("field RunningCount not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Deployment)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(DeploymentGetter)
						if ok {
							face := inter.GetDeployment()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
				"TaskDefinition": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Deployment)
						if ok {
							if obj.TaskDefinition == nil {
								return nil, nil
							}
							return obj.GetTaskDefinition(), nil
						}
						inter, ok := p.Source.(DeploymentGetter)
						if ok {
							face := inter.GetDeployment()
							if face == nil {
								return nil, nil
							}
							if face.TaskDefinition == nil {
								return nil, nil
							}
							return face.GetTaskDefinition(), nil
						}
						return nil, fmt.Errorf("field TaskDefinition not resolved")
					},
				},
				"UpdatedAt": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Deployment)
						if ok {
							if obj.UpdatedAt == nil {
								return nil, nil
							}
							return obj.GetUpdatedAt(), nil
						}
						inter, ok := p.Source.(DeploymentGetter)
						if ok {
							face := inter.GetDeployment()
							if face == nil {
								return nil, nil
							}
							if face.UpdatedAt == nil {
								return nil, nil
							}
							return face.GetUpdatedAt(), nil
						}
						return nil, fmt.Errorf("field UpdatedAt not resolved")
					},
				},
			}
		}),
	})
	GraphQLDeploymentConfigurationType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDeploymentConfiguration",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"MaximumPercent": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DeploymentConfiguration)
						if ok {
							if obj.MaximumPercent == nil {
								return nil, nil
							}
							return obj.GetMaximumPercent(), nil
						}
						inter, ok := p.Source.(DeploymentConfigurationGetter)
						if ok {
							face := inter.GetDeploymentConfiguration()
							if face == nil {
								return nil, nil
							}
							if face.MaximumPercent == nil {
								return nil, nil
							}
							return face.GetMaximumPercent(), nil
						}
						return nil, fmt.Errorf("field MaximumPercent not resolved")
					},
				},
				"MinimumHealthyPercent": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DeploymentConfiguration)
						if ok {
							if obj.MinimumHealthyPercent == nil {
								return nil, nil
							}
							return obj.GetMinimumHealthyPercent(), nil
						}
						inter, ok := p.Source.(DeploymentConfigurationGetter)
						if ok {
							face := inter.GetDeploymentConfiguration()
							if face == nil {
								return nil, nil
							}
							if face.MinimumHealthyPercent == nil {
								return nil, nil
							}
							return face.GetMinimumHealthyPercent(), nil
						}
						return nil, fmt.Errorf("field MinimumHealthyPercent not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeContainerInstancesInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDescribeContainerInstancesInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Cluster": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeContainerInstancesInput)
						if ok {
							if obj.Cluster == nil {
								return nil, nil
							}
							return obj.GetCluster(), nil
						}
						inter, ok := p.Source.(DescribeContainerInstancesInputGetter)
						if ok {
							face := inter.GetDescribeContainerInstancesInput()
							if face == nil {
								return nil, nil
							}
							if face.Cluster == nil {
								return nil, nil
							}
							return face.GetCluster(), nil
						}
						return nil, fmt.Errorf("field Cluster not resolved")
					},
				},
				"ContainerInstances": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeContainerInstancesInput)
						if ok {
							return obj.ContainerInstances, nil
						}
						inter, ok := p.Source.(DescribeContainerInstancesInputGetter)
						if ok {
							face := inter.GetDescribeContainerInstancesInput()
							if face == nil {
								return nil, nil
							}
							return face.ContainerInstances, nil
						}
						return nil, fmt.Errorf("field ContainerInstances not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeContainerInstancesOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDescribeContainerInstancesOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ContainerInstances": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLContainerInstanceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeContainerInstancesOutput)
						if ok {
							return obj.ContainerInstances, nil
						}
						inter, ok := p.Source.(DescribeContainerInstancesOutputGetter)
						if ok {
							face := inter.GetDescribeContainerInstancesOutput()
							if face == nil {
								return nil, nil
							}
							return face.ContainerInstances, nil
						}
						return nil, fmt.Errorf("field ContainerInstances not resolved")
					},
				},
				"Failures": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLFailureType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeContainerInstancesOutput)
						if ok {
							return obj.Failures, nil
						}
						inter, ok := p.Source.(DescribeContainerInstancesOutputGetter)
						if ok {
							face := inter.GetDescribeContainerInstancesOutput()
							if face == nil {
								return nil, nil
							}
							return face.Failures, nil
						}
						return nil, fmt.Errorf("field Failures not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeServicesInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDescribeServicesInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Cluster": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeServicesInput)
						if ok {
							if obj.Cluster == nil {
								return nil, nil
							}
							return obj.GetCluster(), nil
						}
						inter, ok := p.Source.(DescribeServicesInputGetter)
						if ok {
							face := inter.GetDescribeServicesInput()
							if face == nil {
								return nil, nil
							}
							if face.Cluster == nil {
								return nil, nil
							}
							return face.GetCluster(), nil
						}
						return nil, fmt.Errorf("field Cluster not resolved")
					},
				},
				"Services": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeServicesInput)
						if ok {
							return obj.Services, nil
						}
						inter, ok := p.Source.(DescribeServicesInputGetter)
						if ok {
							face := inter.GetDescribeServicesInput()
							if face == nil {
								return nil, nil
							}
							return face.Services, nil
						}
						return nil, fmt.Errorf("field Services not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeServicesOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDescribeServicesOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Failures": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLFailureType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeServicesOutput)
						if ok {
							return obj.Failures, nil
						}
						inter, ok := p.Source.(DescribeServicesOutputGetter)
						if ok {
							face := inter.GetDescribeServicesOutput()
							if face == nil {
								return nil, nil
							}
							return face.Failures, nil
						}
						return nil, fmt.Errorf("field Failures not resolved")
					},
				},
				"Services": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLServiceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeServicesOutput)
						if ok {
							return obj.Services, nil
						}
						inter, ok := p.Source.(DescribeServicesOutputGetter)
						if ok {
							face := inter.GetDescribeServicesOutput()
							if face == nil {
								return nil, nil
							}
							return face.Services, nil
						}
						return nil, fmt.Errorf("field Services not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeTasksInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDescribeTasksInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Cluster": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeTasksInput)
						if ok {
							if obj.Cluster == nil {
								return nil, nil
							}
							return obj.GetCluster(), nil
						}
						inter, ok := p.Source.(DescribeTasksInputGetter)
						if ok {
							face := inter.GetDescribeTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.Cluster == nil {
								return nil, nil
							}
							return face.GetCluster(), nil
						}
						return nil, fmt.Errorf("field Cluster not resolved")
					},
				},
				"Tasks": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeTasksInput)
						if ok {
							return obj.Tasks, nil
						}
						inter, ok := p.Source.(DescribeTasksInputGetter)
						if ok {
							face := inter.GetDescribeTasksInput()
							if face == nil {
								return nil, nil
							}
							return face.Tasks, nil
						}
						return nil, fmt.Errorf("field Tasks not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeTasksOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDescribeTasksOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Failures": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLFailureType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeTasksOutput)
						if ok {
							return obj.Failures, nil
						}
						inter, ok := p.Source.(DescribeTasksOutputGetter)
						if ok {
							face := inter.GetDescribeTasksOutput()
							if face == nil {
								return nil, nil
							}
							return face.Failures, nil
						}
						return nil, fmt.Errorf("field Failures not resolved")
					},
				},
				"Tasks": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLTaskType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeTasksOutput)
						if ok {
							return obj.Tasks, nil
						}
						inter, ok := p.Source.(DescribeTasksOutputGetter)
						if ok {
							face := inter.GetDescribeTasksOutput()
							if face == nil {
								return nil, nil
							}
							return face.Tasks, nil
						}
						return nil, fmt.Errorf("field Tasks not resolved")
					},
				},
			}
		}),
	})
	GraphQLFailureType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsFailure",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Arn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Failure)
						if ok {
							if obj.Arn == nil {
								return nil, nil
							}
							return obj.GetArn(), nil
						}
						inter, ok := p.Source.(FailureGetter)
						if ok {
							face := inter.GetFailure()
							if face == nil {
								return nil, nil
							}
							if face.Arn == nil {
								return nil, nil
							}
							return face.GetArn(), nil
						}
						return nil, fmt.Errorf("field Arn not resolved")
					},
				},
				"Reason": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Failure)
						if ok {
							if obj.Reason == nil {
								return nil, nil
							}
							return obj.GetReason(), nil
						}
						inter, ok := p.Source.(FailureGetter)
						if ok {
							face := inter.GetFailure()
							if face == nil {
								return nil, nil
							}
							if face.Reason == nil {
								return nil, nil
							}
							return face.GetReason(), nil
						}
						return nil, fmt.Errorf("field Reason not resolved")
					},
				},
			}
		}),
	})
	GraphQLKeyValuePairType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsKeyValuePair",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*KeyValuePair)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(KeyValuePairGetter)
						if ok {
							face := inter.GetKeyValuePair()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"Value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*KeyValuePair)
						if ok {
							if obj.Value == nil {
								return nil, nil
							}
							return obj.GetValue(), nil
						}
						inter, ok := p.Source.(KeyValuePairGetter)
						if ok {
							face := inter.GetKeyValuePair()
							if face == nil {
								return nil, nil
							}
							if face.Value == nil {
								return nil, nil
							}
							return face.GetValue(), nil
						}
						return nil, fmt.Errorf("field Value not resolved")
					},
				},
			}
		}),
	})
	GraphQLListClustersInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListClustersInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"MaxResults": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListClustersInput)
						if ok {
							if obj.MaxResults == nil {
								return nil, nil
							}
							return obj.GetMaxResults(), nil
						}
						inter, ok := p.Source.(ListClustersInputGetter)
						if ok {
							face := inter.GetListClustersInput()
							if face == nil {
								return nil, nil
							}
							if face.MaxResults == nil {
								return nil, nil
							}
							return face.GetMaxResults(), nil
						}
						return nil, fmt.Errorf("field MaxResults not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListClustersInput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListClustersInputGetter)
						if ok {
							face := inter.GetListClustersInput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
			}
		}),
	})
	GraphQLListClustersOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListClustersOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ClusterArns": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListClustersOutput)
						if ok {
							return obj.ClusterArns, nil
						}
						inter, ok := p.Source.(ListClustersOutputGetter)
						if ok {
							face := inter.GetListClustersOutput()
							if face == nil {
								return nil, nil
							}
							return face.ClusterArns, nil
						}
						return nil, fmt.Errorf("field ClusterArns not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListClustersOutput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListClustersOutputGetter)
						if ok {
							face := inter.GetListClustersOutput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
			}
		}),
	})
	GraphQLListContainerInstancesInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListContainerInstancesInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Cluster": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListContainerInstancesInput)
						if ok {
							if obj.Cluster == nil {
								return nil, nil
							}
							return obj.GetCluster(), nil
						}
						inter, ok := p.Source.(ListContainerInstancesInputGetter)
						if ok {
							face := inter.GetListContainerInstancesInput()
							if face == nil {
								return nil, nil
							}
							if face.Cluster == nil {
								return nil, nil
							}
							return face.GetCluster(), nil
						}
						return nil, fmt.Errorf("field Cluster not resolved")
					},
				},
				"MaxResults": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListContainerInstancesInput)
						if ok {
							if obj.MaxResults == nil {
								return nil, nil
							}
							return obj.GetMaxResults(), nil
						}
						inter, ok := p.Source.(ListContainerInstancesInputGetter)
						if ok {
							face := inter.GetListContainerInstancesInput()
							if face == nil {
								return nil, nil
							}
							if face.MaxResults == nil {
								return nil, nil
							}
							return face.GetMaxResults(), nil
						}
						return nil, fmt.Errorf("field MaxResults not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListContainerInstancesInput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListContainerInstancesInputGetter)
						if ok {
							face := inter.GetListContainerInstancesInput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
			}
		}),
	})
	GraphQLListContainerInstancesOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListContainerInstancesOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ContainerInstanceArns": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListContainerInstancesOutput)
						if ok {
							return obj.ContainerInstanceArns, nil
						}
						inter, ok := p.Source.(ListContainerInstancesOutputGetter)
						if ok {
							face := inter.GetListContainerInstancesOutput()
							if face == nil {
								return nil, nil
							}
							return face.ContainerInstanceArns, nil
						}
						return nil, fmt.Errorf("field ContainerInstanceArns not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListContainerInstancesOutput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListContainerInstancesOutputGetter)
						if ok {
							face := inter.GetListContainerInstancesOutput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
			}
		}),
	})
	GraphQLListServicesInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListServicesInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Cluster": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListServicesInput)
						if ok {
							if obj.Cluster == nil {
								return nil, nil
							}
							return obj.GetCluster(), nil
						}
						inter, ok := p.Source.(ListServicesInputGetter)
						if ok {
							face := inter.GetListServicesInput()
							if face == nil {
								return nil, nil
							}
							if face.Cluster == nil {
								return nil, nil
							}
							return face.GetCluster(), nil
						}
						return nil, fmt.Errorf("field Cluster not resolved")
					},
				},
				"MaxResults": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListServicesInput)
						if ok {
							if obj.MaxResults == nil {
								return nil, nil
							}
							return obj.GetMaxResults(), nil
						}
						inter, ok := p.Source.(ListServicesInputGetter)
						if ok {
							face := inter.GetListServicesInput()
							if face == nil {
								return nil, nil
							}
							if face.MaxResults == nil {
								return nil, nil
							}
							return face.GetMaxResults(), nil
						}
						return nil, fmt.Errorf("field MaxResults not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListServicesInput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListServicesInputGetter)
						if ok {
							face := inter.GetListServicesInput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
			}
		}),
	})
	GraphQLListServicesOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListServicesOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListServicesOutput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListServicesOutputGetter)
						if ok {
							face := inter.GetListServicesOutput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
				"ServiceArns": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListServicesOutput)
						if ok {
							return obj.ServiceArns, nil
						}
						inter, ok := p.Source.(ListServicesOutputGetter)
						if ok {
							face := inter.GetListServicesOutput()
							if face == nil {
								return nil, nil
							}
							return face.ServiceArns, nil
						}
						return nil, fmt.Errorf("field ServiceArns not resolved")
					},
				},
			}
		}),
	})
	GraphQLListTasksInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListTasksInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Cluster": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.Cluster == nil {
								return nil, nil
							}
							return obj.GetCluster(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.Cluster == nil {
								return nil, nil
							}
							return face.GetCluster(), nil
						}
						return nil, fmt.Errorf("field Cluster not resolved")
					},
				},
				"ContainerInstance": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.ContainerInstance == nil {
								return nil, nil
							}
							return obj.GetContainerInstance(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.ContainerInstance == nil {
								return nil, nil
							}
							return face.GetContainerInstance(), nil
						}
						return nil, fmt.Errorf("field ContainerInstance not resolved")
					},
				},
				"DesiredStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.DesiredStatus == nil {
								return nil, nil
							}
							return obj.GetDesiredStatus(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.DesiredStatus == nil {
								return nil, nil
							}
							return face.GetDesiredStatus(), nil
						}
						return nil, fmt.Errorf("field DesiredStatus not resolved")
					},
				},
				"Family": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.Family == nil {
								return nil, nil
							}
							return obj.GetFamily(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.Family == nil {
								return nil, nil
							}
							return face.GetFamily(), nil
						}
						return nil, fmt.Errorf("field Family not resolved")
					},
				},
				"MaxResults": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.MaxResults == nil {
								return nil, nil
							}
							return obj.GetMaxResults(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.MaxResults == nil {
								return nil, nil
							}
							return face.GetMaxResults(), nil
						}
						return nil, fmt.Errorf("field MaxResults not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
				"ServiceName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.ServiceName == nil {
								return nil, nil
							}
							return obj.GetServiceName(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.ServiceName == nil {
								return nil, nil
							}
							return face.GetServiceName(), nil
						}
						return nil, fmt.Errorf("field ServiceName not resolved")
					},
				},
				"StartedBy": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.StartedBy == nil {
								return nil, nil
							}
							return obj.GetStartedBy(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.StartedBy == nil {
								return nil, nil
							}
							return face.GetStartedBy(), nil
						}
						return nil, fmt.Errorf("field StartedBy not resolved")
					},
				},
			}
		}),
	})
	GraphQLListTasksOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListTasksOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksOutput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListTasksOutputGetter)
						if ok {
							face := inter.GetListTasksOutput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
				"TaskArns": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksOutput)
						if ok {
							return obj.TaskArns, nil
						}
						inter, ok := p.Source.(ListTasksOutputGetter)
						if ok {
							face := inter.GetListTasksOutput()
							if face == nil {
								return nil, nil
							}
							return face.TaskArns, nil
						}
						return nil, fmt.Errorf("field TaskArns not resolved")
					},
				},
			}
		}),
	})
	GraphQLLoadBalancerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsLoadBalancer",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ContainerName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancer)
						if ok {
							if obj.ContainerName == nil {
								return nil, nil
							}
							return obj.GetContainerName(), nil
						}
						inter, ok := p.Source.(LoadBalancerGetter)
						if ok {
							face := inter.GetLoadBalancer()
							if face == nil {
								return nil, nil
							}
							if face.ContainerName == nil {
								return nil, nil
							}
							return face.GetContainerName(), nil
						}
						return nil, fmt.Errorf("field ContainerName not resolved")
					},
				},
				"ContainerPort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancer)
						if ok {
							if obj.ContainerPort == nil {
								return nil, nil
							}
							return obj.GetContainerPort(), nil
						}
						inter, ok := p.Source.(LoadBalancerGetter)
						if ok {
							face := inter.GetLoadBalancer()
							if face == nil {
								return nil, nil
							}
							if face.ContainerPort == nil {
								return nil, nil
							}
							return face.GetContainerPort(), nil
						}
						return nil, fmt.Errorf("field ContainerPort not resolved")
					},
				},
				"LoadBalancerName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancer)
						if ok {
							if obj.LoadBalancerName == nil {
								return nil, nil
							}
							return obj.GetLoadBalancerName(), nil
						}
						inter, ok := p.Source.(LoadBalancerGetter)
						if ok {
							face := inter.GetLoadBalancer()
							if face == nil {
								return nil, nil
							}
							if face.LoadBalancerName == nil {
								return nil, nil
							}
							return face.GetLoadBalancerName(), nil
						}
						return nil, fmt.Errorf("field LoadBalancerName not resolved")
					},
				},
			}
		}),
	})
	GraphQLNetworkBindingType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsNetworkBinding",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"BindIP": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*NetworkBinding)
						if ok {
							if obj.BindIP == nil {
								return nil, nil
							}
							return obj.GetBindIP(), nil
						}
						inter, ok := p.Source.(NetworkBindingGetter)
						if ok {
							face := inter.GetNetworkBinding()
							if face == nil {
								return nil, nil
							}
							if face.BindIP == nil {
								return nil, nil
							}
							return face.GetBindIP(), nil
						}
						return nil, fmt.Errorf("field BindIP not resolved")
					},
				},
				"ContainerPort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*NetworkBinding)
						if ok {
							if obj.ContainerPort == nil {
								return nil, nil
							}
							return obj.GetContainerPort(), nil
						}
						inter, ok := p.Source.(NetworkBindingGetter)
						if ok {
							face := inter.GetNetworkBinding()
							if face == nil {
								return nil, nil
							}
							if face.ContainerPort == nil {
								return nil, nil
							}
							return face.GetContainerPort(), nil
						}
						return nil, fmt.Errorf("field ContainerPort not resolved")
					},
				},
				"HostPort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*NetworkBinding)
						if ok {
							if obj.HostPort == nil {
								return nil, nil
							}
							return obj.GetHostPort(), nil
						}
						inter, ok := p.Source.(NetworkBindingGetter)
						if ok {
							face := inter.GetNetworkBinding()
							if face == nil {
								return nil, nil
							}
							if face.HostPort == nil {
								return nil, nil
							}
							return face.GetHostPort(), nil
						}
						return nil, fmt.Errorf("field HostPort not resolved")
					},
				},
				"Protocol": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*NetworkBinding)
						if ok {
							if obj.Protocol == nil {
								return nil, nil
							}
							return obj.GetProtocol(), nil
						}
						inter, ok := p.Source.(NetworkBindingGetter)
						if ok {
							face := inter.GetNetworkBinding()
							if face == nil {
								return nil, nil
							}
							if face.Protocol == nil {
								return nil, nil
							}
							return face.GetProtocol(), nil
						}
						return nil, fmt.Errorf("field Protocol not resolved")
					},
				},
			}
		}),
	})
	GraphQLResourceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsResource",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"DoubleValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.DoubleValue == nil {
								return nil, nil
							}
							return obj.GetDoubleValue(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.DoubleValue == nil {
								return nil, nil
							}
							return face.GetDoubleValue(), nil
						}
						return nil, fmt.Errorf("field DoubleValue not resolved")
					},
				},
				"IntegerValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.IntegerValue == nil {
								return nil, nil
							}
							return obj.GetIntegerValue(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.IntegerValue == nil {
								return nil, nil
							}
							return face.GetIntegerValue(), nil
						}
						return nil, fmt.Errorf("field IntegerValue not resolved")
					},
				},
				"LongValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.LongValue == nil {
								return nil, nil
							}
							return obj.GetLongValue(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.LongValue == nil {
								return nil, nil
							}
							return face.GetLongValue(), nil
						}
						return nil, fmt.Errorf("field LongValue not resolved")
					},
				},
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"StringSetValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							return obj.StringSetValue, nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							return face.StringSetValue, nil
						}
						return nil, fmt.Errorf("field StringSetValue not resolved")
					},
				},
				"Type": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.Type == nil {
								return nil, nil
							}
							return obj.GetType(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.Type == nil {
								return nil, nil
							}
							return face.GetType(), nil
						}
						return nil, fmt.Errorf("field Type not resolved")
					},
				},
			}
		}),
	})
	GraphQLServiceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsService",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ClusterArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.ClusterArn == nil {
								return nil, nil
							}
							return obj.GetClusterArn(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.ClusterArn == nil {
								return nil, nil
							}
							return face.GetClusterArn(), nil
						}
						return nil, fmt.Errorf("field ClusterArn not resolved")
					},
				},
				"CreatedAt": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field CreatedAt not resolved")
					},
				},
				"DeploymentConfiguration": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLDeploymentConfigurationType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.DeploymentConfiguration == nil {
								return nil, nil
							}
							return obj.GetDeploymentConfiguration(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.DeploymentConfiguration == nil {
								return nil, nil
							}
							return face.GetDeploymentConfiguration(), nil
						}
						return nil, fmt.Errorf("field DeploymentConfiguration not resolved")
					},
				},
				"Deployments": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDeploymentType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							return obj.Deployments, nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							return face.Deployments, nil
						}
						return nil, fmt.Errorf("field Deployments not resolved")
					},
				},
				"DesiredCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.DesiredCount == nil {
								return nil, nil
							}
							return obj.GetDesiredCount(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.DesiredCount == nil {
								return nil, nil
							}
							return face.GetDesiredCount(), nil
						}
						return nil, fmt.Errorf("field DesiredCount not resolved")
					},
				},
				"Events": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLServiceEventType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							return obj.Events, nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							return face.Events, nil
						}
						return nil, fmt.Errorf("field Events not resolved")
					},
				},
				"LoadBalancers": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLLoadBalancerType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							return obj.LoadBalancers, nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							return face.LoadBalancers, nil
						}
						return nil, fmt.Errorf("field LoadBalancers not resolved")
					},
				},
				"PendingCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.PendingCount == nil {
								return nil, nil
							}
							return obj.GetPendingCount(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.PendingCount == nil {
								return nil, nil
							}
							return face.GetPendingCount(), nil
						}
						return nil, fmt.Errorf("field PendingCount not resolved")
					},
				},
				"RoleArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.RoleArn == nil {
								return nil, nil
							}
							return obj.GetRoleArn(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.RoleArn == nil {
								return nil, nil
							}
							return face.GetRoleArn(), nil
						}
						return nil, fmt.Errorf("field RoleArn not resolved")
					},
				},
				"RunningCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.RunningCount == nil {
								return nil, nil
							}
							return obj.GetRunningCount(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.RunningCount == nil {
								return nil, nil
							}
							return face.GetRunningCount(), nil
						}
						return nil, fmt.Errorf("field RunningCount not resolved")
					},
				},
				"ServiceArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.ServiceArn == nil {
								return nil, nil
							}
							return obj.GetServiceArn(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.ServiceArn == nil {
								return nil, nil
							}
							return face.GetServiceArn(), nil
						}
						return nil, fmt.Errorf("field ServiceArn not resolved")
					},
				},
				"ServiceName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.ServiceName == nil {
								return nil, nil
							}
							return obj.GetServiceName(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.ServiceName == nil {
								return nil, nil
							}
							return face.GetServiceName(), nil
						}
						return nil, fmt.Errorf("field ServiceName not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
				"TaskDefinition": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Service)
						if ok {
							if obj.TaskDefinition == nil {
								return nil, nil
							}
							return obj.GetTaskDefinition(), nil
						}
						inter, ok := p.Source.(ServiceGetter)
						if ok {
							face := inter.GetService()
							if face == nil {
								return nil, nil
							}
							if face.TaskDefinition == nil {
								return nil, nil
							}
							return face.GetTaskDefinition(), nil
						}
						return nil, fmt.Errorf("field TaskDefinition not resolved")
					},
				},
			}
		}),
	})
	GraphQLServiceEventType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsServiceEvent",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"CreatedAt": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServiceEvent)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(ServiceEventGetter)
						if ok {
							face := inter.GetServiceEvent()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field CreatedAt not resolved")
					},
				},
				"Id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServiceEvent)
						if ok {
							if obj.Id == nil {
								return nil, nil
							}
							return obj.GetId(), nil
						}
						inter, ok := p.Source.(ServiceEventGetter)
						if ok {
							face := inter.GetServiceEvent()
							if face == nil {
								return nil, nil
							}
							if face.Id == nil {
								return nil, nil
							}
							return face.GetId(), nil
						}
						return nil, fmt.Errorf("field Id not resolved")
					},
				},
				"Message": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServiceEvent)
						if ok {
							if obj.Message == nil {
								return nil, nil
							}
							return obj.GetMessage(), nil
						}
						inter, ok := p.Source.(ServiceEventGetter)
						if ok {
							face := inter.GetServiceEvent()
							if face == nil {
								return nil, nil
							}
							if face.Message == nil {
								return nil, nil
							}
							return face.GetMessage(), nil
						}
						return nil, fmt.Errorf("field Message not resolved")
					},
				},
			}
		}),
	})
	GraphQLTaskType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsTask",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ClusterArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.ClusterArn == nil {
								return nil, nil
							}
							return obj.GetClusterArn(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.ClusterArn == nil {
								return nil, nil
							}
							return face.GetClusterArn(), nil
						}
						return nil, fmt.Errorf("field ClusterArn not resolved")
					},
				},
				"ContainerInstanceArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.ContainerInstanceArn == nil {
								return nil, nil
							}
							return obj.GetContainerInstanceArn(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.ContainerInstanceArn == nil {
								return nil, nil
							}
							return face.GetContainerInstanceArn(), nil
						}
						return nil, fmt.Errorf("field ContainerInstanceArn not resolved")
					},
				},
				"Containers": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLContainerType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							return obj.Containers, nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							return face.Containers, nil
						}
						return nil, fmt.Errorf("field Containers not resolved")
					},
				},
				"CreatedAt": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field CreatedAt not resolved")
					},
				},
				"DesiredStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.DesiredStatus == nil {
								return nil, nil
							}
							return obj.GetDesiredStatus(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.DesiredStatus == nil {
								return nil, nil
							}
							return face.GetDesiredStatus(), nil
						}
						return nil, fmt.Errorf("field DesiredStatus not resolved")
					},
				},
				"LastStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.LastStatus == nil {
								return nil, nil
							}
							return obj.GetLastStatus(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.LastStatus == nil {
								return nil, nil
							}
							return face.GetLastStatus(), nil
						}
						return nil, fmt.Errorf("field LastStatus not resolved")
					},
				},
				"Overrides": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLTaskOverrideType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.Overrides == nil {
								return nil, nil
							}
							return obj.GetOverrides(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.Overrides == nil {
								return nil, nil
							}
							return face.GetOverrides(), nil
						}
						return nil, fmt.Errorf("field Overrides not resolved")
					},
				},
				"StartedAt": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.StartedAt == nil {
								return nil, nil
							}
							return obj.GetStartedAt(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.StartedAt == nil {
								return nil, nil
							}
							return face.GetStartedAt(), nil
						}
						return nil, fmt.Errorf("field StartedAt not resolved")
					},
				},
				"StartedBy": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.StartedBy == nil {
								return nil, nil
							}
							return obj.GetStartedBy(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.StartedBy == nil {
								return nil, nil
							}
							return face.GetStartedBy(), nil
						}
						return nil, fmt.Errorf("field StartedBy not resolved")
					},
				},
				"StoppedAt": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.StoppedAt == nil {
								return nil, nil
							}
							return obj.GetStoppedAt(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.StoppedAt == nil {
								return nil, nil
							}
							return face.GetStoppedAt(), nil
						}
						return nil, fmt.Errorf("field StoppedAt not resolved")
					},
				},
				"StoppedReason": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.StoppedReason == nil {
								return nil, nil
							}
							return obj.GetStoppedReason(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.StoppedReason == nil {
								return nil, nil
							}
							return face.GetStoppedReason(), nil
						}
						return nil, fmt.Errorf("field StoppedReason not resolved")
					},
				},
				"TaskArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.TaskArn == nil {
								return nil, nil
							}
							return obj.GetTaskArn(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.TaskArn == nil {
								return nil, nil
							}
							return face.GetTaskArn(), nil
						}
						return nil, fmt.Errorf("field TaskArn not resolved")
					},
				},
				"TaskDefinitionArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Task)
						if ok {
							if obj.TaskDefinitionArn == nil {
								return nil, nil
							}
							return obj.GetTaskDefinitionArn(), nil
						}
						inter, ok := p.Source.(TaskGetter)
						if ok {
							face := inter.GetTask()
							if face == nil {
								return nil, nil
							}
							if face.TaskDefinitionArn == nil {
								return nil, nil
							}
							return face.GetTaskDefinitionArn(), nil
						}
						return nil, fmt.Errorf("field TaskDefinitionArn not resolved")
					},
				},
			}
		}),
	})
	GraphQLTaskOverrideType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsTaskOverride",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ContainerOverrides": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLContainerOverrideType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TaskOverride)
						if ok {
							return obj.ContainerOverrides, nil
						}
						inter, ok := p.Source.(TaskOverrideGetter)
						if ok {
							face := inter.GetTaskOverride()
							if face == nil {
								return nil, nil
							}
							return face.ContainerOverrides, nil
						}
						return nil, fmt.Errorf("field ContainerOverrides not resolved")
					},
				},
			}
		}),
	})
	GraphQLVersionInfoType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsVersionInfo",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AgentHash": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*VersionInfo)
						if ok {
							if obj.AgentHash == nil {
								return nil, nil
							}
							return obj.GetAgentHash(), nil
						}
						inter, ok := p.Source.(VersionInfoGetter)
						if ok {
							face := inter.GetVersionInfo()
							if face == nil {
								return nil, nil
							}
							if face.AgentHash == nil {
								return nil, nil
							}
							return face.GetAgentHash(), nil
						}
						return nil, fmt.Errorf("field AgentHash not resolved")
					},
				},
				"AgentVersion": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*VersionInfo)
						if ok {
							if obj.AgentVersion == nil {
								return nil, nil
							}
							return obj.GetAgentVersion(), nil
						}
						inter, ok := p.Source.(VersionInfoGetter)
						if ok {
							face := inter.GetVersionInfo()
							if face == nil {
								return nil, nil
							}
							if face.AgentVersion == nil {
								return nil, nil
							}
							return face.GetAgentVersion(), nil
						}
						return nil, fmt.Errorf("field AgentVersion not resolved")
					},
				},
				"DockerVersion": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*VersionInfo)
						if ok {
							if obj.DockerVersion == nil {
								return nil, nil
							}
							return obj.GetDockerVersion(), nil
						}
						inter, ok := p.Source.(VersionInfoGetter)
						if ok {
							face := inter.GetVersionInfo()
							if face == nil {
								return nil, nil
							}
							if face.DockerVersion == nil {
								return nil, nil
							}
							return face.GetDockerVersion(), nil
						}
						return nil, fmt.Errorf("field DockerVersion not resolved")
					},
				},
			}
		}),
	})
}
func (m *Attribute) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Attribute) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.Value != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Value)))
		i += copy(data[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Container) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Container) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContainerArn != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ContainerArn)))
		i += copy(data[i:], *m.ContainerArn)
	}
	if m.ExitCode != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.ExitCode)<<1)^uint64((*m.ExitCode>>63))))
	}
	if m.LastStatus != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.LastStatus)))
		i += copy(data[i:], *m.LastStatus)
	}
	if m.Name != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if len(m.NetworkBindings) > 0 {
		for _, msg := range m.NetworkBindings {
			data[i] = 0x32
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Reason != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Reason)))
		i += copy(data[i:], *m.Reason)
	}
	if m.TaskArn != nil {
		data[i] = 0x42
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.TaskArn)))
		i += copy(data[i:], *m.TaskArn)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerInstance) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ContainerInstance) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentConnected != nil {
		data[i] = 0x10
		i++
		if *m.AgentConnected {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.AgentUpdateStatus != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.AgentUpdateStatus)))
		i += copy(data[i:], *m.AgentUpdateStatus)
	}
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			data[i] = 0x22
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ContainerInstanceArn != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ContainerInstanceArn)))
		i += copy(data[i:], *m.ContainerInstanceArn)
	}
	if m.Ec2InstanceId != nil {
		data[i] = 0x32
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Ec2InstanceId)))
		i += copy(data[i:], *m.Ec2InstanceId)
	}
	if m.PendingTasksCount != nil {
		data[i] = 0x38
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.PendingTasksCount)<<1)^uint64((*m.PendingTasksCount>>63))))
	}
	if len(m.RegisteredResources) > 0 {
		for _, msg := range m.RegisteredResources {
			data[i] = 0x42
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemainingResources) > 0 {
		for _, msg := range m.RemainingResources {
			data[i] = 0x4a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RunningTasksCount != nil {
		data[i] = 0x50
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.RunningTasksCount)<<1)^uint64((*m.RunningTasksCount>>63))))
	}
	if m.Status != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Status)))
		i += copy(data[i:], *m.Status)
	}
	if m.VersionInfo != nil {
		data[i] = 0x62
		i++
		i = encodeVarintTypes(data, i, uint64(m.VersionInfo.Size()))
		n1, err := m.VersionInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerOverride) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ContainerOverride) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Environment) > 0 {
		for _, msg := range m.Environment {
			data[i] = 0x1a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Name != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Deployment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Deployment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(m.CreatedAt.Size()))
		n2, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DesiredCount != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.DesiredCount)<<1)^uint64((*m.DesiredCount>>63))))
	}
	if m.Id != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.PendingCount != nil {
		data[i] = 0x28
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.PendingCount)<<1)^uint64((*m.PendingCount>>63))))
	}
	if m.RunningCount != nil {
		data[i] = 0x30
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.RunningCount)<<1)^uint64((*m.RunningCount>>63))))
	}
	if m.Status != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Status)))
		i += copy(data[i:], *m.Status)
	}
	if m.TaskDefinition != nil {
		data[i] = 0x42
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.TaskDefinition)))
		i += copy(data[i:], *m.TaskDefinition)
	}
	if m.UpdatedAt != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintTypes(data, i, uint64(m.UpdatedAt.Size()))
		n3, err := m.UpdatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeploymentConfiguration) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeploymentConfiguration) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaximumPercent != nil {
		data[i] = 0x10
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.MaximumPercent)<<1)^uint64((*m.MaximumPercent>>63))))
	}
	if m.MinimumHealthyPercent != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.MinimumHealthyPercent)<<1)^uint64((*m.MinimumHealthyPercent>>63))))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeContainerInstancesInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeContainerInstancesInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Cluster)))
		i += copy(data[i:], *m.Cluster)
	}
	if len(m.ContainerInstances) > 0 {
		for _, s := range m.ContainerInstances {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeContainerInstancesOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeContainerInstancesOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerInstances) > 0 {
		for _, msg := range m.ContainerInstances {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Failures) > 0 {
		for _, msg := range m.Failures {
			data[i] = 0x1a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeServicesInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeServicesInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Cluster)))
		i += copy(data[i:], *m.Cluster)
	}
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeServicesOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeServicesOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Failures) > 0 {
		for _, msg := range m.Failures {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Services) > 0 {
		for _, msg := range m.Services {
			data[i] = 0x1a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeTasksInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeTasksInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Cluster)))
		i += copy(data[i:], *m.Cluster)
	}
	if len(m.Tasks) > 0 {
		for _, s := range m.Tasks {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeTasksOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeTasksOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Failures) > 0 {
		for _, msg := range m.Failures {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			data[i] = 0x1a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Failure) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Failure) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arn != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Arn)))
		i += copy(data[i:], *m.Arn)
	}
	if m.Reason != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Reason)))
		i += copy(data[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KeyValuePair) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *KeyValuePair) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.Value != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Value)))
		i += copy(data[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListClustersInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListClustersInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxResults != nil {
		data[i] = 0x10
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.MaxResults)<<1)^uint64((*m.MaxResults>>63))))
	}
	if m.NextToken != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListClustersOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListClustersOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterArns) > 0 {
		for _, s := range m.ClusterArns {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.NextToken != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListContainerInstancesInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListContainerInstancesInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Cluster)))
		i += copy(data[i:], *m.Cluster)
	}
	if m.MaxResults != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.MaxResults)<<1)^uint64((*m.MaxResults>>63))))
	}
	if m.NextToken != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListContainerInstancesOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListContainerInstancesOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerInstanceArns) > 0 {
		for _, s := range m.ContainerInstanceArns {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.NextToken != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListServicesInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListServicesInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Cluster)))
		i += copy(data[i:], *m.Cluster)
	}
	if m.MaxResults != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.MaxResults)<<1)^uint64((*m.MaxResults>>63))))
	}
	if m.NextToken != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListServicesOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListServicesOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextToken != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if len(m.ServiceArns) > 0 {
		for _, s := range m.ServiceArns {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListTasksInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListTasksInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Cluster)))
		i += copy(data[i:], *m.Cluster)
	}
	if m.ContainerInstance != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ContainerInstance)))
		i += copy(data[i:], *m.ContainerInstance)
	}
	if m.DesiredStatus != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.DesiredStatus)))
		i += copy(data[i:], *m.DesiredStatus)
	}
	if m.Family != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Family)))
		i += copy(data[i:], *m.Family)
	}
	if m.MaxResults != nil {
		data[i] = 0x30
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.MaxResults)<<1)^uint64((*m.MaxResults>>63))))
	}
	if m.NextToken != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if m.ServiceName != nil {
		data[i] = 0x42
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ServiceName)))
		i += copy(data[i:], *m.ServiceName)
	}
	if m.StartedBy != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.StartedBy)))
		i += copy(data[i:], *m.StartedBy)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListTasksOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListTasksOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextToken != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if len(m.TaskArns) > 0 {
		for _, s := range m.TaskArns {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoadBalancer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoadBalancer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContainerName != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ContainerName)))
		i += copy(data[i:], *m.ContainerName)
	}
	if m.ContainerPort != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.ContainerPort)<<1)^uint64((*m.ContainerPort>>63))))
	}
	if m.LoadBalancerName != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.LoadBalancerName)))
		i += copy(data[i:], *m.LoadBalancerName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NetworkBinding) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NetworkBinding) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BindIP != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.BindIP)))
		i += copy(data[i:], *m.BindIP)
	}
	if m.ContainerPort != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.ContainerPort)<<1)^uint64((*m.ContainerPort>>63))))
	}
	if m.HostPort != nil {
		data[i] = 0x20
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.HostPort)<<1)^uint64((*m.HostPort>>63))))
	}
	if m.Protocol != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Protocol)))
		i += copy(data[i:], *m.Protocol)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Resource) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Resource) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DoubleValue != nil {
		data[i] = 0x11
		i++
		i = encodeFixed64Types(data, i, uint64(math.Float64bits(float64(*m.DoubleValue))))
	}
	if m.IntegerValue != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.IntegerValue)<<1)^uint64((*m.IntegerValue>>63))))
	}
	if m.LongValue != nil {
		data[i] = 0x20
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.LongValue)<<1)^uint64((*m.LongValue>>63))))
	}
	if m.Name != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if len(m.StringSetValue) > 0 {
		for _, s := range m.StringSetValue {
			data[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Type != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Type)))
		i += copy(data[i:], *m.Type)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Service) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Service) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterArn != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ClusterArn)))
		i += copy(data[i:], *m.ClusterArn)
	}
	if m.CreatedAt != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(m.CreatedAt.Size()))
		n4, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.DeploymentConfiguration != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(m.DeploymentConfiguration.Size()))
		n5, err := m.DeploymentConfiguration.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Deployments) > 0 {
		for _, msg := range m.Deployments {
			data[i] = 0x2a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DesiredCount != nil {
		data[i] = 0x30
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.DesiredCount)<<1)^uint64((*m.DesiredCount>>63))))
	}
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			data[i] = 0x3a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LoadBalancers) > 0 {
		for _, msg := range m.LoadBalancers {
			data[i] = 0x42
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PendingCount != nil {
		data[i] = 0x48
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.PendingCount)<<1)^uint64((*m.PendingCount>>63))))
	}
	if m.RoleArn != nil {
		data[i] = 0x52
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.RoleArn)))
		i += copy(data[i:], *m.RoleArn)
	}
	if m.RunningCount != nil {
		data[i] = 0x58
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.RunningCount)<<1)^uint64((*m.RunningCount>>63))))
	}
	if m.ServiceArn != nil {
		data[i] = 0x62
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ServiceArn)))
		i += copy(data[i:], *m.ServiceArn)
	}
	if m.ServiceName != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ServiceName)))
		i += copy(data[i:], *m.ServiceName)
	}
	if m.Status != nil {
		data[i] = 0x72
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Status)))
		i += copy(data[i:], *m.Status)
	}
	if m.TaskDefinition != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.TaskDefinition)))
		i += copy(data[i:], *m.TaskDefinition)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServiceEvent) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ServiceEvent) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(m.CreatedAt.Size()))
		n6, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Id != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.Message != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Message)))
		i += copy(data[i:], *m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Task) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Task) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterArn != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ClusterArn)))
		i += copy(data[i:], *m.ClusterArn)
	}
	if m.ContainerInstanceArn != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ContainerInstanceArn)))
		i += copy(data[i:], *m.ContainerInstanceArn)
	}
	if len(m.Containers) > 0 {
		for _, msg := range m.Containers {
			data[i] = 0x22
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreatedAt != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(m.CreatedAt.Size()))
		n7, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.DesiredStatus != nil {
		data[i] = 0x32
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.DesiredStatus)))
		i += copy(data[i:], *m.DesiredStatus)
	}
	if m.LastStatus != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.LastStatus)))
		i += copy(data[i:], *m.LastStatus)
	}
	if m.Overrides != nil {
		data[i] = 0x42
		i++
		i = encodeVarintTypes(data, i, uint64(m.Overrides.Size()))
		n8, err := m.Overrides.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.StartedAt != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintTypes(data, i, uint64(m.StartedAt.Size()))
		n9, err := m.StartedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.StartedBy != nil {
		data[i] = 0x52
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.StartedBy)))
		i += copy(data[i:], *m.StartedBy)
	}
	if m.StoppedAt != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintTypes(data, i, uint64(m.StoppedAt.Size()))
		n10, err := m.StoppedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.StoppedReason != nil {
		data[i] = 0x62
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.StoppedReason)))
		i += copy(data[i:], *m.StoppedReason)
	}
	if m.TaskArn != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.TaskArn)))
		i += copy(data[i:], *m.TaskArn)
	}
	if m.TaskDefinitionArn != nil {
		data[i] = 0x72
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.TaskDefinitionArn)))
		i += copy(data[i:], *m.TaskDefinitionArn)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TaskOverride) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TaskOverride) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerOverrides) > 0 {
		for _, msg := range m.ContainerOverrides {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VersionInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VersionInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentHash != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.AgentHash)))
		i += copy(data[i:], *m.AgentHash)
	}
	if m.AgentVersion != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.AgentVersion)))
		i += copy(data[i:], *m.AgentVersion)
	}
	if m.DockerVersion != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.DockerVersion)))
		i += copy(data[i:], *m.DockerVersion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Types(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Types(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTypes(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAttribute(r randyTypes, easy bool) *Attribute {
	this := &Attribute{}
	if r.Intn(10) != 0 {
		v1 := randStringTypes(r)
		this.Name = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringTypes(r)
		this.Value = &v2
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedContainer(r randyTypes, easy bool) *Container {
	this := &Container{}
	if r.Intn(10) != 0 {
		v3 := randStringTypes(r)
		this.ContainerArn = &v3
	}
	if r.Intn(10) != 0 {
		v4 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.ExitCode = &v4
	}
	if r.Intn(10) != 0 {
		v5 := randStringTypes(r)
		this.LastStatus = &v5
	}
	if r.Intn(10) != 0 {
		v6 := randStringTypes(r)
		this.Name = &v6
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.NetworkBindings = make([]*NetworkBinding, v7)
		for i := 0; i < v7; i++ {
			this.NetworkBindings[i] = NewPopulatedNetworkBinding(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v8 := randStringTypes(r)
		this.Reason = &v8
	}
	if r.Intn(10) != 0 {
		v9 := randStringTypes(r)
		this.TaskArn = &v9
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 9)
	}
	return this
}

func NewPopulatedContainerInstance(r randyTypes, easy bool) *ContainerInstance {
	this := &ContainerInstance{}
	if r.Intn(10) != 0 {
		v10 := bool(bool(r.Intn(2) == 0))
		this.AgentConnected = &v10
	}
	if r.Intn(10) != 0 {
		v11 := randStringTypes(r)
		this.AgentUpdateStatus = &v11
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.Attributes = make([]*Attribute, v12)
		for i := 0; i < v12; i++ {
			this.Attributes[i] = NewPopulatedAttribute(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v13 := randStringTypes(r)
		this.ContainerInstanceArn = &v13
	}
	if r.Intn(10) != 0 {
		v14 := randStringTypes(r)
		this.Ec2InstanceId = &v14
	}
	if r.Intn(10) != 0 {
		v15 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		this.PendingTasksCount = &v15
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(5)
		this.RegisteredResources = make([]*Resource, v16)
		for i := 0; i < v16; i++ {
			this.RegisteredResources[i] = NewPopulatedResource(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v17 := r.Intn(5)
		this.RemainingResources = make([]*Resource, v17)
		for i := 0; i < v17; i++ {
			this.RemainingResources[i] = NewPopulatedResource(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v18 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v18 *= -1
		}
		this.RunningTasksCount = &v18
	}
	if r.Intn(10) != 0 {
		v19 := randStringTypes(r)
		this.Status = &v19
	}
	if r.Intn(10) != 0 {
		this.VersionInfo = NewPopulatedVersionInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 13)
	}
	return this
}

func NewPopulatedContainerOverride(r randyTypes, easy bool) *ContainerOverride {
	this := &ContainerOverride{}
	if r.Intn(10) != 0 {
		v20 := r.Intn(10)
		this.Command = make([]string, v20)
		for i := 0; i < v20; i++ {
			this.Command[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(5)
		this.Environment = make([]*KeyValuePair, v21)
		for i := 0; i < v21; i++ {
			this.Environment[i] = NewPopulatedKeyValuePair(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v22 := randStringTypes(r)
		this.Name = &v22
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedDeployment(r randyTypes, easy bool) *Deployment {
	this := &Deployment{}
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v23 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v23 *= -1
		}
		this.DesiredCount = &v23
	}
	if r.Intn(10) != 0 {
		v24 := randStringTypes(r)
		this.Id = &v24
	}
	if r.Intn(10) != 0 {
		v25 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v25 *= -1
		}
		this.PendingCount = &v25
	}
	if r.Intn(10) != 0 {
		v26 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v26 *= -1
		}
		this.RunningCount = &v26
	}
	if r.Intn(10) != 0 {
		v27 := randStringTypes(r)
		this.Status = &v27
	}
	if r.Intn(10) != 0 {
		v28 := randStringTypes(r)
		this.TaskDefinition = &v28
	}
	if r.Intn(10) != 0 {
		this.UpdatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 10)
	}
	return this
}

func NewPopulatedDeploymentConfiguration(r randyTypes, easy bool) *DeploymentConfiguration {
	this := &DeploymentConfiguration{}
	if r.Intn(10) != 0 {
		v29 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v29 *= -1
		}
		this.MaximumPercent = &v29
	}
	if r.Intn(10) != 0 {
		v30 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v30 *= -1
		}
		this.MinimumHealthyPercent = &v30
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDescribeContainerInstancesInput(r randyTypes, easy bool) *DescribeContainerInstancesInput {
	this := &DescribeContainerInstancesInput{}
	if r.Intn(10) != 0 {
		v31 := randStringTypes(r)
		this.Cluster = &v31
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(10)
		this.ContainerInstances = make([]string, v32)
		for i := 0; i < v32; i++ {
			this.ContainerInstances[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDescribeContainerInstancesOutput(r randyTypes, easy bool) *DescribeContainerInstancesOutput {
	this := &DescribeContainerInstancesOutput{}
	if r.Intn(10) != 0 {
		v33 := r.Intn(5)
		this.ContainerInstances = make([]*ContainerInstance, v33)
		for i := 0; i < v33; i++ {
			this.ContainerInstances[i] = NewPopulatedContainerInstance(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v34 := r.Intn(5)
		this.Failures = make([]*Failure, v34)
		for i := 0; i < v34; i++ {
			this.Failures[i] = NewPopulatedFailure(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDescribeServicesInput(r randyTypes, easy bool) *DescribeServicesInput {
	this := &DescribeServicesInput{}
	if r.Intn(10) != 0 {
		v35 := randStringTypes(r)
		this.Cluster = &v35
	}
	if r.Intn(10) != 0 {
		v36 := r.Intn(10)
		this.Services = make([]string, v36)
		for i := 0; i < v36; i++ {
			this.Services[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDescribeServicesOutput(r randyTypes, easy bool) *DescribeServicesOutput {
	this := &DescribeServicesOutput{}
	if r.Intn(10) != 0 {
		v37 := r.Intn(5)
		this.Failures = make([]*Failure, v37)
		for i := 0; i < v37; i++ {
			this.Failures[i] = NewPopulatedFailure(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v38 := r.Intn(5)
		this.Services = make([]*Service, v38)
		for i := 0; i < v38; i++ {
			this.Services[i] = NewPopulatedService(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDescribeTasksInput(r randyTypes, easy bool) *DescribeTasksInput {
	this := &DescribeTasksInput{}
	if r.Intn(10) != 0 {
		v39 := randStringTypes(r)
		this.Cluster = &v39
	}
	if r.Intn(10) != 0 {
		v40 := r.Intn(10)
		this.Tasks = make([]string, v40)
		for i := 0; i < v40; i++ {
			this.Tasks[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDescribeTasksOutput(r randyTypes, easy bool) *DescribeTasksOutput {
	this := &DescribeTasksOutput{}
	if r.Intn(10) != 0 {
		v41 := r.Intn(5)
		this.Failures = make([]*Failure, v41)
		for i := 0; i < v41; i++ {
			this.Failures[i] = NewPopulatedFailure(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v42 := r.Intn(5)
		this.Tasks = make([]*Task, v42)
		for i := 0; i < v42; i++ {
			this.Tasks[i] = NewPopulatedTask(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedFailure(r randyTypes, easy bool) *Failure {
	this := &Failure{}
	if r.Intn(10) != 0 {
		v43 := randStringTypes(r)
		this.Arn = &v43
	}
	if r.Intn(10) != 0 {
		v44 := randStringTypes(r)
		this.Reason = &v44
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedKeyValuePair(r randyTypes, easy bool) *KeyValuePair {
	this := &KeyValuePair{}
	if r.Intn(10) != 0 {
		v45 := randStringTypes(r)
		this.Name = &v45
	}
	if r.Intn(10) != 0 {
		v46 := randStringTypes(r)
		this.Value = &v46
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListClustersInput(r randyTypes, easy bool) *ListClustersInput {
	this := &ListClustersInput{}
	if r.Intn(10) != 0 {
		v47 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v47 *= -1
		}
		this.MaxResults = &v47
	}
	if r.Intn(10) != 0 {
		v48 := randStringTypes(r)
		this.NextToken = &v48
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListClustersOutput(r randyTypes, easy bool) *ListClustersOutput {
	this := &ListClustersOutput{}
	if r.Intn(10) != 0 {
		v49 := r.Intn(10)
		this.ClusterArns = make([]string, v49)
		for i := 0; i < v49; i++ {
			this.ClusterArns[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v50 := randStringTypes(r)
		this.NextToken = &v50
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListContainerInstancesInput(r randyTypes, easy bool) *ListContainerInstancesInput {
	this := &ListContainerInstancesInput{}
	if r.Intn(10) != 0 {
		v51 := randStringTypes(r)
		this.Cluster = &v51
	}
	if r.Intn(10) != 0 {
		v52 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v52 *= -1
		}
		this.MaxResults = &v52
	}
	if r.Intn(10) != 0 {
		v53 := randStringTypes(r)
		this.NextToken = &v53
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedListContainerInstancesOutput(r randyTypes, easy bool) *ListContainerInstancesOutput {
	this := &ListContainerInstancesOutput{}
	if r.Intn(10) != 0 {
		v54 := r.Intn(10)
		this.ContainerInstanceArns = make([]string, v54)
		for i := 0; i < v54; i++ {
			this.ContainerInstanceArns[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v55 := randStringTypes(r)
		this.NextToken = &v55
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListServicesInput(r randyTypes, easy bool) *ListServicesInput {
	this := &ListServicesInput{}
	if r.Intn(10) != 0 {
		v56 := randStringTypes(r)
		this.Cluster = &v56
	}
	if r.Intn(10) != 0 {
		v57 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v57 *= -1
		}
		this.MaxResults = &v57
	}
	if r.Intn(10) != 0 {
		v58 := randStringTypes(r)
		this.NextToken = &v58
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedListServicesOutput(r randyTypes, easy bool) *ListServicesOutput {
	this := &ListServicesOutput{}
	if r.Intn(10) != 0 {
		v59 := randStringTypes(r)
		this.NextToken = &v59
	}
	if r.Intn(10) != 0 {
		v60 := r.Intn(10)
		this.ServiceArns = make([]string, v60)
		for i := 0; i < v60; i++ {
			this.ServiceArns[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListTasksInput(r randyTypes, easy bool) *ListTasksInput {
	this := &ListTasksInput{}
	if r.Intn(10) != 0 {
		v61 := randStringTypes(r)
		this.Cluster = &v61
	}
	if r.Intn(10) != 0 {
		v62 := randStringTypes(r)
		this.ContainerInstance = &v62
	}
	if r.Intn(10) != 0 {
		v63 := randStringTypes(r)
		this.DesiredStatus = &v63
	}
	if r.Intn(10) != 0 {
		v64 := randStringTypes(r)
		this.Family = &v64
	}
	if r.Intn(10) != 0 {
		v65 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v65 *= -1
		}
		this.MaxResults = &v65
	}
	if r.Intn(10) != 0 {
		v66 := randStringTypes(r)
		this.NextToken = &v66
	}
	if r.Intn(10) != 0 {
		v67 := randStringTypes(r)
		this.ServiceName = &v67
	}
	if r.Intn(10) != 0 {
		v68 := randStringTypes(r)
		this.StartedBy = &v68
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 10)
	}
	return this
}

func NewPopulatedListTasksOutput(r randyTypes, easy bool) *ListTasksOutput {
	this := &ListTasksOutput{}
	if r.Intn(10) != 0 {
		v69 := randStringTypes(r)
		this.NextToken = &v69
	}
	if r.Intn(10) != 0 {
		v70 := r.Intn(10)
		this.TaskArns = make([]string, v70)
		for i := 0; i < v70; i++ {
			this.TaskArns[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedLoadBalancer(r randyTypes, easy bool) *LoadBalancer {
	this := &LoadBalancer{}
	if r.Intn(10) != 0 {
		v71 := randStringTypes(r)
		this.ContainerName = &v71
	}
	if r.Intn(10) != 0 {
		v72 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v72 *= -1
		}
		this.ContainerPort = &v72
	}
	if r.Intn(10) != 0 {
		v73 := randStringTypes(r)
		this.LoadBalancerName = &v73
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedNetworkBinding(r randyTypes, easy bool) *NetworkBinding {
	this := &NetworkBinding{}
	if r.Intn(10) != 0 {
		v74 := randStringTypes(r)
		this.BindIP = &v74
	}
	if r.Intn(10) != 0 {
		v75 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v75 *= -1
		}
		this.ContainerPort = &v75
	}
	if r.Intn(10) != 0 {
		v76 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v76 *= -1
		}
		this.HostPort = &v76
	}
	if r.Intn(10) != 0 {
		v77 := randStringTypes(r)
		this.Protocol = &v77
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 6)
	}
	return this
}

func NewPopulatedResource(r randyTypes, easy bool) *Resource {
	this := &Resource{}
	if r.Intn(10) != 0 {
		v78 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v78 *= -1
		}
		this.DoubleValue = &v78
	}
	if r.Intn(10) != 0 {
		v79 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v79 *= -1
		}
		this.IntegerValue = &v79
	}
	if r.Intn(10) != 0 {
		v80 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v80 *= -1
		}
		this.LongValue = &v80
	}
	if r.Intn(10) != 0 {
		v81 := randStringTypes(r)
		this.Name = &v81
	}
	if r.Intn(10) != 0 {
		v82 := r.Intn(10)
		this.StringSetValue = make([]string, v82)
		for i := 0; i < v82; i++ {
			this.StringSetValue[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v83 := randStringTypes(r)
		this.Type = &v83
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 8)
	}
	return this
}

func NewPopulatedService(r randyTypes, easy bool) *Service {
	this := &Service{}
	if r.Intn(10) != 0 {
		v84 := randStringTypes(r)
		this.ClusterArn = &v84
	}
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DeploymentConfiguration = NewPopulatedDeploymentConfiguration(r, easy)
	}
	if r.Intn(10) != 0 {
		v85 := r.Intn(5)
		this.Deployments = make([]*Deployment, v85)
		for i := 0; i < v85; i++ {
			this.Deployments[i] = NewPopulatedDeployment(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v86 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v86 *= -1
		}
		this.DesiredCount = &v86
	}
	if r.Intn(10) != 0 {
		v87 := r.Intn(5)
		this.Events = make([]*ServiceEvent, v87)
		for i := 0; i < v87; i++ {
			this.Events[i] = NewPopulatedServiceEvent(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v88 := r.Intn(5)
		this.LoadBalancers = make([]*LoadBalancer, v88)
		for i := 0; i < v88; i++ {
			this.LoadBalancers[i] = NewPopulatedLoadBalancer(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v89 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v89 *= -1
		}
		this.PendingCount = &v89
	}
	if r.Intn(10) != 0 {
		v90 := randStringTypes(r)
		this.RoleArn = &v90
	}
	if r.Intn(10) != 0 {
		v91 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v91 *= -1
		}
		this.RunningCount = &v91
	}
	if r.Intn(10) != 0 {
		v92 := randStringTypes(r)
		this.ServiceArn = &v92
	}
	if r.Intn(10) != 0 {
		v93 := randStringTypes(r)
		this.ServiceName = &v93
	}
	if r.Intn(10) != 0 {
		v94 := randStringTypes(r)
		this.Status = &v94
	}
	if r.Intn(10) != 0 {
		v95 := randStringTypes(r)
		this.TaskDefinition = &v95
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 16)
	}
	return this
}

func NewPopulatedServiceEvent(r randyTypes, easy bool) *ServiceEvent {
	this := &ServiceEvent{}
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v96 := randStringTypes(r)
		this.Id = &v96
	}
	if r.Intn(10) != 0 {
		v97 := randStringTypes(r)
		this.Message = &v97
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedTask(r randyTypes, easy bool) *Task {
	this := &Task{}
	if r.Intn(10) != 0 {
		v98 := randStringTypes(r)
		this.ClusterArn = &v98
	}
	if r.Intn(10) != 0 {
		v99 := randStringTypes(r)
		this.ContainerInstanceArn = &v99
	}
	if r.Intn(10) != 0 {
		v100 := r.Intn(5)
		this.Containers = make([]*Container, v100)
		for i := 0; i < v100; i++ {
			this.Containers[i] = NewPopulatedContainer(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v101 := randStringTypes(r)
		this.DesiredStatus = &v101
	}
	if r.Intn(10) != 0 {
		v102 := randStringTypes(r)
		this.LastStatus = &v102
	}
	if r.Intn(10) != 0 {
		this.Overrides = NewPopulatedTaskOverride(r, easy)
	}
	if r.Intn(10) != 0 {
		this.StartedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v103 := randStringTypes(r)
		this.StartedBy = &v103
	}
	if r.Intn(10) != 0 {
		this.StoppedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v104 := randStringTypes(r)
		this.StoppedReason = &v104
	}
	if r.Intn(10) != 0 {
		v105 := randStringTypes(r)
		this.TaskArn = &v105
	}
	if r.Intn(10) != 0 {
		v106 := randStringTypes(r)
		this.TaskDefinitionArn = &v106
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 15)
	}
	return this
}

func NewPopulatedTaskOverride(r randyTypes, easy bool) *TaskOverride {
	this := &TaskOverride{}
	if r.Intn(10) != 0 {
		v107 := r.Intn(5)
		this.ContainerOverrides = make([]*ContainerOverride, v107)
		for i := 0; i < v107; i++ {
			this.ContainerOverrides[i] = NewPopulatedContainerOverride(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 3)
	}
	return this
}

func NewPopulatedVersionInfo(r randyTypes, easy bool) *VersionInfo {
	this := &VersionInfo{}
	if r.Intn(10) != 0 {
		v108 := randStringTypes(r)
		this.AgentHash = &v108
	}
	if r.Intn(10) != 0 {
		v109 := randStringTypes(r)
		this.AgentVersion = &v109
	}
	if r.Intn(10) != 0 {
		v110 := randStringTypes(r)
		this.DockerVersion = &v110
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v111 := r.Intn(100)
	tmps := make([]rune, v111)
	for i := 0; i < v111; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v112 := r.Int63()
		if r.Intn(2) == 0 {
			v112 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v112))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Attribute) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Container) Size() (n int) {
	var l int
	_ = l
	if m.ContainerArn != nil {
		l = len(*m.ContainerArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ExitCode != nil {
		n += 1 + sozTypes(uint64(*m.ExitCode))
	}
	if m.LastStatus != nil {
		l = len(*m.LastStatus)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.NetworkBindings) > 0 {
		for _, e := range m.NetworkBindings {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TaskArn != nil {
		l = len(*m.TaskArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerInstance) Size() (n int) {
	var l int
	_ = l
	if m.AgentConnected != nil {
		n += 2
	}
	if m.AgentUpdateStatus != nil {
		l = len(*m.AgentUpdateStatus)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ContainerInstanceArn != nil {
		l = len(*m.ContainerInstanceArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Ec2InstanceId != nil {
		l = len(*m.Ec2InstanceId)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PendingTasksCount != nil {
		n += 1 + sozTypes(uint64(*m.PendingTasksCount))
	}
	if len(m.RegisteredResources) > 0 {
		for _, e := range m.RegisteredResources {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RemainingResources) > 0 {
		for _, e := range m.RemainingResources {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.RunningTasksCount != nil {
		n += 1 + sozTypes(uint64(*m.RunningTasksCount))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VersionInfo != nil {
		l = m.VersionInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerOverride) Size() (n int) {
	var l int
	_ = l
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Environment) > 0 {
		for _, e := range m.Environment {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Deployment) Size() (n int) {
	var l int
	_ = l
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DesiredCount != nil {
		n += 1 + sozTypes(uint64(*m.DesiredCount))
	}
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PendingCount != nil {
		n += 1 + sozTypes(uint64(*m.PendingCount))
	}
	if m.RunningCount != nil {
		n += 1 + sozTypes(uint64(*m.RunningCount))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TaskDefinition != nil {
		l = len(*m.TaskDefinition)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.MaximumPercent != nil {
		n += 1 + sozTypes(uint64(*m.MaximumPercent))
	}
	if m.MinimumHealthyPercent != nil {
		n += 1 + sozTypes(uint64(*m.MinimumHealthyPercent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeContainerInstancesInput) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = len(*m.Cluster)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ContainerInstances) > 0 {
		for _, s := range m.ContainerInstances {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeContainerInstancesOutput) Size() (n int) {
	var l int
	_ = l
	if len(m.ContainerInstances) > 0 {
		for _, e := range m.ContainerInstances {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Failures) > 0 {
		for _, e := range m.Failures {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeServicesInput) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = len(*m.Cluster)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeServicesOutput) Size() (n int) {
	var l int
	_ = l
	if len(m.Failures) > 0 {
		for _, e := range m.Failures {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeTasksInput) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = len(*m.Cluster)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for _, s := range m.Tasks {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeTasksOutput) Size() (n int) {
	var l int
	_ = l
	if len(m.Failures) > 0 {
		for _, e := range m.Failures {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Failure) Size() (n int) {
	var l int
	_ = l
	if m.Arn != nil {
		l = len(*m.Arn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyValuePair) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListClustersInput) Size() (n int) {
	var l int
	_ = l
	if m.MaxResults != nil {
		n += 1 + sozTypes(uint64(*m.MaxResults))
	}
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListClustersOutput) Size() (n int) {
	var l int
	_ = l
	if len(m.ClusterArns) > 0 {
		for _, s := range m.ClusterArns {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListContainerInstancesInput) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = len(*m.Cluster)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxResults != nil {
		n += 1 + sozTypes(uint64(*m.MaxResults))
	}
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListContainerInstancesOutput) Size() (n int) {
	var l int
	_ = l
	if len(m.ContainerInstanceArns) > 0 {
		for _, s := range m.ContainerInstanceArns {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListServicesInput) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = len(*m.Cluster)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxResults != nil {
		n += 1 + sozTypes(uint64(*m.MaxResults))
	}
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListServicesOutput) Size() (n int) {
	var l int
	_ = l
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ServiceArns) > 0 {
		for _, s := range m.ServiceArns {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTasksInput) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = len(*m.Cluster)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ContainerInstance != nil {
		l = len(*m.ContainerInstance)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DesiredStatus != nil {
		l = len(*m.DesiredStatus)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Family != nil {
		l = len(*m.Family)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxResults != nil {
		n += 1 + sozTypes(uint64(*m.MaxResults))
	}
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartedBy != nil {
		l = len(*m.StartedBy)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTasksOutput) Size() (n int) {
	var l int
	_ = l
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TaskArns) > 0 {
		for _, s := range m.TaskArns {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadBalancer) Size() (n int) {
	var l int
	_ = l
	if m.ContainerName != nil {
		l = len(*m.ContainerName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ContainerPort != nil {
		n += 1 + sozTypes(uint64(*m.ContainerPort))
	}
	if m.LoadBalancerName != nil {
		l = len(*m.LoadBalancerName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkBinding) Size() (n int) {
	var l int
	_ = l
	if m.BindIP != nil {
		l = len(*m.BindIP)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ContainerPort != nil {
		n += 1 + sozTypes(uint64(*m.ContainerPort))
	}
	if m.HostPort != nil {
		n += 1 + sozTypes(uint64(*m.HostPort))
	}
	if m.Protocol != nil {
		l = len(*m.Protocol)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resource) Size() (n int) {
	var l int
	_ = l
	if m.DoubleValue != nil {
		n += 9
	}
	if m.IntegerValue != nil {
		n += 1 + sozTypes(uint64(*m.IntegerValue))
	}
	if m.LongValue != nil {
		n += 1 + sozTypes(uint64(*m.LongValue))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.StringSetValue) > 0 {
		for _, s := range m.StringSetValue {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Service) Size() (n int) {
	var l int
	_ = l
	if m.ClusterArn != nil {
		l = len(*m.ClusterArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DeploymentConfiguration != nil {
		l = m.DeploymentConfiguration.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DesiredCount != nil {
		n += 1 + sozTypes(uint64(*m.DesiredCount))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LoadBalancers) > 0 {
		for _, e := range m.LoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PendingCount != nil {
		n += 1 + sozTypes(uint64(*m.PendingCount))
	}
	if m.RoleArn != nil {
		l = len(*m.RoleArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RunningCount != nil {
		n += 1 + sozTypes(uint64(*m.RunningCount))
	}
	if m.ServiceArn != nil {
		l = len(*m.ServiceArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TaskDefinition != nil {
		l = len(*m.TaskDefinition)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceEvent) Size() (n int) {
	var l int
	_ = l
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Task) Size() (n int) {
	var l int
	_ = l
	if m.ClusterArn != nil {
		l = len(*m.ClusterArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ContainerInstanceArn != nil {
		l = len(*m.ContainerInstanceArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DesiredStatus != nil {
		l = len(*m.DesiredStatus)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastStatus != nil {
		l = len(*m.LastStatus)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Overrides != nil {
		l = m.Overrides.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartedAt != nil {
		l = m.StartedAt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartedBy != nil {
		l = len(*m.StartedBy)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StoppedAt != nil {
		l = m.StoppedAt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StoppedReason != nil {
		l = len(*m.StoppedReason)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TaskArn != nil {
		l = len(*m.TaskArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TaskDefinitionArn != nil {
		l = len(*m.TaskDefinitionArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskOverride) Size() (n int) {
	var l int
	_ = l
	if len(m.ContainerOverrides) > 0 {
		for _, e := range m.ContainerOverrides {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VersionInfo) Size() (n int) {
	var l int
	_ = l
	if m.AgentHash != nil {
		l = len(*m.AgentHash)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AgentVersion != nil {
		l = len(*m.AgentVersion)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DockerVersion != nil {
		l = len(*m.DockerVersion)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Attribute) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Container) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Container: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Container: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ContainerArn = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ExitCode = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.LastStatus = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkBindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkBindings = append(m.NetworkBindings, &NetworkBinding{})
			if err := m.NetworkBindings[len(m.NetworkBindings)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.TaskArn = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerInstance) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentConnected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AgentConnected = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentUpdateStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AgentUpdateStatus = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstanceArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ContainerInstanceArn = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Ec2InstanceId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTasksCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.PendingTasksCount = &v2
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredResources = append(m.RegisteredResources, &Resource{})
			if err := m.RegisteredResources[len(m.RegisteredResources)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingResources = append(m.RemainingResources, &Resource{})
			if err := m.RemainingResources[len(m.RemainingResources)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningTasksCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RunningTasksCount = &v2
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionInfo == nil {
				m.VersionInfo = &VersionInfo{}
			}
			if err := m.VersionInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerOverride) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerOverride: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerOverride: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = append(m.Environment, &KeyValuePair{})
			if err := m.Environment[len(m.Environment)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.DesiredCount = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.PendingCount = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RunningCount = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDefinition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.TaskDefinition = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &opsee_types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentConfiguration) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumPercent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MaximumPercent = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumHealthyPercent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MinimumHealthyPercent = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeContainerInstancesInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeContainerInstancesInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeContainerInstancesInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Cluster = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstances", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerInstances = append(m.ContainerInstances, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeContainerInstancesOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeContainerInstancesOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeContainerInstancesOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerInstances = append(m.ContainerInstances, &ContainerInstance{})
			if err := m.ContainerInstances[len(m.ContainerInstances)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failures = append(m.Failures, &Failure{})
			if err := m.Failures[len(m.Failures)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeServicesInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeServicesInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeServicesInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Cluster = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeServicesOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeServicesOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeServicesOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failures = append(m.Failures, &Failure{})
			if err := m.Failures[len(m.Failures)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeTasksInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeTasksInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeTasksInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Cluster = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeTasksOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeTasksOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeTasksOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failures = append(m.Failures, &Failure{})
			if err := m.Failures[len(m.Failures)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Arn = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValuePair) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValuePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValuePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClustersInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClustersInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClustersInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResults", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MaxResults = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClustersOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClustersOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClustersOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterArns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterArns = append(m.ClusterArns, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListContainerInstancesInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListContainerInstancesInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListContainerInstancesInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Cluster = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResults", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MaxResults = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListContainerInstancesOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListContainerInstancesOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListContainerInstancesOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstanceArns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerInstanceArns = append(m.ContainerInstanceArns, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServicesInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServicesInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServicesInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Cluster = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResults", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MaxResults = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServicesOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServicesOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServicesOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceArns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceArns = append(m.ServiceArns, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTasksInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTasksInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTasksInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Cluster = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ContainerInstance = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.DesiredStatus = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Family = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResults", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MaxResults = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.StartedBy = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTasksOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTasksOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTasksOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskArns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskArns = append(m.TaskArns, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadBalancer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadBalancer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadBalancer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ContainerName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPort", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ContainerPort = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.LoadBalancerName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkBinding) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.BindIP = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPort", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ContainerPort = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPort", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.HostPort = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Protocol = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.DoubleValue = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegerValue", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.IntegerValue = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongValue", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LongValue = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringSetValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringSetValue = append(m.StringSetValue, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ClusterArn = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeploymentConfiguration == nil {
				m.DeploymentConfiguration = &DeploymentConfiguration{}
			}
			if err := m.DeploymentConfiguration.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &Deployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.DesiredCount = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &ServiceEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancers = append(m.LoadBalancers, &LoadBalancer{})
			if err := m.LoadBalancers[len(m.LoadBalancers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.PendingCount = &v2
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.RoleArn = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RunningCount = &v2
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ServiceArn = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDefinition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.TaskDefinition = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceEvent) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ClusterArn = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstanceArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ContainerInstanceArn = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &Container{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.DesiredStatus = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.LastStatus = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overrides", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Overrides == nil {
				m.Overrides = &TaskOverride{}
			}
			if err := m.Overrides.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedAt == nil {
				m.StartedAt = &opsee_types.Timestamp{}
			}
			if err := m.StartedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.StartedBy = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoppedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoppedAt == nil {
				m.StoppedAt = &opsee_types.Timestamp{}
			}
			if err := m.StoppedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoppedReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.StoppedReason = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.TaskArn = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDefinitionArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.TaskDefinitionArn = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskOverride) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskOverride: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskOverride: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerOverrides", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerOverrides = append(m.ContainerOverrides, &ContainerOverride{})
			if err := m.ContainerOverrides[len(m.ContainerOverrides)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AgentHash = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AgentVersion = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.DockerVersion = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTypes = []byte{
	// 1757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x58, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x86, 0x2e, 0xd6, 0x65, 0x28, 0xc9, 0xf1, 0x38, 0x4e, 0xf4, 0x3b, 0xf9, 0x13, 0xff, 0xc4,
	0x8f, 0x20, 0x2d, 0x52, 0xa7, 0x70, 0x5a, 0x20, 0xbd, 0x2d, 0x7c, 0x4b, 0x63, 0xc4, 0x4e, 0x54,
	0xda, 0xcd, 0xa2, 0xab, 0xd0, 0xd4, 0x58, 0x26, 0x2c, 0x92, 0x02, 0x67, 0xe8, 0xc4, 0xbb, 0xae,
	0xfa, 0x04, 0x7d, 0x82, 0xae, 0xf2, 0x00, 0x5d, 0x74, 0x55, 0x14, 0xe8, 0xa6, 0xcb, 0x3e, 0x42,
	0xdb, 0xa7, 0x28, 0xba, 0x28, 0x7a, 0xe6, 0x42, 0x72, 0x78, 0x91, 0xa5, 0x34, 0x0b, 0x01, 0x9a,
	0x33, 0xe7, 0xcc, 0x9c, 0xf3, 0x9d, 0xcb, 0x9c, 0x43, 0x64, 0xb0, 0x8b, 0x09, 0xa1, 0xeb, 0x93,
	0x30, 0x60, 0x01, 0xee, 0x06, 0x13, 0x4a, 0xc8, 0xba, 0xfd, 0x92, 0xae, 0x13, 0x87, 0xae, 0xbe,
	0x37, 0x72, 0xd9, 0x69, 0x74, 0xbc, 0xee, 0x04, 0xde, 0xfd, 0x51, 0x30, 0x0a, 0xee, 0x0b, 0xae,
	0xe3, 0xe8, 0x44, 0xac, 0xc4, 0x42, 0xfc, 0x93, 0xd2, 0xab, 0xef, 0x6b, 0xec, 0xe2, 0xa0, 0x94,
	0x5f, 0x2c, 0xa5, 0x80, 0xbc, 0x42, 0x4a, 0x7c, 0x3c, 0x97, 0x84, 0xd0, 0xf0, 0x3e, 0x73, 0x3d,
	0x42, 0x99, 0xed, 0x4d, 0xa4, 0xac, 0xf9, 0x21, 0x6a, 0x6f, 0x32, 0x16, 0xba, 0xc7, 0x11, 0x23,
	0x18, 0xa3, 0xfa, 0x53, 0xdb, 0x23, 0xfd, 0xea, 0x5a, 0xe5, 0x6e, 0xdb, 0xaa, 0xfb, 0xf0, 0x1f,
	0x5f, 0x45, 0x0b, 0xcf, 0xed, 0x71, 0x44, 0xfa, 0x35, 0x41, 0x5c, 0x38, 0xe7, 0x0b, 0xf3, 0xaf,
	0x0a, 0x6a, 0x6f, 0x07, 0x3e, 0xb3, 0x5d, 0x9f, 0x84, 0xd8, 0x44, 0x9d, 0x64, 0xb1, 0x19, 0xfa,
	0x4a, 0xbe, 0xe3, 0x68, 0x34, 0xbc, 0x8a, 0x5a, 0xbb, 0xaf, 0x5c, 0xb6, 0x1d, 0x0c, 0xe5, 0x51,
	0xd8, 0x6a, 0x11, 0xb5, 0xc6, 0xb7, 0x10, 0xda, 0xb7, 0x29, 0x3b, 0x64, 0x36, 0x8b, 0x68, 0xbf,
	0x2e, 0xa4, 0xd1, 0x38, 0xa1, 0x24, 0x7a, 0x2d, 0x68, 0x7a, 0x7d, 0x8e, 0x16, 0x9f, 0x12, 0xf6,
	0x32, 0x08, 0xcf, 0xb6, 0x5c, 0x7f, 0xe8, 0xfa, 0x23, 0xda, 0x6f, 0xac, 0xd5, 0xee, 0x1a, 0x1b,
	0xff, 0x5d, 0xcf, 0xc0, 0xbf, 0x9e, 0xe5, 0xb2, 0x16, 0xfd, 0xac, 0x14, 0xbe, 0x86, 0x1a, 0x16,
	0xb1, 0x69, 0xe0, 0xf7, 0x9b, 0xe2, 0xf8, 0x46, 0x28, 0x56, 0xb8, 0x8f, 0x9a, 0x47, 0x36, 0x3d,
	0xe3, 0xf6, 0xb4, 0xc4, 0x46, 0x93, 0xc9, 0xa5, 0xf9, 0x73, 0x1d, 0x2d, 0x25, 0xf6, 0xee, 0xf9,
	0x00, 0xa7, 0xef, 0x10, 0x7c, 0x07, 0xf5, 0x36, 0x47, 0xc4, 0x07, 0x8b, 0x7c, 0x9f, 0x38, 0x8c,
	0x0c, 0x05, 0x0c, 0x2d, 0xab, 0x67, 0x67, 0xa8, 0xf8, 0x1e, 0x5a, 0x12, 0x7c, 0x5f, 0x4e, 0x86,
	0x36, 0x23, 0xca, 0x66, 0x09, 0xee, 0x92, 0x9d, 0xdf, 0xc0, 0x0f, 0x11, 0x4a, 0xfc, 0xc3, 0xa1,
	0xe1, 0x16, 0xf6, 0x73, 0x16, 0x26, 0x0c, 0x16, 0xb2, 0x13, 0x5e, 0xbc, 0x81, 0xae, 0x16, 0x94,
	0xe4, 0xc6, 0x48, 0x10, 0xaf, 0x3a, 0x25, 0x7b, 0xf8, 0xff, 0xa8, 0xbb, 0xeb, 0x6c, 0xc4, 0x94,
	0xbd, 0x21, 0x40, 0xca, 0x99, 0xbb, 0x44, 0x27, 0x72, 0x0b, 0x06, 0x44, 0xa0, 0xc7, 0x01, 0xa2,
	0xdb, 0x41, 0xe4, 0x33, 0x01, 0x1e, 0xb6, 0x96, 0x26, 0xf9, 0x0d, 0xbc, 0x87, 0x96, 0x2d, 0x32,
	0x72, 0x29, 0x23, 0x21, 0x19, 0x5a, 0x84, 0x06, 0x51, 0xe8, 0x80, 0x29, 0x2d, 0x61, 0xca, 0xf5,
	0x9c, 0x29, 0xf1, 0xbe, 0xb5, 0x1c, 0x16, 0x65, 0xc0, 0xe7, 0xd8, 0x22, 0x1e, 0x68, 0xcd, 0x1d,
	0x99, 0x9c, 0xd4, 0xbe, 0xfc, 0x24, 0x1c, 0x16, 0x44, 0xb8, 0x05, 0x56, 0xe4, 0xfb, 0x59, 0x0b,
	0x90, 0xb4, 0x20, 0xcc, 0x6f, 0xf0, 0x08, 0x51, 0x6e, 0x32, 0x64, 0x84, 0x50, 0xe9, 0x9b, 0x4f,
	0x91, 0xf1, 0x9c, 0x84, 0xd4, 0x0d, 0xfc, 0x3d, 0xff, 0x24, 0xe8, 0x77, 0x60, 0xd3, 0xd8, 0x58,
	0xcd, 0xe9, 0xa1, 0x71, 0x58, 0xc6, 0x79, 0xba, 0x30, 0xbf, 0xae, 0x68, 0x51, 0xf4, 0x0c, 0x76,
	0x42, 0x17, 0x52, 0x01, 0xa2, 0x6e, 0x3b, 0xf0, 0x3c, 0xdb, 0xe7, 0xe1, 0x53, 0xe3, 0x51, 0xe7,
	0xc8, 0x25, 0xfe, 0x0c, 0x19, 0xbb, 0xfe, 0xb9, 0x1b, 0x06, 0xbe, 0x07, 0x41, 0x02, 0x11, 0xc3,
	0xad, 0xbe, 0x91, 0xbb, 0xed, 0x09, 0xb9, 0x10, 0xd9, 0x3a, 0xb0, 0xdd, 0xd0, 0x32, 0x48, 0xca,
	0x9f, 0xe4, 0x50, 0x3d, 0xcd, 0x21, 0xf3, 0xfb, 0x2a, 0x42, 0x3b, 0x64, 0x32, 0x0e, 0x2e, 0x04,
	0xcb, 0x07, 0x90, 0xd3, 0x10, 0xfc, 0x10, 0xa4, 0x9b, 0x4c, 0x04, 0xaf, 0xb1, 0x71, 0x4d, 0x9d,
	0x2f, 0xcb, 0xdb, 0x51, 0x5c, 0x3c, 0xac, 0xb6, 0x13, 0x33, 0xf2, 0xe4, 0xdf, 0x21, 0xd4, 0x05,
	0x47, 0x49, 0x18, 0x65, 0x72, 0x77, 0x86, 0x1a, 0x0d, 0xf7, 0x50, 0x15, 0x82, 0x49, 0x5e, 0x5d,
	0x75, 0x87, 0x5c, 0x46, 0x45, 0x90, 0x94, 0x59, 0x90, 0x32, 0x13, 0x8d, 0xc6, 0x79, 0x94, 0x8f,
	0x24, 0x4f, 0x43, 0xf2, 0x84, 0x1a, 0x4d, 0xf3, 0x4c, 0x33, 0xe3, 0x19, 0xc8, 0x45, 0xee, 0xbf,
	0x1d, 0x72, 0x02, 0x8e, 0x67, 0x80, 0xb8, 0x4a, 0xe1, 0x1e, 0xcb, 0x50, 0xb9, 0xc5, 0x32, 0xdb,
	0xb8, 0xc5, 0xed, 0xcb, 0x2d, 0x8e, 0x62, 0x46, 0xf3, 0x25, 0xba, 0x9e, 0xa2, 0x06, 0x2e, 0x3c,
	0x71, 0x47, 0x51, 0x68, 0x8b, 0x03, 0xe1, 0xe2, 0x03, 0xfb, 0x95, 0xeb, 0x45, 0xde, 0x80, 0x40,
	0xa4, 0xf9, 0x12, 0x47, 0x6c, 0xf5, 0xbc, 0x0c, 0x15, 0x2e, 0x5e, 0x39, 0x00, 0x25, 0x80, 0xf2,
	0x98, 0xd8, 0x63, 0x76, 0x7a, 0x11, 0xb3, 0x4b, 0xf4, 0x56, 0xbc, 0xb2, 0x4d, 0xf3, 0x0c, 0xdd,
	0x06, 0xa8, 0x1d, 0xc8, 0x70, 0x52, 0x48, 0x6d, 0xba, 0xe7, 0x4f, 0x22, 0x26, 0xe2, 0x67, 0x1c,
	0xf1, 0xc4, 0x51, 0x55, 0xb8, 0xe9, 0xc8, 0x25, 0x5e, 0x47, 0xb8, 0x28, 0x24, 0xc2, 0xa8, 0x6d,
	0xe1, 0x42, 0x35, 0xa0, 0xe6, 0xeb, 0x0a, 0x5a, 0x9b, 0x7e, 0xdb, 0xb3, 0x88, 0xf1, 0xeb, 0x06,
	0xa5, 0x87, 0x56, 0x45, 0x6c, 0xae, 0xe5, 0x62, 0xb3, 0xc0, 0x58, 0x76, 0x2d, 0x94, 0xad, 0xd6,
	0x23, 0xdb, 0x1d, 0x47, 0xa1, 0x52, 0x2e, 0xf5, 0x48, 0x7c, 0x8e, 0xda, 0xb6, 0x5a, 0x27, 0x8a,
	0xcf, 0x3c, 0x40, 0x2b, 0xb1, 0xa6, 0x87, 0x24, 0x3c, 0x77, 0xe7, 0x40, 0x03, 0x9e, 0xa3, 0x98,
	0x55, 0x61, 0xd0, 0xa2, 0x6a, 0xcd, 0x33, 0xf3, 0x5a, 0xfe, 0x3c, 0x65, 0xaf, 0xae, 0x5d, 0x75,
	0x3e, 0xed, 0xb8, 0x4c, 0xe6, 0xaa, 0xa2, 0x8c, 0xda, 0xd6, 0x54, 0xd8, 0x41, 0x38, 0xd6, 0x40,
	0x14, 0xa2, 0x59, 0xe6, 0xc0, 0x2b, 0x2d, 0xf8, 0x94, 0x2d, 0x0b, 0x3c, 0xce, 0xa9, 0xc9, 0xd0,
	0x72, 0xe6, 0x94, 0xb7, 0x30, 0xe2, 0x1d, 0xfd, 0x02, 0x63, 0x63, 0x39, 0x27, 0xc0, 0xf7, 0xe2,
	0x5b, 0x1f, 0xa0, 0xa6, 0x92, 0xc7, 0x57, 0x50, 0x2d, 0xed, 0x07, 0x6a, 0x36, 0xbc, 0x30, 0xe9,
	0x6b, 0x5b, 0xd3, 0x5f, 0x5b, 0xf3, 0x21, 0xea, 0xe8, 0xb5, 0xeb, 0x0d, 0x5a, 0x91, 0x2f, 0xd0,
	0xd2, 0x3e, 0xbc, 0x14, 0x0a, 0x18, 0x85, 0x14, 0x74, 0x14, 0x90, 0x87, 0x50, 0xf0, 0xa3, 0x31,
	0xa3, 0x2a, 0x07, 0x91, 0x97, 0x50, 0xf0, 0x4d, 0xd4, 0x7e, 0x4a, 0x5e, 0xb1, 0xa3, 0xe0, 0x8c,
	0xc4, 0x9a, 0xb4, 0xfd, 0x98, 0x60, 0x1e, 0x21, 0xac, 0x1f, 0xa9, 0x60, 0x5b, 0x43, 0x86, 0xa2,
	0x80, 0x4d, 0x54, 0x95, 0x67, 0xc3, 0x49, 0x49, 0x33, 0x4e, 0x8d, 0xd0, 0x0d, 0x71, 0xea, 0x1b,
	0x67, 0x6e, 0xd6, 0x98, 0xda, 0xe5, 0xc6, 0xd4, 0xf3, 0xd7, 0x86, 0xe8, 0x66, 0xf9, 0xb5, 0xca,
	0x2c, 0x28, 0x45, 0x65, 0x7d, 0x42, 0x6c, 0xe0, 0x4a, 0x59, 0xa3, 0x30, 0xcb, 0xd4, 0x33, 0xe9,
	0x93, 0x79, 0x93, 0xf1, 0xed, 0x0c, 0x54, 0xde, 0xca, 0x65, 0x6a, 0x46, 0xa6, 0x9a, 0x93, 0xe1,
	0xbe, 0x54, 0xfc, 0xc2, 0x54, 0x99, 0x35, 0x06, 0x4d, 0x49, 0xe6, 0xb7, 0x55, 0xd4, 0xe3, 0xc7,
	0xce, 0x95, 0x7e, 0xf7, 0x4a, 0x1a, 0xc2, 0xb8, 0xa7, 0x2b, 0xe0, 0xc7, 0xbb, 0x2c, 0xf5, 0x62,
	0x66, 0x3a, 0xde, 0xee, 0x50, 0x27, 0xf2, 0x4c, 0x79, 0x64, 0x7b, 0xee, 0xf8, 0x42, 0x75, 0x6c,
	0x8d, 0x13, 0xb1, 0xca, 0x81, 0xd5, 0xb8, 0x1c, 0xac, 0xe6, 0x74, 0xc3, 0x45, 0x7a, 0xc9, 0x67,
	0x31, 0x36, 0x9c, 0x93, 0xb8, 0x3c, 0x68, 0x10, 0xc2, 0x53, 0xb7, 0x75, 0x21, 0xde, 0x44, 0x90,
	0xa7, 0x31, 0xc1, 0x7c, 0x82, 0x16, 0x13, 0x54, 0xe6, 0x42, 0x1a, 0x0a, 0xad, 0x6a, 0xa3, 0x93,
	0x42, 0xab, 0xfa, 0x68, 0x6a, 0x7e, 0x53, 0x41, 0x9d, 0xfd, 0xc0, 0x1e, 0x6e, 0xd9, 0x63, 0x0e,
	0x4c, 0xc8, 0x91, 0x49, 0x70, 0xd4, 0xd2, 0xbf, 0xeb, 0xe8, 0xc4, 0x0c, 0xd7, 0x20, 0x08, 0xe3,
	0x47, 0x33, 0xe5, 0xe2, 0x44, 0xfc, 0x2e, 0xba, 0xa2, 0x9f, 0xad, 0x35, 0x3f, 0x57, 0xc6, 0x39,
	0x3a, 0x57, 0xa4, 0x97, 0x9d, 0x13, 0x38, 0xfc, 0xfc, 0xef, 0xde, 0x40, 0xe9, 0xd0, 0x38, 0x16,
	0xab, 0x39, 0x2f, 0x07, 0xab, 0x1f, 0x07, 0x94, 0x09, 0x86, 0xba, 0x9c, 0x76, 0x4e, 0xd5, 0x9a,
	0xef, 0x0d, 0xf8, 0xec, 0xe5, 0x04, 0x63, 0xe5, 0xda, 0xd6, 0x44, 0xad, 0xcd, 0x1f, 0x2b, 0xa8,
	0x15, 0xb7, 0xa9, 0xdc, 0x57, 0x3b, 0x41, 0x74, 0x3c, 0x26, 0xb2, 0xea, 0x71, 0x3d, 0x2a, 0x96,
	0x31, 0x4c, 0x49, 0xbc, 0x47, 0xda, 0xf3, 0x19, 0x19, 0x91, 0x30, 0x2d, 0x8c, 0xd0, 0x23, 0xb9,
	0x1a, 0x8d, 0xbb, 0x67, 0x3f, 0xf0, 0x47, 0x92, 0x41, 0xea, 0xd2, 0x1e, 0xc7, 0x84, 0xd2, 0xd1,
	0x0a, 0x9a, 0x98, 0x43, 0x18, 0x23, 0xfc, 0xd1, 0x21, 0x61, 0x52, 0xac, 0x21, 0x1c, 0xd7, 0xa3,
	0x19, 0x2a, 0x97, 0x3d, 0x82, 0x2e, 0x49, 0x05, 0x59, 0x9d, 0x77, 0x4c, 0xe6, 0xdf, 0x75, 0xd4,
	0x54, 0x01, 0xc6, 0x23, 0x35, 0x2d, 0x98, 0x0a, 0x46, 0x94, 0xd6, 0xcb, 0x6c, 0xbf, 0x59, 0x9b,
	0xb7, 0xdf, 0x7c, 0x31, 0xb5, 0xfb, 0x12, 0xd6, 0x19, 0x1b, 0x77, 0x72, 0x6f, 0xd3, 0x14, 0x6e,
	0xeb, 0xfa, 0x70, 0x4a, 0x13, 0xf7, 0x09, 0xe0, 0x9e, 0x6c, 0x51, 0x80, 0x86, 0xbf, 0x78, 0xff,
	0x99, 0x7a, 0x2a, 0xb8, 0x24, 0xe5, 0x2e, 0xb4, 0xc3, 0x8d, 0x92, 0x76, 0xf8, 0x01, 0x6a, 0xec,
	0x9e, 0x8b, 0xb3, 0x9b, 0xa5, 0x5d, 0xbc, 0x02, 0x50, 0xf0, 0x58, 0x0d, 0x22, 0x58, 0xf1, 0x26,
	0xea, 0xea, 0xf1, 0x1c, 0x4f, 0x50, 0x79, 0x59, 0x9d, 0xc7, 0xea, 0xea, 0x91, 0x4e, 0x0b, 0x6d,
	0x77, 0xbb, 0xa4, 0xed, 0x86, 0x22, 0x67, 0x05, 0x63, 0x31, 0x29, 0x22, 0x59, 0xe4, 0x42, 0xb9,
	0x2c, 0x34, 0xe4, 0x46, 0x49, 0x43, 0x0e, 0x2e, 0x4f, 0xeb, 0xaa, 0x98, 0x88, 0xc0, 0xe5, 0x69,
	0x59, 0xcd, 0x97, 0x9f, 0x6e, 0xb1, 0xfc, 0xa4, 0x2d, 0x7d, 0x6f, 0x46, 0x4b, 0xbf, 0x58, 0xd6,
	0xd2, 0x9b, 0x3e, 0xea, 0xe8, 0xf0, 0xfd, 0xcb, 0xa1, 0x46, 0x0e, 0x2c, 0xb5, 0x64, 0x60, 0x01,
	0x54, 0x0e, 0x08, 0xa5, 0x30, 0x9f, 0xab, 0x1a, 0xd2, 0xf4, 0xe4, 0x92, 0x7f, 0x0c, 0xa8, 0x73,
	0xc5, 0x66, 0x46, 0xfb, 0xb4, 0x79, 0xbc, 0x76, 0xc9, 0x3c, 0x0e, 0xd3, 0x7f, 0x22, 0x33, 0x6d,
	0xfa, 0x4f, 0x18, 0xe0, 0xb6, 0x84, 0x37, 0x6b, 0xf6, 0xc2, 0xbc, 0x66, 0x17, 0x5e, 0xa6, 0x46,
	0xd9, 0xcb, 0x94, 0xfd, 0x5c, 0xd3, 0x2c, 0x7c, 0xae, 0xf9, 0x08, 0xb5, 0xe3, 0x79, 0x96, 0x8a,
	0x17, 0xa6, 0x18, 0xa5, 0x1c, 0xb1, 0x98, 0xc7, 0x6a, 0x07, 0x31, 0x37, 0x57, 0x5b, 0x3d, 0x3e,
	0xb3, 0x07, 0x32, 0x1a, 0x33, 0x66, 0x9f, 0x2c, 0x94, 0x7b, 0xb2, 0xe4, 0x99, 0xc1, 0x64, 0x22,
	0xce, 0x34, 0x66, 0x9d, 0xa9, 0x18, 0x39, 0x14, 0x4a, 0x4a, 0xf5, 0xab, 0x32, 0x98, 0xbb, 0x54,
	0x27, 0xea, 0x1f, 0x89, 0xba, 0x99, 0x8f, 0x44, 0xbc, 0x25, 0xc8, 0xc6, 0x2b, 0xe7, 0x91, 0x21,
	0xbd, 0xc4, 0xf2, 0x1b, 0xe6, 0x0b, 0xd4, 0xd1, 0x21, 0xc9, 0xcc, 0x55, 0x29, 0x96, 0x33, 0xe6,
	0xaa, 0x04, 0xd0, 0x74, 0xae, 0x4a, 0x64, 0xa1, 0xfb, 0xd4, 0x3f, 0x56, 0x70, 0xc8, 0xc4, 0x57,
	0xa8, 0xc7, 0x36, 0x3d, 0x8d, 0x1f, 0x6d, 0x3b, 0x26, 0xf0, 0x54, 0x17, 0xbb, 0x4a, 0x42, 0xc5,
	0x68, 0xc7, 0xd6, 0x68, 0x22, 0x56, 0x02, 0xe7, 0x0c, 0x9e, 0x19, 0xc5, 0x14, 0x77, 0x31, 0x3a,
	0x71, 0xeb, 0x7f, 0x7f, 0xfe, 0x7e, 0xab, 0xf2, 0xfa, 0x8f, 0x5b, 0x95, 0x1f, 0xe0, 0xf7, 0x0b,
	0xfc, 0x7e, 0x85, 0xdf, 0x6f, 0xf0, 0xfb, 0xe9, 0xbb, 0xdb, 0x95, 0xaf, 0x6a, 0xa0, 0xff, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xe3, 0x4e, 0x33, 0x3c, 0x15, 0x00, 0x00,
}
