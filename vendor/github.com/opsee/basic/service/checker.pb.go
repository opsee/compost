// Code generated by protoc-gen-gogo.
// source: checker.proto
// DO NOT EDIT!

package service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/opsee/protobuf/opseeproto/types"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee2 "github.com/opsee/basic/schema"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CheckResourceResponse struct {
	Id    string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Check *opsee2.Check `protobuf:"bytes,2,opt,name=check" json:"check,omitempty"`
	Error string        `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CheckResourceResponse) Reset()                    { *m = CheckResourceResponse{} }
func (m *CheckResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResourceResponse) ProtoMessage()               {}
func (*CheckResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptorChecker, []int{0} }

func (m *CheckResourceResponse) GetCheck() *opsee2.Check {
	if m != nil {
		return m.Check
	}
	return nil
}

type ResourceResponse struct {
	Responses []*CheckResourceResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *ResourceResponse) Reset()                    { *m = ResourceResponse{} }
func (m *ResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*ResourceResponse) ProtoMessage()               {}
func (*ResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptorChecker, []int{1} }

func (m *ResourceResponse) GetResponses() []*CheckResourceResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type CheckResourceRequest struct {
	Checks []*opsee2.Check `protobuf:"bytes,1,rep,name=checks" json:"checks,omitempty"`
}

func (m *CheckResourceRequest) Reset()                    { *m = CheckResourceRequest{} }
func (m *CheckResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckResourceRequest) ProtoMessage()               {}
func (*CheckResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptorChecker, []int{2} }

func (m *CheckResourceRequest) GetChecks() []*opsee2.Check {
	if m != nil {
		return m.Checks
	}
	return nil
}

type ResultsResource struct {
	Results []*opsee2.CheckResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ResultsResource) Reset()                    { *m = ResultsResource{} }
func (m *ResultsResource) String() string            { return proto.CompactTextString(m) }
func (*ResultsResource) ProtoMessage()               {}
func (*ResultsResource) Descriptor() ([]byte, []int) { return fileDescriptorChecker, []int{3} }

func (m *ResultsResource) GetResults() []*opsee2.CheckResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type TestCheckRequest struct {
	MaxHosts int32                  `protobuf:"varint,1,opt,name=max_hosts,json=maxHosts,proto3" json:"max_hosts,omitempty"`
	Deadline *opsee_types.Timestamp `protobuf:"bytes,2,opt,name=deadline" json:"deadline,omitempty"`
	Check    *opsee2.Check          `protobuf:"bytes,3,opt,name=check" json:"check,omitempty"`
}

func (m *TestCheckRequest) Reset()                    { *m = TestCheckRequest{} }
func (m *TestCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*TestCheckRequest) ProtoMessage()               {}
func (*TestCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptorChecker, []int{4} }

func (m *TestCheckRequest) GetDeadline() *opsee_types.Timestamp {
	if m != nil {
		return m.Deadline
	}
	return nil
}

func (m *TestCheckRequest) GetCheck() *opsee2.Check {
	if m != nil {
		return m.Check
	}
	return nil
}

type TestCheckResponse struct {
	Responses []*opsee2.CheckResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
	Error     string                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *TestCheckResponse) Reset()                    { *m = TestCheckResponse{} }
func (m *TestCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*TestCheckResponse) ProtoMessage()               {}
func (*TestCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptorChecker, []int{5} }

func (m *TestCheckResponse) GetResponses() []*opsee2.CheckResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func init() {
	proto.RegisterType((*CheckResourceResponse)(nil), "opsee.CheckResourceResponse")
	proto.RegisterType((*ResourceResponse)(nil), "opsee.ResourceResponse")
	proto.RegisterType((*CheckResourceRequest)(nil), "opsee.CheckResourceRequest")
	proto.RegisterType((*ResultsResource)(nil), "opsee.ResultsResource")
	proto.RegisterType((*TestCheckRequest)(nil), "opsee.TestCheckRequest")
	proto.RegisterType((*TestCheckResponse)(nil), "opsee.TestCheckResponse")
}
func (this *CheckResourceResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckResourceResponse)
	if !ok {
		that2, ok := that.(CheckResourceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Check.Equal(that1.Check) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *ResourceResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResourceResponse)
	if !ok {
		that2, ok := that.(ResourceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return false
		}
	}
	return true
}
func (this *CheckResourceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckResourceRequest)
	if !ok {
		that2, ok := that.(CheckResourceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Checks) != len(that1.Checks) {
		return false
	}
	for i := range this.Checks {
		if !this.Checks[i].Equal(that1.Checks[i]) {
			return false
		}
	}
	return true
}
func (this *ResultsResource) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResultsResource)
	if !ok {
		that2, ok := that.(ResultsResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *TestCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TestCheckRequest)
	if !ok {
		that2, ok := that.(TestCheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaxHosts != that1.MaxHosts {
		return false
	}
	if !this.Deadline.Equal(that1.Deadline) {
		return false
	}
	if !this.Check.Equal(that1.Check) {
		return false
	}
	return true
}
func (this *TestCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TestCheckResponse)
	if !ok {
		that2, ok := that.(TestCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}

type CheckResourceResponseGetter interface {
	GetCheckResourceResponse() *CheckResourceResponse
}

var GraphQLCheckResourceResponseType *github_com_graphql_go_graphql.Object

type ResourceResponseGetter interface {
	GetResourceResponse() *ResourceResponse
}

var GraphQLResourceResponseType *github_com_graphql_go_graphql.Object

type CheckResourceRequestGetter interface {
	GetCheckResourceRequest() *CheckResourceRequest
}

var GraphQLCheckResourceRequestType *github_com_graphql_go_graphql.Object

type ResultsResourceGetter interface {
	GetResultsResource() *ResultsResource
}

var GraphQLResultsResourceType *github_com_graphql_go_graphql.Object

type TestCheckRequestGetter interface {
	GetTestCheckRequest() *TestCheckRequest
}

var GraphQLTestCheckRequestType *github_com_graphql_go_graphql.Object

type TestCheckResponseGetter interface {
	GetTestCheckResponse() *TestCheckResponse
}

var GraphQLTestCheckResponseType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLCheckResourceResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceCheckResourceResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResourceResponse)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(CheckResourceResponseGetter)
						if ok {
							face := inter.GetCheckResourceResponse()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"check": &github_com_graphql_go_graphql.Field{
					Type:        opsee2.GraphQLCheckType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResourceResponse)
						if ok {
							if obj.Check == nil {
								return nil, nil
							}
							return obj.GetCheck(), nil
						}
						inter, ok := p.Source.(CheckResourceResponseGetter)
						if ok {
							face := inter.GetCheckResourceResponse()
							if face == nil {
								return nil, nil
							}
							if face.Check == nil {
								return nil, nil
							}
							return face.GetCheck(), nil
						}
						return nil, fmt.Errorf("field check not resolved")
					},
				},
				"error": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResourceResponse)
						if ok {
							return obj.Error, nil
						}
						inter, ok := p.Source.(CheckResourceResponseGetter)
						if ok {
							face := inter.GetCheckResourceResponse()
							if face == nil {
								return nil, nil
							}
							return face.Error, nil
						}
						return nil, fmt.Errorf("field error not resolved")
					},
				},
			}
		}),
	})
	GraphQLResourceResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceResourceResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"responses": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLCheckResourceResponseType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ResourceResponse)
						if ok {
							return obj.Responses, nil
						}
						inter, ok := p.Source.(ResourceResponseGetter)
						if ok {
							face := inter.GetResourceResponse()
							if face == nil {
								return nil, nil
							}
							return face.Responses, nil
						}
						return nil, fmt.Errorf("field responses not resolved")
					},
				},
			}
		}),
	})
	GraphQLCheckResourceRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceCheckResourceRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"checks": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee2.GraphQLCheckType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResourceRequest)
						if ok {
							return obj.Checks, nil
						}
						inter, ok := p.Source.(CheckResourceRequestGetter)
						if ok {
							face := inter.GetCheckResourceRequest()
							if face == nil {
								return nil, nil
							}
							return face.Checks, nil
						}
						return nil, fmt.Errorf("field checks not resolved")
					},
				},
			}
		}),
	})
	GraphQLResultsResourceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceResultsResource",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"results": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee2.GraphQLCheckResultType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ResultsResource)
						if ok {
							return obj.Results, nil
						}
						inter, ok := p.Source.(ResultsResourceGetter)
						if ok {
							face := inter.GetResultsResource()
							if face == nil {
								return nil, nil
							}
							return face.Results, nil
						}
						return nil, fmt.Errorf("field results not resolved")
					},
				},
			}
		}),
	})
	GraphQLTestCheckRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceTestCheckRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"max_hosts": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckRequest)
						if ok {
							return obj.MaxHosts, nil
						}
						inter, ok := p.Source.(TestCheckRequestGetter)
						if ok {
							face := inter.GetTestCheckRequest()
							if face == nil {
								return nil, nil
							}
							return face.MaxHosts, nil
						}
						return nil, fmt.Errorf("field max_hosts not resolved")
					},
				},
				"deadline": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckRequest)
						if ok {
							if obj.Deadline == nil {
								return nil, nil
							}
							return obj.GetDeadline(), nil
						}
						inter, ok := p.Source.(TestCheckRequestGetter)
						if ok {
							face := inter.GetTestCheckRequest()
							if face == nil {
								return nil, nil
							}
							if face.Deadline == nil {
								return nil, nil
							}
							return face.GetDeadline(), nil
						}
						return nil, fmt.Errorf("field deadline not resolved")
					},
				},
				"check": &github_com_graphql_go_graphql.Field{
					Type:        opsee2.GraphQLCheckType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckRequest)
						if ok {
							if obj.Check == nil {
								return nil, nil
							}
							return obj.GetCheck(), nil
						}
						inter, ok := p.Source.(TestCheckRequestGetter)
						if ok {
							face := inter.GetTestCheckRequest()
							if face == nil {
								return nil, nil
							}
							if face.Check == nil {
								return nil, nil
							}
							return face.GetCheck(), nil
						}
						return nil, fmt.Errorf("field check not resolved")
					},
				},
			}
		}),
	})
	GraphQLTestCheckResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceTestCheckResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"responses": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee2.GraphQLCheckResponseType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckResponse)
						if ok {
							return obj.Responses, nil
						}
						inter, ok := p.Source.(TestCheckResponseGetter)
						if ok {
							face := inter.GetTestCheckResponse()
							if face == nil {
								return nil, nil
							}
							return face.Responses, nil
						}
						return nil, fmt.Errorf("field responses not resolved")
					},
				},
				"error": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckResponse)
						if ok {
							return obj.Error, nil
						}
						inter, ok := p.Source.(TestCheckResponseGetter)
						if ok {
							face := inter.GetTestCheckResponse()
							if face == nil {
								return nil, nil
							}
							return face.Error, nil
						}
						return nil, fmt.Errorf("field error not resolved")
					},
				},
			}
		}),
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Checker service

type CheckerClient interface {
	TestCheck(ctx context.Context, in *TestCheckRequest, opts ...grpc.CallOption) (*TestCheckResponse, error)
	CreateCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	RetrieveCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	UpdateCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	DeleteCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
}

type checkerClient struct {
	cc *grpc.ClientConn
}

func NewCheckerClient(cc *grpc.ClientConn) CheckerClient {
	return &checkerClient{cc}
}

func (c *checkerClient) TestCheck(ctx context.Context, in *TestCheckRequest, opts ...grpc.CallOption) (*TestCheckResponse, error) {
	out := new(TestCheckResponse)
	err := grpc.Invoke(ctx, "/opsee.Checker/TestCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) CreateCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/opsee.Checker/CreateCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) RetrieveCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/opsee.Checker/RetrieveCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) UpdateCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/opsee.Checker/UpdateCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) DeleteCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/opsee.Checker/DeleteCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Checker service

type CheckerServer interface {
	TestCheck(context.Context, *TestCheckRequest) (*TestCheckResponse, error)
	CreateCheck(context.Context, *CheckResourceRequest) (*ResourceResponse, error)
	RetrieveCheck(context.Context, *CheckResourceRequest) (*ResourceResponse, error)
	UpdateCheck(context.Context, *CheckResourceRequest) (*ResourceResponse, error)
	DeleteCheck(context.Context, *CheckResourceRequest) (*ResourceResponse, error)
}

func RegisterCheckerServer(s *grpc.Server, srv CheckerServer) {
	s.RegisterService(&_Checker_serviceDesc, srv)
}

func _Checker_TestCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TestCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).TestCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Checker_CreateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CheckResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).CreateCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Checker_RetrieveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CheckResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).RetrieveCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Checker_UpdateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CheckResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).UpdateCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Checker_DeleteCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CheckResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).DeleteCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Checker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opsee.Checker",
	HandlerType: (*CheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestCheck",
			Handler:    _Checker_TestCheck_Handler,
		},
		{
			MethodName: "CreateCheck",
			Handler:    _Checker_CreateCheck_Handler,
		},
		{
			MethodName: "RetrieveCheck",
			Handler:    _Checker_RetrieveCheck_Handler,
		},
		{
			MethodName: "UpdateCheck",
			Handler:    _Checker_UpdateCheck_Handler,
		},
		{
			MethodName: "DeleteCheck",
			Handler:    _Checker_DeleteCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *CheckResourceResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckResourceResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintChecker(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if m.Check != nil {
		data[i] = 0x12
		i++
		i = encodeVarintChecker(data, i, uint64(m.Check.Size()))
		n1, err := m.Check.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Error) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintChecker(data, i, uint64(len(m.Error)))
		i += copy(data[i:], m.Error)
	}
	return i, nil
}

func (m *ResourceResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResourceResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			data[i] = 0xa
			i++
			i = encodeVarintChecker(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CheckResourceRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckResourceRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Checks) > 0 {
		for _, msg := range m.Checks {
			data[i] = 0xa
			i++
			i = encodeVarintChecker(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResultsResource) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResultsResource) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			data[i] = 0xa
			i++
			i = encodeVarintChecker(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestCheckRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TestCheckRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxHosts != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintChecker(data, i, uint64(m.MaxHosts))
	}
	if m.Deadline != nil {
		data[i] = 0x12
		i++
		i = encodeVarintChecker(data, i, uint64(m.Deadline.Size()))
		n2, err := m.Deadline.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Check != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintChecker(data, i, uint64(m.Check.Size()))
		n3, err := m.Check.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *TestCheckResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TestCheckResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			data[i] = 0xa
			i++
			i = encodeVarintChecker(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Error) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintChecker(data, i, uint64(len(m.Error)))
		i += copy(data[i:], m.Error)
	}
	return i, nil
}

func encodeFixed64Checker(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Checker(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintChecker(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCheckResourceResponse(r randyChecker, easy bool) *CheckResourceResponse {
	this := &CheckResourceResponse{}
	this.Id = randStringChecker(r)
	if r.Intn(10) != 0 {
		this.Check = opsee2.NewPopulatedCheck(r, easy)
	}
	this.Error = randStringChecker(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResourceResponse(r randyChecker, easy bool) *ResourceResponse {
	this := &ResourceResponse{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Responses = make([]*CheckResourceResponse, v1)
		for i := 0; i < v1; i++ {
			this.Responses[i] = NewPopulatedCheckResourceResponse(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckResourceRequest(r randyChecker, easy bool) *CheckResourceRequest {
	this := &CheckResourceRequest{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Checks = make([]*opsee2.Check, v2)
		for i := 0; i < v2; i++ {
			this.Checks[i] = opsee2.NewPopulatedCheck(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResultsResource(r randyChecker, easy bool) *ResultsResource {
	this := &ResultsResource{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Results = make([]*opsee2.CheckResult, v3)
		for i := 0; i < v3; i++ {
			this.Results[i] = opsee2.NewPopulatedCheckResult(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTestCheckRequest(r randyChecker, easy bool) *TestCheckRequest {
	this := &TestCheckRequest{}
	this.MaxHosts = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxHosts *= -1
	}
	if r.Intn(10) != 0 {
		this.Deadline = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Check = opsee2.NewPopulatedCheck(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTestCheckResponse(r randyChecker, easy bool) *TestCheckResponse {
	this := &TestCheckResponse{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Responses = make([]*opsee2.CheckResponse, v4)
		for i := 0; i < v4; i++ {
			this.Responses[i] = opsee2.NewPopulatedCheckResponse(r, easy)
		}
	}
	this.Error = randStringChecker(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyChecker interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneChecker(r randyChecker) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringChecker(r randyChecker) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneChecker(r)
	}
	return string(tmps)
}
func randUnrecognizedChecker(r randyChecker, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldChecker(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldChecker(data []byte, r randyChecker, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateChecker(data, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		data = encodeVarintPopulateChecker(data, uint64(v6))
	case 1:
		data = encodeVarintPopulateChecker(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateChecker(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateChecker(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateChecker(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateChecker(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *CheckResourceResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChecker(uint64(l))
	}
	if m.Check != nil {
		l = m.Check.Size()
		n += 1 + l + sovChecker(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovChecker(uint64(l))
	}
	return n
}

func (m *ResourceResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovChecker(uint64(l))
		}
	}
	return n
}

func (m *CheckResourceRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Checks) > 0 {
		for _, e := range m.Checks {
			l = e.Size()
			n += 1 + l + sovChecker(uint64(l))
		}
	}
	return n
}

func (m *ResultsResource) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovChecker(uint64(l))
		}
	}
	return n
}

func (m *TestCheckRequest) Size() (n int) {
	var l int
	_ = l
	if m.MaxHosts != 0 {
		n += 1 + sovChecker(uint64(m.MaxHosts))
	}
	if m.Deadline != nil {
		l = m.Deadline.Size()
		n += 1 + l + sovChecker(uint64(l))
	}
	if m.Check != nil {
		l = m.Check.Size()
		n += 1 + l + sovChecker(uint64(l))
	}
	return n
}

func (m *TestCheckResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovChecker(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovChecker(uint64(l))
	}
	return n
}

func sovChecker(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChecker(x uint64) (n int) {
	return sovChecker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckResourceResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChecker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckResourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckResourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Check == nil {
				m.Check = &opsee2.Check{}
			}
			if err := m.Check.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChecker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChecker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChecker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &CheckResourceResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChecker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChecker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckResourceRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChecker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckResourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckResourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checks = append(m.Checks, &opsee2.Check{})
			if err := m.Checks[len(m.Checks)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChecker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChecker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultsResource) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChecker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultsResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultsResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &opsee2.CheckResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChecker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChecker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestCheckRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChecker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHosts", wireType)
			}
			m.MaxHosts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxHosts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deadline == nil {
				m.Deadline = &opsee_types.Timestamp{}
			}
			if err := m.Deadline.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Check == nil {
				m.Check = &opsee2.Check{}
			}
			if err := m.Check.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChecker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChecker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestCheckResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChecker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &opsee2.CheckResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChecker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChecker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChecker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChecker(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChecker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChecker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChecker
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChecker
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChecker(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChecker = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChecker   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorChecker = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x53, 0xb1, 0x6e, 0x13, 0x41,
	0x10, 0xe5, 0x6c, 0x1c, 0xc7, 0x13, 0x02, 0x61, 0x65, 0xc0, 0x32, 0x10, 0x60, 0x05, 0x92, 0x85,
	0x90, 0x0f, 0x19, 0x0a, 0x14, 0x21, 0x81, 0x62, 0x10, 0x54, 0x14, 0xa7, 0xd0, 0x20, 0x21, 0xb4,
	0xbe, 0x1b, 0xf0, 0x09, 0x9f, 0xf7, 0xd8, 0xdd, 0x8b, 0x48, 0xc7, 0x6f, 0xd0, 0x52, 0x20, 0x3e,
	0x81, 0x92, 0x92, 0x92, 0x4f, 0x00, 0x3a, 0xfe, 0x80, 0x92, 0xc9, 0xee, 0x1e, 0x89, 0xef, 0x28,
	0x88, 0x5c, 0xac, 0xbc, 0x3b, 0x33, 0xef, 0xbd, 0x99, 0x37, 0x3e, 0x58, 0x8f, 0xa7, 0x18, 0xbf,
	0x46, 0x35, 0xcc, 0x95, 0x34, 0x92, 0xb5, 0x64, 0xae, 0x11, 0xfb, 0xb7, 0x5f, 0xa5, 0x66, 0x5a,
	0x4c, 0x86, 0xb1, 0xcc, 0x42, 0x1b, 0x09, 0x6d, 0x7a, 0x52, 0xbc, 0x74, 0x4f, 0xfb, 0x0a, 0xcd,
	0x5e, 0x8e, 0x3a, 0x14, 0xf3, 0x3d, 0x07, 0xee, 0x6f, 0x1d, 0x01, 0x65, 0xd2, 0x0c, 0xb5, 0x11,
	0x59, 0xee, 0xb1, 0x37, 0xff, 0x0b, 0x6b, 0xaf, 0x1e, 0x71, 0xbd, 0x86, 0x98, 0x08, 0x9d, 0xc6,
	0xa1, 0xa6, 0x89, 0x32, 0x11, 0xda, 0xb9, 0xb4, 0xab, 0xe5, 0x02, 0xce, 0x8c, 0xf7, 0xdf, 0x11,
	0x6a, 0x59, 0xa8, 0x18, 0xe9, 0x37, 0x97, 0x73, 0x8d, 0xec, 0x24, 0x34, 0xd2, 0xa4, 0x17, 0x5c,
	0x0e, 0x06, 0x9d, 0x88, 0x6e, 0x8c, 0x43, 0xcb, 0x02, 0x7b, 0x0d, 0x0a, 0xad, 0x8d, 0x4e, 0x0c,
	0x9d, 0xa2, 0x03, 0xbb, 0x14, 0xeb, 0x42, 0x0b, 0x95, 0x92, 0xaa, 0xd7, 0xb4, 0x30, 0xf7, 0xe0,
	0x4f, 0x60, 0xa3, 0xc6, 0xbe, 0x05, 0x1d, 0xe5, 0xef, 0x9a, 0x44, 0x9a, 0xc4, 0x78, 0x61, 0x81,
	0xb1, 0x02, 0x88, 0x0e, 0xca, 0xf9, 0x5d, 0xe8, 0x56, 0x6a, 0xde, 0x14, 0xe4, 0x18, 0xbb, 0x0a,
	0x2b, 0x6e, 0x34, 0x4f, 0xb8, 0xd8, 0xa2, 0xcf, 0xf1, 0x7b, 0x70, 0x8a, 0x80, 0xc5, 0xcc, 0xe8,
	0x12, 0xcf, 0x6e, 0x40, 0x5b, 0xb9, 0x90, 0x47, 0xb2, 0x4a, 0x2b, 0x94, 0x8a, 0xca, 0x12, 0xfe,
	0x3e, 0x80, 0x8d, 0x1d, 0xd2, 0xf3, 0x49, 0xa7, 0x7d, 0x05, 0x3a, 0x99, 0x78, 0xfb, 0x62, 0x2a,
	0xb5, 0x25, 0x09, 0x06, 0xad, 0xed, 0xe3, 0xef, 0x3e, 0x5e, 0x0c, 0xa2, 0x55, 0x0a, 0x3f, 0xde,
	0x8f, 0xb2, 0x3b, 0xb0, 0x9a, 0xa0, 0x48, 0x66, 0xe9, 0x1c, 0xbd, 0x87, 0x67, 0xbd, 0x8c, 0xdd,
	0xfb, 0x70, 0xa7, 0xdc, 0x7b, 0x89, 0x2c, 0xab, 0xd9, 0xa0, 0xb4, 0xbe, 0x59, 0xb7, 0xde, 0x17,
	0xbb, 0x02, 0xfe, 0x1c, 0x4e, 0x1f, 0x6a, 0xcd, 0x7b, 0x3d, 0xaa, 0x7b, 0xdd, 0xad, 0x0c, 0x58,
	0xf5, 0xf8, 0x60, 0x93, 0x8d, 0x43, 0x9b, 0x1c, 0xfd, 0x6a, 0x40, 0x7b, 0xec, 0xbe, 0x0a, 0x76,
	0x1f, 0x3a, 0x7f, 0xa5, 0xd8, 0x39, 0xcf, 0x57, 0xf5, 0xa5, 0xdf, 0xab, 0x27, 0x9c, 0x04, 0x3f,
	0xc6, 0x1e, 0xc2, 0xda, 0x58, 0xa1, 0x30, 0xe8, 0x38, 0xce, 0xff, 0x7b, 0xff, 0x8e, 0xa7, 0x14,
	0xa8, 0xfe, 0x2f, 0x88, 0xe6, 0x11, 0xac, 0x47, 0x68, 0x54, 0x8a, 0xbb, 0x4b, 0x12, 0x51, 0x3f,
	0x4f, 0xf3, 0x64, 0xe9, 0x7e, 0x88, 0xe6, 0x01, 0xce, 0x70, 0x49, 0x9a, 0xed, 0x6b, 0xbf, 0x7f,
	0x6c, 0x06, 0x9f, 0x7e, 0x6e, 0x06, 0x9f, 0xe9, 0x7c, 0xa5, 0xf3, 0x8d, 0xce, 0x77, 0x3a, 0x5f,
	0x3e, 0x5c, 0x0a, 0x9e, 0xb5, 0x35, 0xaa, 0xdd, 0x34, 0xc6, 0xc9, 0x8a, 0xfd, 0x8c, 0x6f, 0xfd,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x46, 0xd8, 0xf1, 0xd9, 0xae, 0x04, 0x00, 0x00,
}
