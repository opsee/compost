// Code generated by protoc-gen-gogo.
// source: bezos.proto
// DO NOT EDIT!

/*
	Package service is a generated protocol buffer package.

	It is generated from these files:
		bezos.proto
		checker.proto
		keelhaul.proto
		spanx.proto
		vape.proto

	It has these top-level messages:
		BezosRequest
		CheckResourceResponse
		ResourceResponse
		CheckResourceRequest
		ResultsResource
		TestCheckRequest
		TestCheckResponse
		ListBastionStatesRequest
		ListBastionStatesResponse
		ScanVpcsRequest
		ScanVpcsResponse
		LaunchStackRequest
		LaunchStackResponse
		AuthenticateBastionRequest
		AuthenticateBastionResponse
		EnhancedCombatModeRequest
		EnhancedCombatModeResponse
		PutRoleRequest
		PutRoleResponse
		GetCredentialsRequest
		GetCredentialsResponse
		GetUserRequest
		GetUserResponse
		ListUsersRequest
		ListUsersResponse
		ListCustomersResponse
*/
package service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"
import opsee_aws_cloudwatch "github.com/opsee/basic/schema/aws/cloudwatch"
import opsee_aws_ec2 "github.com/opsee/basic/schema/aws/ec2"
import opsee_aws_elb "github.com/opsee/basic/schema/aws/elb"
import opsee_aws_autoscaling "github.com/opsee/basic/schema/aws/autoscaling"
import opsee_aws_rds "github.com/opsee/basic/schema/aws/rds"
import opsee1 "github.com/opsee/basic/schema"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type BezosRequest struct {
	User   *opsee1.User           `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Region string                 `protobuf:"bytes,2,opt,name=Region,json=region,proto3" json:"Region,omitempty"`
	VpcId  string                 `protobuf:"bytes,3,opt,name=VpcId,json=vpcId,proto3" json:"VpcId,omitempty"`
	MaxAge *opsee_types.Timestamp `protobuf:"bytes,4,opt,name=MaxAge,json=maxAge" json:"MaxAge,omitempty"`
	// Types that are valid to be assigned to Input:
	//	*BezosRequest_Cloudwatch_ListMetricsInput
	//	*BezosRequest_Cloudwatch_GetMetricStatisticsInput
	//	*BezosRequest_Ec2_DescribeInstancesInput
	//	*BezosRequest_Ec2_DescribeSecurityGroupsInput
	//	*BezosRequest_Ec2_DescribeSubnetsInput
	//	*BezosRequest_Ec2_DescribeVpcsInput
	//	*BezosRequest_Ec2_DescribeRouteTablesInput
	//	*BezosRequest_Elb_DescribeLoadBalancersInput
	//	*BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput
	//	*BezosRequest_Rds_DescribeDBInstancesInput
	Input isBezosRequest_Input `protobuf_oneof:"input"`
}

func (m *BezosRequest) Reset()                    { *m = BezosRequest{} }
func (m *BezosRequest) String() string            { return proto.CompactTextString(m) }
func (*BezosRequest) ProtoMessage()               {}
func (*BezosRequest) Descriptor() ([]byte, []int) { return fileDescriptorBezos, []int{0} }

type isBezosRequest_Input interface {
	isBezosRequest_Input()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BezosRequest_Cloudwatch_ListMetricsInput struct {
	Cloudwatch_ListMetricsInput *opsee_aws_cloudwatch.ListMetricsInput `protobuf:"bytes,101,opt,name=cloudwatch_ListMetricsInput,json=cloudwatchListMetricsInput,oneof"`
}
type BezosRequest_Cloudwatch_GetMetricStatisticsInput struct {
	Cloudwatch_GetMetricStatisticsInput *opsee_aws_cloudwatch.GetMetricStatisticsInput `protobuf:"bytes,102,opt,name=cloudwatch_GetMetricStatisticsInput,json=cloudwatchGetMetricStatisticsInput,oneof"`
}
type BezosRequest_Ec2_DescribeInstancesInput struct {
	Ec2_DescribeInstancesInput *opsee_aws_ec2.DescribeInstancesInput `protobuf:"bytes,201,opt,name=ec2_DescribeInstancesInput,json=ec2DescribeInstancesInput,oneof"`
}
type BezosRequest_Ec2_DescribeSecurityGroupsInput struct {
	Ec2_DescribeSecurityGroupsInput *opsee_aws_ec2.DescribeSecurityGroupsInput `protobuf:"bytes,202,opt,name=ec2_DescribeSecurityGroupsInput,json=ec2DescribeSecurityGroupsInput,oneof"`
}
type BezosRequest_Ec2_DescribeSubnetsInput struct {
	Ec2_DescribeSubnetsInput *opsee_aws_ec2.DescribeSubnetsInput `protobuf:"bytes,203,opt,name=ec2_DescribeSubnetsInput,json=ec2DescribeSubnetsInput,oneof"`
}
type BezosRequest_Ec2_DescribeVpcsInput struct {
	Ec2_DescribeVpcsInput *opsee_aws_ec2.DescribeVpcsInput `protobuf:"bytes,204,opt,name=ec2_DescribeVpcsInput,json=ec2DescribeVpcsInput,oneof"`
}
type BezosRequest_Ec2_DescribeRouteTablesInput struct {
	Ec2_DescribeRouteTablesInput *opsee_aws_ec2.DescribeRouteTablesInput `protobuf:"bytes,205,opt,name=ec2_DescribeRouteTablesInput,json=ec2DescribeRouteTablesInput,oneof"`
}
type BezosRequest_Elb_DescribeLoadBalancersInput struct {
	Elb_DescribeLoadBalancersInput *opsee_aws_elb.DescribeLoadBalancersInput `protobuf:"bytes,301,opt,name=elb_DescribeLoadBalancersInput,json=elbDescribeLoadBalancersInput,oneof"`
}
type BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput struct {
	Autoscaling_DescribeAutoScalingGroupsInput *opsee_aws_autoscaling.DescribeAutoScalingGroupsInput `protobuf:"bytes,401,opt,name=autoscaling_DescribeAutoScalingGroupsInput,json=autoscalingDescribeAutoScalingGroupsInput,oneof"`
}
type BezosRequest_Rds_DescribeDBInstancesInput struct {
	Rds_DescribeDBInstancesInput *opsee_aws_rds.DescribeDBInstancesInput `protobuf:"bytes,501,opt,name=rds_DescribeDBInstancesInput,json=rdsDescribeDBInstancesInput,oneof"`
}

func (*BezosRequest_Cloudwatch_ListMetricsInput) isBezosRequest_Input()                {}
func (*BezosRequest_Cloudwatch_GetMetricStatisticsInput) isBezosRequest_Input()        {}
func (*BezosRequest_Ec2_DescribeInstancesInput) isBezosRequest_Input()                 {}
func (*BezosRequest_Ec2_DescribeSecurityGroupsInput) isBezosRequest_Input()            {}
func (*BezosRequest_Ec2_DescribeSubnetsInput) isBezosRequest_Input()                   {}
func (*BezosRequest_Ec2_DescribeVpcsInput) isBezosRequest_Input()                      {}
func (*BezosRequest_Ec2_DescribeRouteTablesInput) isBezosRequest_Input()               {}
func (*BezosRequest_Elb_DescribeLoadBalancersInput) isBezosRequest_Input()             {}
func (*BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput) isBezosRequest_Input() {}
func (*BezosRequest_Rds_DescribeDBInstancesInput) isBezosRequest_Input()               {}

func (m *BezosRequest) GetInput() isBezosRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *BezosRequest) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *BezosRequest) GetMaxAge() *opsee_types.Timestamp {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *BezosRequest) GetCloudwatch_ListMetricsInput() *opsee_aws_cloudwatch.ListMetricsInput {
	if x, ok := m.GetInput().(*BezosRequest_Cloudwatch_ListMetricsInput); ok {
		return x.Cloudwatch_ListMetricsInput
	}
	return nil
}

func (m *BezosRequest) GetCloudwatch_GetMetricStatisticsInput() *opsee_aws_cloudwatch.GetMetricStatisticsInput {
	if x, ok := m.GetInput().(*BezosRequest_Cloudwatch_GetMetricStatisticsInput); ok {
		return x.Cloudwatch_GetMetricStatisticsInput
	}
	return nil
}

func (m *BezosRequest) GetEc2_DescribeInstancesInput() *opsee_aws_ec2.DescribeInstancesInput {
	if x, ok := m.GetInput().(*BezosRequest_Ec2_DescribeInstancesInput); ok {
		return x.Ec2_DescribeInstancesInput
	}
	return nil
}

func (m *BezosRequest) GetEc2_DescribeSecurityGroupsInput() *opsee_aws_ec2.DescribeSecurityGroupsInput {
	if x, ok := m.GetInput().(*BezosRequest_Ec2_DescribeSecurityGroupsInput); ok {
		return x.Ec2_DescribeSecurityGroupsInput
	}
	return nil
}

func (m *BezosRequest) GetEc2_DescribeSubnetsInput() *opsee_aws_ec2.DescribeSubnetsInput {
	if x, ok := m.GetInput().(*BezosRequest_Ec2_DescribeSubnetsInput); ok {
		return x.Ec2_DescribeSubnetsInput
	}
	return nil
}

func (m *BezosRequest) GetEc2_DescribeVpcsInput() *opsee_aws_ec2.DescribeVpcsInput {
	if x, ok := m.GetInput().(*BezosRequest_Ec2_DescribeVpcsInput); ok {
		return x.Ec2_DescribeVpcsInput
	}
	return nil
}

func (m *BezosRequest) GetEc2_DescribeRouteTablesInput() *opsee_aws_ec2.DescribeRouteTablesInput {
	if x, ok := m.GetInput().(*BezosRequest_Ec2_DescribeRouteTablesInput); ok {
		return x.Ec2_DescribeRouteTablesInput
	}
	return nil
}

func (m *BezosRequest) GetElb_DescribeLoadBalancersInput() *opsee_aws_elb.DescribeLoadBalancersInput {
	if x, ok := m.GetInput().(*BezosRequest_Elb_DescribeLoadBalancersInput); ok {
		return x.Elb_DescribeLoadBalancersInput
	}
	return nil
}

func (m *BezosRequest) GetAutoscaling_DescribeAutoScalingGroupsInput() *opsee_aws_autoscaling.DescribeAutoScalingGroupsInput {
	if x, ok := m.GetInput().(*BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput); ok {
		return x.Autoscaling_DescribeAutoScalingGroupsInput
	}
	return nil
}

func (m *BezosRequest) GetRds_DescribeDBInstancesInput() *opsee_aws_rds.DescribeDBInstancesInput {
	if x, ok := m.GetInput().(*BezosRequest_Rds_DescribeDBInstancesInput); ok {
		return x.Rds_DescribeDBInstancesInput
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BezosRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BezosRequest_OneofMarshaler, _BezosRequest_OneofUnmarshaler, _BezosRequest_OneofSizer, []interface{}{
		(*BezosRequest_Cloudwatch_ListMetricsInput)(nil),
		(*BezosRequest_Cloudwatch_GetMetricStatisticsInput)(nil),
		(*BezosRequest_Ec2_DescribeInstancesInput)(nil),
		(*BezosRequest_Ec2_DescribeSecurityGroupsInput)(nil),
		(*BezosRequest_Ec2_DescribeSubnetsInput)(nil),
		(*BezosRequest_Ec2_DescribeVpcsInput)(nil),
		(*BezosRequest_Ec2_DescribeRouteTablesInput)(nil),
		(*BezosRequest_Elb_DescribeLoadBalancersInput)(nil),
		(*BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput)(nil),
		(*BezosRequest_Rds_DescribeDBInstancesInput)(nil),
	}
}

func _BezosRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BezosRequest)
	// input
	switch x := m.Input.(type) {
	case *BezosRequest_Cloudwatch_ListMetricsInput:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cloudwatch_ListMetricsInput); err != nil {
			return err
		}
	case *BezosRequest_Cloudwatch_GetMetricStatisticsInput:
		_ = b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cloudwatch_GetMetricStatisticsInput); err != nil {
			return err
		}
	case *BezosRequest_Ec2_DescribeInstancesInput:
		_ = b.EncodeVarint(201<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ec2_DescribeInstancesInput); err != nil {
			return err
		}
	case *BezosRequest_Ec2_DescribeSecurityGroupsInput:
		_ = b.EncodeVarint(202<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ec2_DescribeSecurityGroupsInput); err != nil {
			return err
		}
	case *BezosRequest_Ec2_DescribeSubnetsInput:
		_ = b.EncodeVarint(203<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ec2_DescribeSubnetsInput); err != nil {
			return err
		}
	case *BezosRequest_Ec2_DescribeVpcsInput:
		_ = b.EncodeVarint(204<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ec2_DescribeVpcsInput); err != nil {
			return err
		}
	case *BezosRequest_Ec2_DescribeRouteTablesInput:
		_ = b.EncodeVarint(205<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ec2_DescribeRouteTablesInput); err != nil {
			return err
		}
	case *BezosRequest_Elb_DescribeLoadBalancersInput:
		_ = b.EncodeVarint(301<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Elb_DescribeLoadBalancersInput); err != nil {
			return err
		}
	case *BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput:
		_ = b.EncodeVarint(401<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Autoscaling_DescribeAutoScalingGroupsInput); err != nil {
			return err
		}
	case *BezosRequest_Rds_DescribeDBInstancesInput:
		_ = b.EncodeVarint(501<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rds_DescribeDBInstancesInput); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BezosRequest.Input has unexpected type %T", x)
	}
	return nil
}

func _BezosRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BezosRequest)
	switch tag {
	case 101: // input.cloudwatch_ListMetricsInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_cloudwatch.ListMetricsInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Cloudwatch_ListMetricsInput{msg}
		return true, err
	case 102: // input.cloudwatch_GetMetricStatisticsInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_cloudwatch.GetMetricStatisticsInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Cloudwatch_GetMetricStatisticsInput{msg}
		return true, err
	case 201: // input.ec2_DescribeInstancesInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_ec2.DescribeInstancesInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Ec2_DescribeInstancesInput{msg}
		return true, err
	case 202: // input.ec2_DescribeSecurityGroupsInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_ec2.DescribeSecurityGroupsInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Ec2_DescribeSecurityGroupsInput{msg}
		return true, err
	case 203: // input.ec2_DescribeSubnetsInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_ec2.DescribeSubnetsInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Ec2_DescribeSubnetsInput{msg}
		return true, err
	case 204: // input.ec2_DescribeVpcsInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_ec2.DescribeVpcsInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Ec2_DescribeVpcsInput{msg}
		return true, err
	case 205: // input.ec2_DescribeRouteTablesInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_ec2.DescribeRouteTablesInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Ec2_DescribeRouteTablesInput{msg}
		return true, err
	case 301: // input.elb_DescribeLoadBalancersInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_elb.DescribeLoadBalancersInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Elb_DescribeLoadBalancersInput{msg}
		return true, err
	case 401: // input.autoscaling_DescribeAutoScalingGroupsInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_autoscaling.DescribeAutoScalingGroupsInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput{msg}
		return true, err
	case 501: // input.rds_DescribeDBInstancesInput
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(opsee_aws_rds.DescribeDBInstancesInput)
		err := b.DecodeMessage(msg)
		m.Input = &BezosRequest_Rds_DescribeDBInstancesInput{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BezosRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BezosRequest)
	// input
	switch x := m.Input.(type) {
	case *BezosRequest_Cloudwatch_ListMetricsInput:
		s := proto.Size(x.Cloudwatch_ListMetricsInput)
		n += proto.SizeVarint(101<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BezosRequest_Cloudwatch_GetMetricStatisticsInput:
		s := proto.Size(x.Cloudwatch_GetMetricStatisticsInput)
		n += proto.SizeVarint(102<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BezosRequest_Ec2_DescribeInstancesInput:
		s := proto.Size(x.Ec2_DescribeInstancesInput)
		n += proto.SizeVarint(201<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BezosRequest_Ec2_DescribeSecurityGroupsInput:
		s := proto.Size(x.Ec2_DescribeSecurityGroupsInput)
		n += proto.SizeVarint(202<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BezosRequest_Ec2_DescribeSubnetsInput:
		s := proto.Size(x.Ec2_DescribeSubnetsInput)
		n += proto.SizeVarint(203<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BezosRequest_Ec2_DescribeVpcsInput:
		s := proto.Size(x.Ec2_DescribeVpcsInput)
		n += proto.SizeVarint(204<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BezosRequest_Ec2_DescribeRouteTablesInput:
		s := proto.Size(x.Ec2_DescribeRouteTablesInput)
		n += proto.SizeVarint(205<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BezosRequest_Elb_DescribeLoadBalancersInput:
		s := proto.Size(x.Elb_DescribeLoadBalancersInput)
		n += proto.SizeVarint(301<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput:
		s := proto.Size(x.Autoscaling_DescribeAutoScalingGroupsInput)
		n += proto.SizeVarint(401<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BezosRequest_Rds_DescribeDBInstancesInput:
		s := proto.Size(x.Rds_DescribeDBInstancesInput)
		n += proto.SizeVarint(501<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*BezosRequest)(nil), "opsee.BezosRequest")
}
func (this *BezosRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest)
	if !ok {
		that2, ok := that.(BezosRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if !this.MaxAge.Equal(that1.MaxAge) {
		return false
	}
	if that1.Input == nil {
		if this.Input != nil {
			return false
		}
	} else if this.Input == nil {
		return false
	} else if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *BezosRequest_Cloudwatch_ListMetricsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Cloudwatch_ListMetricsInput)
	if !ok {
		that2, ok := that.(BezosRequest_Cloudwatch_ListMetricsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Cloudwatch_ListMetricsInput.Equal(that1.Cloudwatch_ListMetricsInput) {
		return false
	}
	return true
}
func (this *BezosRequest_Cloudwatch_GetMetricStatisticsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Cloudwatch_GetMetricStatisticsInput)
	if !ok {
		that2, ok := that.(BezosRequest_Cloudwatch_GetMetricStatisticsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Cloudwatch_GetMetricStatisticsInput.Equal(that1.Cloudwatch_GetMetricStatisticsInput) {
		return false
	}
	return true
}
func (this *BezosRequest_Ec2_DescribeInstancesInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Ec2_DescribeInstancesInput)
	if !ok {
		that2, ok := that.(BezosRequest_Ec2_DescribeInstancesInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Ec2_DescribeInstancesInput.Equal(that1.Ec2_DescribeInstancesInput) {
		return false
	}
	return true
}
func (this *BezosRequest_Ec2_DescribeSecurityGroupsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Ec2_DescribeSecurityGroupsInput)
	if !ok {
		that2, ok := that.(BezosRequest_Ec2_DescribeSecurityGroupsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Ec2_DescribeSecurityGroupsInput.Equal(that1.Ec2_DescribeSecurityGroupsInput) {
		return false
	}
	return true
}
func (this *BezosRequest_Ec2_DescribeSubnetsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Ec2_DescribeSubnetsInput)
	if !ok {
		that2, ok := that.(BezosRequest_Ec2_DescribeSubnetsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Ec2_DescribeSubnetsInput.Equal(that1.Ec2_DescribeSubnetsInput) {
		return false
	}
	return true
}
func (this *BezosRequest_Ec2_DescribeVpcsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Ec2_DescribeVpcsInput)
	if !ok {
		that2, ok := that.(BezosRequest_Ec2_DescribeVpcsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Ec2_DescribeVpcsInput.Equal(that1.Ec2_DescribeVpcsInput) {
		return false
	}
	return true
}
func (this *BezosRequest_Ec2_DescribeRouteTablesInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Ec2_DescribeRouteTablesInput)
	if !ok {
		that2, ok := that.(BezosRequest_Ec2_DescribeRouteTablesInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Ec2_DescribeRouteTablesInput.Equal(that1.Ec2_DescribeRouteTablesInput) {
		return false
	}
	return true
}
func (this *BezosRequest_Elb_DescribeLoadBalancersInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Elb_DescribeLoadBalancersInput)
	if !ok {
		that2, ok := that.(BezosRequest_Elb_DescribeLoadBalancersInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Elb_DescribeLoadBalancersInput.Equal(that1.Elb_DescribeLoadBalancersInput) {
		return false
	}
	return true
}
func (this *BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput)
	if !ok {
		that2, ok := that.(BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Autoscaling_DescribeAutoScalingGroupsInput.Equal(that1.Autoscaling_DescribeAutoScalingGroupsInput) {
		return false
	}
	return true
}
func (this *BezosRequest_Rds_DescribeDBInstancesInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BezosRequest_Rds_DescribeDBInstancesInput)
	if !ok {
		that2, ok := that.(BezosRequest_Rds_DescribeDBInstancesInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Rds_DescribeDBInstancesInput.Equal(that1.Rds_DescribeDBInstancesInput) {
		return false
	}
	return true
}

type BezosRequestGetter interface {
	GetBezosRequest() *BezosRequest
}

var GraphQLBezosRequestType *github_com_graphql_go_graphql.Object
var GraphQLBezosRequestInputUnion *github_com_graphql_go_graphql.Union

func (g *BezosRequest_Cloudwatch_ListMetricsInput) GetListMetricsInput() *opsee_aws_cloudwatch.ListMetricsInput {
	return g.Cloudwatch_ListMetricsInput
}
func (g *BezosRequest_Cloudwatch_GetMetricStatisticsInput) GetGetMetricStatisticsInput() *opsee_aws_cloudwatch.GetMetricStatisticsInput {
	return g.Cloudwatch_GetMetricStatisticsInput
}
func (g *BezosRequest_Ec2_DescribeInstancesInput) GetDescribeInstancesInput() *opsee_aws_ec2.DescribeInstancesInput {
	return g.Ec2_DescribeInstancesInput
}
func (g *BezosRequest_Ec2_DescribeSecurityGroupsInput) GetDescribeSecurityGroupsInput() *opsee_aws_ec2.DescribeSecurityGroupsInput {
	return g.Ec2_DescribeSecurityGroupsInput
}
func (g *BezosRequest_Ec2_DescribeSubnetsInput) GetDescribeSubnetsInput() *opsee_aws_ec2.DescribeSubnetsInput {
	return g.Ec2_DescribeSubnetsInput
}
func (g *BezosRequest_Ec2_DescribeVpcsInput) GetDescribeVpcsInput() *opsee_aws_ec2.DescribeVpcsInput {
	return g.Ec2_DescribeVpcsInput
}
func (g *BezosRequest_Ec2_DescribeRouteTablesInput) GetDescribeRouteTablesInput() *opsee_aws_ec2.DescribeRouteTablesInput {
	return g.Ec2_DescribeRouteTablesInput
}
func (g *BezosRequest_Elb_DescribeLoadBalancersInput) GetDescribeLoadBalancersInput() *opsee_aws_elb.DescribeLoadBalancersInput {
	return g.Elb_DescribeLoadBalancersInput
}
func (g *BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput) GetDescribeAutoScalingGroupsInput() *opsee_aws_autoscaling.DescribeAutoScalingGroupsInput {
	return g.Autoscaling_DescribeAutoScalingGroupsInput
}
func (g *BezosRequest_Rds_DescribeDBInstancesInput) GetDescribeDBInstancesInput() *opsee_aws_rds.DescribeDBInstancesInput {
	return g.Rds_DescribeDBInstancesInput
}

func init() {
	GraphQLBezosRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceBezosRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BezosRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(BezosRequestGetter)
						if ok {
							face := inter.GetBezosRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"Region": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BezosRequest)
						if ok {
							return obj.Region, nil
						}
						inter, ok := p.Source.(BezosRequestGetter)
						if ok {
							face := inter.GetBezosRequest()
							if face == nil {
								return nil, nil
							}
							return face.Region, nil
						}
						return nil, fmt.Errorf("field Region not resolved")
					},
				},
				"VpcId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BezosRequest)
						if ok {
							return obj.VpcId, nil
						}
						inter, ok := p.Source.(BezosRequestGetter)
						if ok {
							face := inter.GetBezosRequest()
							if face == nil {
								return nil, nil
							}
							return face.VpcId, nil
						}
						return nil, fmt.Errorf("field VpcId not resolved")
					},
				},
				"MaxAge": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BezosRequest)
						if ok {
							if obj.MaxAge == nil {
								return nil, nil
							}
							return obj.GetMaxAge(), nil
						}
						inter, ok := p.Source.(BezosRequestGetter)
						if ok {
							face := inter.GetBezosRequest()
							if face == nil {
								return nil, nil
							}
							if face.MaxAge == nil {
								return nil, nil
							}
							return face.GetMaxAge(), nil
						}
						return nil, fmt.Errorf("field MaxAge not resolved")
					},
				},
				"input": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLBezosRequestInputUnion,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BezosRequest)
						if !ok {
							return nil, fmt.Errorf("field input not resolved")
						}
						return obj.GetInput(), nil
					},
				},
			}
		}),
	})
	GraphQLBezosRequestInputUnion = github_com_graphql_go_graphql.NewUnion(github_com_graphql_go_graphql.UnionConfig{
		Name:        "BezosRequestInput",
		Description: "",
		Types: []*github_com_graphql_go_graphql.Object{
			opsee_aws_cloudwatch.GraphQLListMetricsInputType,
			opsee_aws_cloudwatch.GraphQLGetMetricStatisticsInputType,
			opsee_aws_ec2.GraphQLDescribeInstancesInputType,
			opsee_aws_ec2.GraphQLDescribeSecurityGroupsInputType,
			opsee_aws_ec2.GraphQLDescribeSubnetsInputType,
			opsee_aws_ec2.GraphQLDescribeVpcsInputType,
			opsee_aws_ec2.GraphQLDescribeRouteTablesInputType,
			opsee_aws_elb.GraphQLDescribeLoadBalancersInputType,
			opsee_aws_autoscaling.GraphQLDescribeAutoScalingGroupsInputType,
			opsee_aws_rds.GraphQLDescribeDBInstancesInputType,
		},
		ResolveType: func(value interface{}, info github_com_graphql_go_graphql.ResolveInfo) *github_com_graphql_go_graphql.Object {
			switch value.(type) {
			case *BezosRequest_Cloudwatch_ListMetricsInput:
				return opsee_aws_cloudwatch.GraphQLListMetricsInputType
			case *BezosRequest_Cloudwatch_GetMetricStatisticsInput:
				return opsee_aws_cloudwatch.GraphQLGetMetricStatisticsInputType
			case *BezosRequest_Ec2_DescribeInstancesInput:
				return opsee_aws_ec2.GraphQLDescribeInstancesInputType
			case *BezosRequest_Ec2_DescribeSecurityGroupsInput:
				return opsee_aws_ec2.GraphQLDescribeSecurityGroupsInputType
			case *BezosRequest_Ec2_DescribeSubnetsInput:
				return opsee_aws_ec2.GraphQLDescribeSubnetsInputType
			case *BezosRequest_Ec2_DescribeVpcsInput:
				return opsee_aws_ec2.GraphQLDescribeVpcsInputType
			case *BezosRequest_Ec2_DescribeRouteTablesInput:
				return opsee_aws_ec2.GraphQLDescribeRouteTablesInputType
			case *BezosRequest_Elb_DescribeLoadBalancersInput:
				return opsee_aws_elb.GraphQLDescribeLoadBalancersInputType
			case *BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput:
				return opsee_aws_autoscaling.GraphQLDescribeAutoScalingGroupsInputType
			case *BezosRequest_Rds_DescribeDBInstancesInput:
				return opsee_aws_rds.GraphQLDescribeDBInstancesInputType
			}
			return nil
		},
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Bezos service

type BezosClient interface {
	CloudwatchListMetrics(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_cloudwatch.ListMetricsOutput, error)
	CloudwatchGetMetricStatistics(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_cloudwatch.GetMetricStatisticsOutput, error)
	EC2DescribeInstances(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeInstancesOutput, error)
	EC2DescribeSecurityGroups(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeSecurityGroupsOutput, error)
	EC2DescribeSubnets(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeSubnetsOutput, error)
	EC2DescribeVpcs(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeVpcsOutput, error)
	EC2DescribeRouteTables(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeRouteTablesOutput, error)
	ELBDescribeLoadBalancers(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_elb.DescribeLoadBalancersOutput, error)
	AutoScalingDescribeAutoScalingGroups(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_autoscaling.DescribeAutoScalingGroupsOutput, error)
	RDSDescribeDBInstances(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_rds.DescribeDBInstancesOutput, error)
}

type bezosClient struct {
	cc *grpc.ClientConn
}

func NewBezosClient(cc *grpc.ClientConn) BezosClient {
	return &bezosClient{cc}
}

func (c *bezosClient) CloudwatchListMetrics(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_cloudwatch.ListMetricsOutput, error) {
	out := new(opsee_aws_cloudwatch.ListMetricsOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/CloudwatchListMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bezosClient) CloudwatchGetMetricStatistics(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_cloudwatch.GetMetricStatisticsOutput, error) {
	out := new(opsee_aws_cloudwatch.GetMetricStatisticsOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/CloudwatchGetMetricStatistics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bezosClient) EC2DescribeInstances(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeInstancesOutput, error) {
	out := new(opsee_aws_ec2.DescribeInstancesOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/EC2DescribeInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bezosClient) EC2DescribeSecurityGroups(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeSecurityGroupsOutput, error) {
	out := new(opsee_aws_ec2.DescribeSecurityGroupsOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/EC2DescribeSecurityGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bezosClient) EC2DescribeSubnets(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeSubnetsOutput, error) {
	out := new(opsee_aws_ec2.DescribeSubnetsOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/EC2DescribeSubnets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bezosClient) EC2DescribeVpcs(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeVpcsOutput, error) {
	out := new(opsee_aws_ec2.DescribeVpcsOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/EC2DescribeVpcs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bezosClient) EC2DescribeRouteTables(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_ec2.DescribeRouteTablesOutput, error) {
	out := new(opsee_aws_ec2.DescribeRouteTablesOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/EC2DescribeRouteTables", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bezosClient) ELBDescribeLoadBalancers(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_elb.DescribeLoadBalancersOutput, error) {
	out := new(opsee_aws_elb.DescribeLoadBalancersOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/ELBDescribeLoadBalancers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bezosClient) AutoScalingDescribeAutoScalingGroups(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_autoscaling.DescribeAutoScalingGroupsOutput, error) {
	out := new(opsee_aws_autoscaling.DescribeAutoScalingGroupsOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/AutoScalingDescribeAutoScalingGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bezosClient) RDSDescribeDBInstances(ctx context.Context, in *BezosRequest, opts ...grpc.CallOption) (*opsee_aws_rds.DescribeDBInstancesOutput, error) {
	out := new(opsee_aws_rds.DescribeDBInstancesOutput)
	err := grpc.Invoke(ctx, "/opsee.Bezos/RDSDescribeDBInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bezos service

type BezosServer interface {
	CloudwatchListMetrics(context.Context, *BezosRequest) (*opsee_aws_cloudwatch.ListMetricsOutput, error)
	CloudwatchGetMetricStatistics(context.Context, *BezosRequest) (*opsee_aws_cloudwatch.GetMetricStatisticsOutput, error)
	EC2DescribeInstances(context.Context, *BezosRequest) (*opsee_aws_ec2.DescribeInstancesOutput, error)
	EC2DescribeSecurityGroups(context.Context, *BezosRequest) (*opsee_aws_ec2.DescribeSecurityGroupsOutput, error)
	EC2DescribeSubnets(context.Context, *BezosRequest) (*opsee_aws_ec2.DescribeSubnetsOutput, error)
	EC2DescribeVpcs(context.Context, *BezosRequest) (*opsee_aws_ec2.DescribeVpcsOutput, error)
	EC2DescribeRouteTables(context.Context, *BezosRequest) (*opsee_aws_ec2.DescribeRouteTablesOutput, error)
	ELBDescribeLoadBalancers(context.Context, *BezosRequest) (*opsee_aws_elb.DescribeLoadBalancersOutput, error)
	AutoScalingDescribeAutoScalingGroups(context.Context, *BezosRequest) (*opsee_aws_autoscaling.DescribeAutoScalingGroupsOutput, error)
	RDSDescribeDBInstances(context.Context, *BezosRequest) (*opsee_aws_rds.DescribeDBInstancesOutput, error)
}

func RegisterBezosServer(s *grpc.Server, srv BezosServer) {
	s.RegisterService(&_Bezos_serviceDesc, srv)
}

func _Bezos_CloudwatchListMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).CloudwatchListMetrics(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bezos_CloudwatchGetMetricStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).CloudwatchGetMetricStatistics(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bezos_EC2DescribeInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).EC2DescribeInstances(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bezos_EC2DescribeSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).EC2DescribeSecurityGroups(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bezos_EC2DescribeSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).EC2DescribeSubnets(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bezos_EC2DescribeVpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).EC2DescribeVpcs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bezos_EC2DescribeRouteTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).EC2DescribeRouteTables(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bezos_ELBDescribeLoadBalancers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).ELBDescribeLoadBalancers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bezos_AutoScalingDescribeAutoScalingGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).AutoScalingDescribeAutoScalingGroups(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bezos_RDSDescribeDBInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BezosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BezosServer).RDSDescribeDBInstances(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Bezos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opsee.Bezos",
	HandlerType: (*BezosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloudwatchListMetrics",
			Handler:    _Bezos_CloudwatchListMetrics_Handler,
		},
		{
			MethodName: "CloudwatchGetMetricStatistics",
			Handler:    _Bezos_CloudwatchGetMetricStatistics_Handler,
		},
		{
			MethodName: "EC2DescribeInstances",
			Handler:    _Bezos_EC2DescribeInstances_Handler,
		},
		{
			MethodName: "EC2DescribeSecurityGroups",
			Handler:    _Bezos_EC2DescribeSecurityGroups_Handler,
		},
		{
			MethodName: "EC2DescribeSubnets",
			Handler:    _Bezos_EC2DescribeSubnets_Handler,
		},
		{
			MethodName: "EC2DescribeVpcs",
			Handler:    _Bezos_EC2DescribeVpcs_Handler,
		},
		{
			MethodName: "EC2DescribeRouteTables",
			Handler:    _Bezos_EC2DescribeRouteTables_Handler,
		},
		{
			MethodName: "ELBDescribeLoadBalancers",
			Handler:    _Bezos_ELBDescribeLoadBalancers_Handler,
		},
		{
			MethodName: "AutoScalingDescribeAutoScalingGroups",
			Handler:    _Bezos_AutoScalingDescribeAutoScalingGroups_Handler,
		},
		{
			MethodName: "RDSDescribeDBInstances",
			Handler:    _Bezos_RDSDescribeDBInstances_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *BezosRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BezosRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBezos(data, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Region) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBezos(data, i, uint64(len(m.Region)))
		i += copy(data[i:], m.Region)
	}
	if len(m.VpcId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBezos(data, i, uint64(len(m.VpcId)))
		i += copy(data[i:], m.VpcId)
	}
	if m.MaxAge != nil {
		data[i] = 0x22
		i++
		i = encodeVarintBezos(data, i, uint64(m.MaxAge.Size()))
		n2, err := m.MaxAge.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Input != nil {
		nn3, err := m.Input.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *BezosRequest_Cloudwatch_ListMetricsInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Cloudwatch_ListMetricsInput != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x6
		i++
		i = encodeVarintBezos(data, i, uint64(m.Cloudwatch_ListMetricsInput.Size()))
		n4, err := m.Cloudwatch_ListMetricsInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *BezosRequest_Cloudwatch_GetMetricStatisticsInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Cloudwatch_GetMetricStatisticsInput != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x6
		i++
		i = encodeVarintBezos(data, i, uint64(m.Cloudwatch_GetMetricStatisticsInput.Size()))
		n5, err := m.Cloudwatch_GetMetricStatisticsInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *BezosRequest_Ec2_DescribeInstancesInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Ec2_DescribeInstancesInput != nil {
		data[i] = 0xca
		i++
		data[i] = 0xc
		i++
		i = encodeVarintBezos(data, i, uint64(m.Ec2_DescribeInstancesInput.Size()))
		n6, err := m.Ec2_DescribeInstancesInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *BezosRequest_Ec2_DescribeSecurityGroupsInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Ec2_DescribeSecurityGroupsInput != nil {
		data[i] = 0xd2
		i++
		data[i] = 0xc
		i++
		i = encodeVarintBezos(data, i, uint64(m.Ec2_DescribeSecurityGroupsInput.Size()))
		n7, err := m.Ec2_DescribeSecurityGroupsInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *BezosRequest_Ec2_DescribeSubnetsInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Ec2_DescribeSubnetsInput != nil {
		data[i] = 0xda
		i++
		data[i] = 0xc
		i++
		i = encodeVarintBezos(data, i, uint64(m.Ec2_DescribeSubnetsInput.Size()))
		n8, err := m.Ec2_DescribeSubnetsInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *BezosRequest_Ec2_DescribeVpcsInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Ec2_DescribeVpcsInput != nil {
		data[i] = 0xe2
		i++
		data[i] = 0xc
		i++
		i = encodeVarintBezos(data, i, uint64(m.Ec2_DescribeVpcsInput.Size()))
		n9, err := m.Ec2_DescribeVpcsInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *BezosRequest_Ec2_DescribeRouteTablesInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Ec2_DescribeRouteTablesInput != nil {
		data[i] = 0xea
		i++
		data[i] = 0xc
		i++
		i = encodeVarintBezos(data, i, uint64(m.Ec2_DescribeRouteTablesInput.Size()))
		n10, err := m.Ec2_DescribeRouteTablesInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *BezosRequest_Elb_DescribeLoadBalancersInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Elb_DescribeLoadBalancersInput != nil {
		data[i] = 0xea
		i++
		data[i] = 0x12
		i++
		i = encodeVarintBezos(data, i, uint64(m.Elb_DescribeLoadBalancersInput.Size()))
		n11, err := m.Elb_DescribeLoadBalancersInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Autoscaling_DescribeAutoScalingGroupsInput != nil {
		data[i] = 0x8a
		i++
		data[i] = 0x19
		i++
		i = encodeVarintBezos(data, i, uint64(m.Autoscaling_DescribeAutoScalingGroupsInput.Size()))
		n12, err := m.Autoscaling_DescribeAutoScalingGroupsInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *BezosRequest_Rds_DescribeDBInstancesInput) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Rds_DescribeDBInstancesInput != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1f
		i++
		i = encodeVarintBezos(data, i, uint64(m.Rds_DescribeDBInstancesInput.Size()))
		n13, err := m.Rds_DescribeDBInstancesInput.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func encodeFixed64Bezos(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Bezos(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBezos(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedBezosRequest(r randyBezos, easy bool) *BezosRequest {
	this := &BezosRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	this.Region = randStringBezos(r)
	this.VpcId = randStringBezos(r)
	if r.Intn(10) != 0 {
		this.MaxAge = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	oneofNumber_Input := []int32{101, 102, 201, 202, 203, 204, 205, 301, 401, 501}[r.Intn(10)]
	switch oneofNumber_Input {
	case 101:
		this.Input = NewPopulatedBezosRequest_Cloudwatch_ListMetricsInput(r, easy)
	case 102:
		this.Input = NewPopulatedBezosRequest_Cloudwatch_GetMetricStatisticsInput(r, easy)
	case 201:
		this.Input = NewPopulatedBezosRequest_Ec2_DescribeInstancesInput(r, easy)
	case 202:
		this.Input = NewPopulatedBezosRequest_Ec2_DescribeSecurityGroupsInput(r, easy)
	case 203:
		this.Input = NewPopulatedBezosRequest_Ec2_DescribeSubnetsInput(r, easy)
	case 204:
		this.Input = NewPopulatedBezosRequest_Ec2_DescribeVpcsInput(r, easy)
	case 205:
		this.Input = NewPopulatedBezosRequest_Ec2_DescribeRouteTablesInput(r, easy)
	case 301:
		this.Input = NewPopulatedBezosRequest_Elb_DescribeLoadBalancersInput(r, easy)
	case 401:
		this.Input = NewPopulatedBezosRequest_Autoscaling_DescribeAutoScalingGroupsInput(r, easy)
	case 501:
		this.Input = NewPopulatedBezosRequest_Rds_DescribeDBInstancesInput(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBezosRequest_Cloudwatch_ListMetricsInput(r randyBezos, easy bool) *BezosRequest_Cloudwatch_ListMetricsInput {
	this := &BezosRequest_Cloudwatch_ListMetricsInput{}
	this.Cloudwatch_ListMetricsInput = opsee_aws_cloudwatch.NewPopulatedListMetricsInput(r, easy)
	return this
}
func NewPopulatedBezosRequest_Cloudwatch_GetMetricStatisticsInput(r randyBezos, easy bool) *BezosRequest_Cloudwatch_GetMetricStatisticsInput {
	this := &BezosRequest_Cloudwatch_GetMetricStatisticsInput{}
	this.Cloudwatch_GetMetricStatisticsInput = opsee_aws_cloudwatch.NewPopulatedGetMetricStatisticsInput(r, easy)
	return this
}
func NewPopulatedBezosRequest_Ec2_DescribeInstancesInput(r randyBezos, easy bool) *BezosRequest_Ec2_DescribeInstancesInput {
	this := &BezosRequest_Ec2_DescribeInstancesInput{}
	this.Ec2_DescribeInstancesInput = opsee_aws_ec2.NewPopulatedDescribeInstancesInput(r, easy)
	return this
}
func NewPopulatedBezosRequest_Ec2_DescribeSecurityGroupsInput(r randyBezos, easy bool) *BezosRequest_Ec2_DescribeSecurityGroupsInput {
	this := &BezosRequest_Ec2_DescribeSecurityGroupsInput{}
	this.Ec2_DescribeSecurityGroupsInput = opsee_aws_ec2.NewPopulatedDescribeSecurityGroupsInput(r, easy)
	return this
}
func NewPopulatedBezosRequest_Ec2_DescribeSubnetsInput(r randyBezos, easy bool) *BezosRequest_Ec2_DescribeSubnetsInput {
	this := &BezosRequest_Ec2_DescribeSubnetsInput{}
	this.Ec2_DescribeSubnetsInput = opsee_aws_ec2.NewPopulatedDescribeSubnetsInput(r, easy)
	return this
}
func NewPopulatedBezosRequest_Ec2_DescribeVpcsInput(r randyBezos, easy bool) *BezosRequest_Ec2_DescribeVpcsInput {
	this := &BezosRequest_Ec2_DescribeVpcsInput{}
	this.Ec2_DescribeVpcsInput = opsee_aws_ec2.NewPopulatedDescribeVpcsInput(r, easy)
	return this
}
func NewPopulatedBezosRequest_Ec2_DescribeRouteTablesInput(r randyBezos, easy bool) *BezosRequest_Ec2_DescribeRouteTablesInput {
	this := &BezosRequest_Ec2_DescribeRouteTablesInput{}
	this.Ec2_DescribeRouteTablesInput = opsee_aws_ec2.NewPopulatedDescribeRouteTablesInput(r, easy)
	return this
}
func NewPopulatedBezosRequest_Elb_DescribeLoadBalancersInput(r randyBezos, easy bool) *BezosRequest_Elb_DescribeLoadBalancersInput {
	this := &BezosRequest_Elb_DescribeLoadBalancersInput{}
	this.Elb_DescribeLoadBalancersInput = opsee_aws_elb.NewPopulatedDescribeLoadBalancersInput(r, easy)
	return this
}
func NewPopulatedBezosRequest_Autoscaling_DescribeAutoScalingGroupsInput(r randyBezos, easy bool) *BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput {
	this := &BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput{}
	this.Autoscaling_DescribeAutoScalingGroupsInput = opsee_aws_autoscaling.NewPopulatedDescribeAutoScalingGroupsInput(r, easy)
	return this
}
func NewPopulatedBezosRequest_Rds_DescribeDBInstancesInput(r randyBezos, easy bool) *BezosRequest_Rds_DescribeDBInstancesInput {
	this := &BezosRequest_Rds_DescribeDBInstancesInput{}
	this.Rds_DescribeDBInstancesInput = opsee_aws_rds.NewPopulatedDescribeDBInstancesInput(r, easy)
	return this
}

type randyBezos interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBezos(r randyBezos) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBezos(r randyBezos) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneBezos(r)
	}
	return string(tmps)
}
func randUnrecognizedBezos(r randyBezos, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldBezos(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldBezos(data []byte, r randyBezos, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateBezos(data, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		data = encodeVarintPopulateBezos(data, uint64(v2))
	case 1:
		data = encodeVarintPopulateBezos(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateBezos(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateBezos(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateBezos(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateBezos(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *BezosRequest) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovBezos(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovBezos(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovBezos(uint64(l))
	}
	if m.MaxAge != nil {
		l = m.MaxAge.Size()
		n += 1 + l + sovBezos(uint64(l))
	}
	if m.Input != nil {
		n += m.Input.Size()
	}
	return n
}

func (m *BezosRequest_Cloudwatch_ListMetricsInput) Size() (n int) {
	var l int
	_ = l
	if m.Cloudwatch_ListMetricsInput != nil {
		l = m.Cloudwatch_ListMetricsInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}
func (m *BezosRequest_Cloudwatch_GetMetricStatisticsInput) Size() (n int) {
	var l int
	_ = l
	if m.Cloudwatch_GetMetricStatisticsInput != nil {
		l = m.Cloudwatch_GetMetricStatisticsInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}
func (m *BezosRequest_Ec2_DescribeInstancesInput) Size() (n int) {
	var l int
	_ = l
	if m.Ec2_DescribeInstancesInput != nil {
		l = m.Ec2_DescribeInstancesInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}
func (m *BezosRequest_Ec2_DescribeSecurityGroupsInput) Size() (n int) {
	var l int
	_ = l
	if m.Ec2_DescribeSecurityGroupsInput != nil {
		l = m.Ec2_DescribeSecurityGroupsInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}
func (m *BezosRequest_Ec2_DescribeSubnetsInput) Size() (n int) {
	var l int
	_ = l
	if m.Ec2_DescribeSubnetsInput != nil {
		l = m.Ec2_DescribeSubnetsInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}
func (m *BezosRequest_Ec2_DescribeVpcsInput) Size() (n int) {
	var l int
	_ = l
	if m.Ec2_DescribeVpcsInput != nil {
		l = m.Ec2_DescribeVpcsInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}
func (m *BezosRequest_Ec2_DescribeRouteTablesInput) Size() (n int) {
	var l int
	_ = l
	if m.Ec2_DescribeRouteTablesInput != nil {
		l = m.Ec2_DescribeRouteTablesInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}
func (m *BezosRequest_Elb_DescribeLoadBalancersInput) Size() (n int) {
	var l int
	_ = l
	if m.Elb_DescribeLoadBalancersInput != nil {
		l = m.Elb_DescribeLoadBalancersInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}
func (m *BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput) Size() (n int) {
	var l int
	_ = l
	if m.Autoscaling_DescribeAutoScalingGroupsInput != nil {
		l = m.Autoscaling_DescribeAutoScalingGroupsInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}
func (m *BezosRequest_Rds_DescribeDBInstancesInput) Size() (n int) {
	var l int
	_ = l
	if m.Rds_DescribeDBInstancesInput != nil {
		l = m.Rds_DescribeDBInstancesInput.Size()
		n += 2 + l + sovBezos(uint64(l))
	}
	return n
}

func sovBezos(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBezos(x uint64) (n int) {
	return sovBezos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BezosRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBezos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BezosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BezosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxAge == nil {
				m.MaxAge = &opsee_types.Timestamp{}
			}
			if err := m.MaxAge.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudwatch_ListMetricsInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_cloudwatch.ListMetricsInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Cloudwatch_ListMetricsInput{v}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudwatch_GetMetricStatisticsInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_cloudwatch.GetMetricStatisticsInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Cloudwatch_GetMetricStatisticsInput{v}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2_DescribeInstancesInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_ec2.DescribeInstancesInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Ec2_DescribeInstancesInput{v}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2_DescribeSecurityGroupsInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_ec2.DescribeSecurityGroupsInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Ec2_DescribeSecurityGroupsInput{v}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2_DescribeSubnetsInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_ec2.DescribeSubnetsInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Ec2_DescribeSubnetsInput{v}
			iNdEx = postIndex
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2_DescribeVpcsInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_ec2.DescribeVpcsInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Ec2_DescribeVpcsInput{v}
			iNdEx = postIndex
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2_DescribeRouteTablesInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_ec2.DescribeRouteTablesInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Ec2_DescribeRouteTablesInput{v}
			iNdEx = postIndex
		case 301:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elb_DescribeLoadBalancersInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_elb.DescribeLoadBalancersInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Elb_DescribeLoadBalancersInput{v}
			iNdEx = postIndex
		case 401:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Autoscaling_DescribeAutoScalingGroupsInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_autoscaling.DescribeAutoScalingGroupsInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Autoscaling_DescribeAutoScalingGroupsInput{v}
			iNdEx = postIndex
		case 501:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rds_DescribeDBInstancesInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBezos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &opsee_aws_rds.DescribeDBInstancesInput{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &BezosRequest_Rds_DescribeDBInstancesInput{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBezos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBezos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBezos(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBezos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBezos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBezos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBezos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBezos(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBezos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBezos   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorBezos = []byte{
	// 814 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x96, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0x86, 0x09, 0x90, 0xa0, 0x3b, 0x5c, 0xe9, 0x4a, 0x73, 0x81, 0x9a, 0x50, 0x02, 0xe5, 0x1b,
	0x2a, 0xd9, 0x2d, 0x55, 0xab, 0xb6, 0x3b, 0x02, 0x88, 0xa2, 0x82, 0xaa, 0x3a, 0xd0, 0x2f, 0xa9,
	0x42, 0xb6, 0x33, 0x04, 0x4b, 0x49, 0xec, 0x7a, 0xc6, 0x50, 0xba, 0xeb, 0x3f, 0x68, 0x57, 0xdd,
	0x77, 0xd5, 0x0d, 0xfb, 0x2e, 0xbb, 0xec, 0xa7, 0xd4, 0x9f, 0xd0, 0xf6, 0x3f, 0x54, 0xea, 0xb2,
	0xc7, 0x33, 0xc6, 0x99, 0x84, 0x71, 0x12, 0x16, 0x96, 0xec, 0x39, 0xef, 0x79, 0x1f, 0x67, 0xc6,
	0xe7, 0x55, 0xd0, 0xa0, 0x4d, 0x5e, 0x78, 0x54, 0xf7, 0x03, 0x8f, 0x79, 0x38, 0xeb, 0xf9, 0x94,
	0x90, 0xfc, 0x95, 0x8a, 0xcb, 0x0e, 0x42, 0x5b, 0x77, 0xbc, 0x9a, 0xc1, 0x57, 0x0c, 0x5e, 0xb6,
	0xc3, 0x7d, 0xf1, 0xc8, 0x9f, 0xc4, 0xad, 0x68, 0xcc, 0xdf, 0xee, 0xaa, 0x83, 0x1d, 0xfb, 0x84,
	0x1a, 0xcc, 0xad, 0x11, 0xca, 0xac, 0x9a, 0x1f, 0xf7, 0xde, 0x3c, 0xd3, 0x6b, 0x5b, 0xd4, 0x75,
	0x0c, 0xea, 0x1c, 0x90, 0x9a, 0x65, 0x58, 0x47, 0xd4, 0x70, 0xaa, 0x5e, 0x58, 0x3e, 0xb2, 0x98,
	0x73, 0x20, 0x3c, 0xe2, 0xce, 0xab, 0x9d, 0x3b, 0x89, 0xb3, 0x7c, 0xee, 0x96, 0xaa, 0xdd, 0xd4,
	0x72, 0xab, 0x73, 0x8b, 0x15, 0x32, 0x8f, 0x3a, 0x56, 0xd5, 0xad, 0x57, 0xce, 0x4b, 0x0b, 0xca,
	0xb4, 0xa9, 0x65, 0xa1, 0x7d, 0x4b, 0x48, 0x49, 0x20, 0x94, 0x53, 0xaf, 0x10, 0xfa, 0xb7, 0x18,
	0x1d, 0x9e, 0x49, 0x9e, 0x85, 0xb0, 0xa3, 0x78, 0x02, 0xf5, 0x47, 0x65, 0x2d, 0x33, 0x99, 0x59,
	0x18, 0x5c, 0x1e, 0xd4, 0xc5, 0x01, 0xed, 0xc2, 0x92, 0xc9, 0x0b, 0x78, 0x04, 0xe5, 0x4c, 0x52,
	0x71, 0xbd, 0xba, 0xd6, 0x0b, 0x92, 0x7f, 0xcc, 0x5c, 0xc0, 0x9f, 0xf0, 0x10, 0xca, 0x3e, 0xf0,
	0x9d, 0xcd, 0xb2, 0xd6, 0xc7, 0x97, 0xb3, 0x87, 0xd1, 0x03, 0xd6, 0x51, 0x6e, 0xdb, 0x7a, 0xbe,
	0x52, 0x21, 0x5a, 0x3f, 0x37, 0x1c, 0x89, 0x0d, 0xc5, 0xdb, 0xee, 0x9c, 0x9e, 0xa2, 0x99, 0xab,
	0x71, 0x15, 0x76, 0xd1, 0x58, 0xe3, 0x9c, 0xf6, 0xb6, 0x5c, 0xca, 0xb6, 0x09, 0x0b, 0x5c, 0x87,
	0x6e, 0xd6, 0xfd, 0x90, 0x69, 0x84, 0x9b, 0xcc, 0xc5, 0x26, 0xf0, 0xd3, 0xf5, 0x86, 0x5a, 0x6f,
	0x55, 0xdf, 0xe9, 0x31, 0xf3, 0x8d, 0x72, 0x6b, 0x15, 0xbf, 0xcc, 0xa0, 0x69, 0x89, 0xb5, 0x41,
	0xe2, 0x72, 0x89, 0x59, 0x0c, 0xb4, 0x09, 0x73, 0x9f, 0x33, 0x75, 0x35, 0x33, 0xad, 0x0b, 0xd8,
	0x53, 0x0d, 0x59, 0x9a, 0x0a, 0x57, 0x50, 0x1e, 0x3e, 0xae, 0xbd, 0x35, 0x42, 0x9d, 0xc0, 0xb5,
	0xc9, 0x66, 0x1d, 0x76, 0xa3, 0xee, 0x90, 0x98, 0xfc, 0x49, 0x1c, 0xc2, 0xac, 0x84, 0x06, 0xb5,
	0xae, 0x56, 0x03, 0x71, 0x14, 0xaa, 0xea, 0x22, 0x3e, 0x44, 0x13, 0x32, 0xa8, 0x44, 0x9c, 0x30,
	0x70, 0xd9, 0xf1, 0x46, 0xe0, 0x85, 0x7e, 0x4c, 0xfb, 0x2c, 0x68, 0x4b, 0x29, 0x34, 0x45, 0x0b,
	0x20, 0x0b, 0x12, 0x52, 0xa1, 0xc0, 0x16, 0xd2, 0x9a, 0xb8, 0xa1, 0x5d, 0x27, 0x2c, 0x06, 0x7e,
	0x11, 0xc0, 0xe9, 0x34, 0xa0, 0xa4, 0x05, 0xd2, 0x05, 0x99, 0x24, 0x95, 0xf0, 0x23, 0x34, 0x2c,
	0x23, 0xe0, 0x23, 0x8c, 0xfd, 0xbf, 0x0a, 0xff, 0xc9, 0x14, 0xff, 0x44, 0x08, 0xe6, 0x43, 0x92,
	0x79, 0xb2, 0x8e, 0x6b, 0xe8, 0xa2, 0xec, 0x6c, 0x7a, 0x21, 0x23, 0x3b, 0x96, 0x5d, 0x3d, 0x3d,
	0x9f, 0x6f, 0x02, 0x30, 0x9f, 0x02, 0x68, 0xd5, 0x03, 0x67, 0x4c, 0xe2, 0xb4, 0x96, 0x31, 0x45,
	0x05, 0x88, 0x8d, 0x04, 0xb7, 0xe5, 0x59, 0xe5, 0xa2, 0x55, 0x8d, 0x0e, 0x31, 0x88, 0x81, 0x27,
	0xbd, 0x1c, 0xb8, 0x28, 0x03, 0xab, 0xb6, 0x9e, 0xde, 0x01, 0xc8, 0x71, 0x50, 0xa4, 0x0b, 0xf0,
	0x9b, 0x0c, 0x5a, 0x92, 0x92, 0x27, 0xa1, 0xaf, 0xc0, 0x5a, 0x49, 0xac, 0xc9, 0x1f, 0xc9, 0xeb,
	0x3e, 0xfe, 0x06, 0xd7, 0xa5, 0x37, 0x90, 0xba, 0xf5, 0xf6, 0xdd, 0xf0, 0x36, 0x8b, 0x92, 0xba,
	0xbd, 0x38, 0xda, 0x7d, 0xc8, 0xb5, 0xe4, 0x85, 0xd6, 0x8a, 0x2d, 0xd3, 0xf1, 0xbb, 0xef, 0xcc,
	0xee, 0x83, 0x5e, 0x4f, 0xd3, 0x47, 0xbb, 0x0f, 0xf5, 0xb4, 0x72, 0x71, 0x00, 0x65, 0xdd, 0xe8,
	0x66, 0xf9, 0x04, 0xee, 0x78, 0x24, 0xe2, 0x87, 0x68, 0x78, 0x55, 0x95, 0x1f, 0xf8, 0xff, 0x98,
	0x29, 0x27, 0x67, 0x7e, 0xbe, 0x63, 0x2a, 0xdd, 0x0b, 0x19, 0x00, 0xa6, 0x7a, 0x60, 0xec, 0xc7,
	0x57, 0xdb, 0x85, 0x83, 0x1a, 0x60, 0x74, 0x1d, 0x41, 0x09, 0x68, 0x17, 0x0d, 0xad, 0xaf, 0x9e,
	0xcd, 0x04, 0xb5, 0xff, 0x5c, 0xa7, 0x9c, 0x49, 0x6c, 0xf7, 0xd0, 0xa8, 0x64, 0xdb, 0x3c, 0xf7,
	0x6a, 0xef, 0xcb, 0x5d, 0xa5, 0x4a, 0x02, 0xb8, 0x8f, 0xb0, 0x0c, 0x10, 0xe3, 0xae, 0x76, 0x9e,
	0x69, 0x1f, 0x1f, 0x89, 0xe5, 0x5d, 0xf4, 0x9f, 0x64, 0x19, 0x0d, 0xb9, 0xda, 0xef, 0x52, 0x9b,
	0xb8, 0x48, 0xcc, 0x1e, 0xa3, 0x11, 0xc9, 0x4c, 0x9a, 0x64, 0xb5, 0xe7, 0x42, 0xe7, 0x84, 0x48,
	0xac, 0x9f, 0x22, 0x6d, 0x7d, 0xab, 0xa8, 0x9c, 0x58, 0xb5, 0xf9, 0x52, 0x37, 0x69, 0x90, 0xd8,
	0x87, 0x68, 0x46, 0x9a, 0xb7, 0xd4, 0x11, 0x54, 0xa3, 0x6e, 0x9c, 0x77, 0xec, 0xe5, 0x0d, 0x33,
	0xd7, 0x4a, 0x8a, 0xe1, 0xeb, 0xbc, 0x61, 0x29, 0x43, 0x7d, 0x6a, 0x5d, 0x9c, 0xfd, 0xf3, 0xb3,
	0x90, 0x79, 0xf7, 0xab, 0x90, 0x79, 0x0f, 0xd7, 0x47, 0xb8, 0xbe, 0xc3, 0xf5, 0x03, 0xae, 0x0f,
	0x6f, 0x27, 0x32, 0x4f, 0x06, 0xe0, 0x3f, 0xcb, 0xa1, 0xeb, 0x10, 0x3b, 0xc7, 0xff, 0xf0, 0x5c,
	0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x3d, 0x04, 0x16, 0xac, 0x0a, 0x00, 0x00,
}
