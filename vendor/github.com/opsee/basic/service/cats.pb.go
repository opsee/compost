// Code generated by protoc-gen-gogo.
// source: cats.proto
// DO NOT EDIT!

package service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/opsee/protobuf/opseeproto"
import _ "github.com/opsee/protobuf/opseeproto/types"
import _ "github.com/opsee/basic/schema/aws/credentials"
import opsee1 "github.com/opsee/basic/schema"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetCheckCountRequest struct {
	User     *opsee1.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Prorated bool         `protobuf:"varint,2,opt,name=prorated,proto3" json:"prorated,omitempty"`
}

func (m *GetCheckCountRequest) Reset()                    { *m = GetCheckCountRequest{} }
func (m *GetCheckCountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCheckCountRequest) ProtoMessage()               {}
func (*GetCheckCountRequest) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{0} }

func (m *GetCheckCountRequest) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetCheckCountResponse struct {
	Count    float32 `protobuf:"fixed32,1,opt,name=count,proto3" json:"count,omitempty"`
	Prorated bool    `protobuf:"varint,2,opt,name=prorated,proto3" json:"prorated,omitempty"`
}

func (m *GetCheckCountResponse) Reset()                    { *m = GetCheckCountResponse{} }
func (m *GetCheckCountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCheckCountResponse) ProtoMessage()               {}
func (*GetCheckCountResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{1} }

// Customers
type ListCustomersResponse struct {
	Customers []*opsee1.Customer `protobuf:"bytes,1,rep,name=customers" json:"customers,omitempty"`
	Page      int32              `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage   int32              `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Total     int32              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ListCustomersResponse) Reset()                    { *m = ListCustomersResponse{} }
func (m *ListCustomersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListCustomersResponse) ProtoMessage()               {}
func (*ListCustomersResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{2} }

func (m *ListCustomersResponse) GetCustomers() []*opsee1.Customer {
	if m != nil {
		return m.Customers
	}
	return nil
}

// Users
type GetUserRequest struct {
	Requestor  *opsee1.User `protobuf:"bytes,1,opt,name=requestor" json:"requestor,omitempty"`
	CustomerId string       `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Id         int32        `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Email      string       `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{3} }

func (m *GetUserRequest) GetRequestor() *opsee1.User {
	if m != nil {
		return m.Requestor
	}
	return nil
}

type GetUserResponse struct {
	User       *opsee1.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	BasicToken string       `protobuf:"bytes,2,opt,name=basic_token,json=basicToken,proto3" json:"basic_token,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{4} }

func (m *GetUserResponse) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type ListUsersRequest struct {
	Requestor *opsee1.User `protobuf:"bytes,1,opt,name=requestor" json:"requestor,omitempty"`
	Page      int32        `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage   int32        `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (m *ListUsersRequest) Reset()                    { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()               {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{5} }

func (m *ListUsersRequest) GetRequestor() *opsee1.User {
	if m != nil {
		return m.Requestor
	}
	return nil
}

type ListUsersResponse struct {
	Users   []*opsee1.User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Page    int32          `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32          `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Total   int32          `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ListUsersResponse) Reset()                    { *m = ListUsersResponse{} }
func (m *ListUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUsersResponse) ProtoMessage()               {}
func (*ListUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{6} }

func (m *ListUsersResponse) GetUsers() []*opsee1.User {
	if m != nil {
		return m.Users
	}
	return nil
}

type InviteUserRequest struct {
	Requestor *opsee1.User      `protobuf:"bytes,1,opt,name=requestor" json:"requestor,omitempty"`
	Email     string            `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Perms     *opsee1.UserFlags `protobuf:"bytes,3,opt,name=perms" json:"perms,omitempty"`
	Name      string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *InviteUserRequest) Reset()                    { *m = InviteUserRequest{} }
func (m *InviteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*InviteUserRequest) ProtoMessage()               {}
func (*InviteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{7} }

func (m *InviteUserRequest) GetRequestor() *opsee1.User {
	if m != nil {
		return m.Requestor
	}
	return nil
}

func (m *InviteUserRequest) GetPerms() *opsee1.UserFlags {
	if m != nil {
		return m.Perms
	}
	return nil
}

type InviteUserResponse struct {
	Invite *opsee1.Invite `protobuf:"bytes,1,opt,name=invite" json:"invite,omitempty"`
}

func (m *InviteUserResponse) Reset()                    { *m = InviteUserResponse{} }
func (m *InviteUserResponse) String() string            { return proto.CompactTextString(m) }
func (*InviteUserResponse) ProtoMessage()               {}
func (*InviteUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{8} }

func (m *InviteUserResponse) GetInvite() *opsee1.Invite {
	if m != nil {
		return m.Invite
	}
	return nil
}

type DeleteUserRequest struct {
	Requestor *opsee1.User `protobuf:"bytes,1,opt,name=requestor" json:"requestor,omitempty"`
	User      *opsee1.User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{9} }

func (m *DeleteUserRequest) GetRequestor() *opsee1.User {
	if m != nil {
		return m.Requestor
	}
	return nil
}

func (m *DeleteUserRequest) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type DeleteUserResponse struct {
	User *opsee1.User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *DeleteUserResponse) Reset()                    { *m = DeleteUserResponse{} }
func (m *DeleteUserResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserResponse) ProtoMessage()               {}
func (*DeleteUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{10} }

func (m *DeleteUserResponse) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type UpdateUserRequest struct {
	Requestor *opsee1.User      `protobuf:"bytes,1,opt,name=requestor" json:"requestor,omitempty"`
	User      *opsee1.User      `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Email     string            `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name      string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Password  string            `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Status    string            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Perms     *opsee1.UserFlags `protobuf:"bytes,7,opt,name=perms" json:"perms,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{11} }

func (m *UpdateUserRequest) GetRequestor() *opsee1.User {
	if m != nil {
		return m.Requestor
	}
	return nil
}

func (m *UpdateUserRequest) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UpdateUserRequest) GetPerms() *opsee1.UserFlags {
	if m != nil {
		return m.Perms
	}
	return nil
}

type UserTokenResponse struct {
	User  *opsee1.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Token string       `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *UserTokenResponse) Reset()                    { *m = UserTokenResponse{} }
func (m *UserTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*UserTokenResponse) ProtoMessage()               {}
func (*UserTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{12} }

func (m *UserTokenResponse) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

// Teams
type GetTeamRequest struct {
	Requestor *opsee1.User `protobuf:"bytes,1,opt,name=requestor" json:"requestor,omitempty"`
	Team      *opsee1.Team `protobuf:"bytes,2,opt,name=team" json:"team,omitempty"`
}

func (m *GetTeamRequest) Reset()                    { *m = GetTeamRequest{} }
func (m *GetTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTeamRequest) ProtoMessage()               {}
func (*GetTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{13} }

func (m *GetTeamRequest) GetRequestor() *opsee1.User {
	if m != nil {
		return m.Requestor
	}
	return nil
}

func (m *GetTeamRequest) GetTeam() *opsee1.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type GetTeamResponse struct {
	Team *opsee1.Team `protobuf:"bytes,1,opt,name=team" json:"team,omitempty"`
}

func (m *GetTeamResponse) Reset()                    { *m = GetTeamResponse{} }
func (m *GetTeamResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTeamResponse) ProtoMessage()               {}
func (*GetTeamResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{14} }

func (m *GetTeamResponse) GetTeam() *opsee1.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type UpdateTeamRequest struct {
	Requestor *opsee1.User `protobuf:"bytes,1,opt,name=requestor" json:"requestor,omitempty"`
	Team      *opsee1.Team `protobuf:"bytes,2,opt,name=team" json:"team,omitempty"`
}

func (m *UpdateTeamRequest) Reset()                    { *m = UpdateTeamRequest{} }
func (m *UpdateTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTeamRequest) ProtoMessage()               {}
func (*UpdateTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{15} }

func (m *UpdateTeamRequest) GetRequestor() *opsee1.User {
	if m != nil {
		return m.Requestor
	}
	return nil
}

func (m *UpdateTeamRequest) GetTeam() *opsee1.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type UpdateTeamResponse struct {
	Team *opsee1.Team `protobuf:"bytes,2,opt,name=team" json:"team,omitempty"`
}

func (m *UpdateTeamResponse) Reset()                    { *m = UpdateTeamResponse{} }
func (m *UpdateTeamResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTeamResponse) ProtoMessage()               {}
func (*UpdateTeamResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{16} }

func (m *UpdateTeamResponse) GetTeam() *opsee1.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type DeleteTeamRequest struct {
	Requestor *opsee1.User `protobuf:"bytes,1,opt,name=requestor" json:"requestor,omitempty"`
	Team      *opsee1.Team `protobuf:"bytes,2,opt,name=team" json:"team,omitempty"`
}

func (m *DeleteTeamRequest) Reset()                    { *m = DeleteTeamRequest{} }
func (m *DeleteTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTeamRequest) ProtoMessage()               {}
func (*DeleteTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{17} }

func (m *DeleteTeamRequest) GetRequestor() *opsee1.User {
	if m != nil {
		return m.Requestor
	}
	return nil
}

func (m *DeleteTeamRequest) GetTeam() *opsee1.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type DeleteTeamResponse struct {
	Team *opsee1.Team `protobuf:"bytes,2,opt,name=team" json:"team,omitempty"`
}

func (m *DeleteTeamResponse) Reset()                    { *m = DeleteTeamResponse{} }
func (m *DeleteTeamResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTeamResponse) ProtoMessage()               {}
func (*DeleteTeamResponse) Descriptor() ([]byte, []int) { return fileDescriptorCats, []int{18} }

func (m *DeleteTeamResponse) GetTeam() *opsee1.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCheckCountRequest)(nil), "opsee.GetCheckCountRequest")
	proto.RegisterType((*GetCheckCountResponse)(nil), "opsee.GetCheckCountResponse")
	proto.RegisterType((*ListCustomersResponse)(nil), "opsee.ListCustomersResponse")
	proto.RegisterType((*GetUserRequest)(nil), "opsee.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "opsee.GetUserResponse")
	proto.RegisterType((*ListUsersRequest)(nil), "opsee.ListUsersRequest")
	proto.RegisterType((*ListUsersResponse)(nil), "opsee.ListUsersResponse")
	proto.RegisterType((*InviteUserRequest)(nil), "opsee.InviteUserRequest")
	proto.RegisterType((*InviteUserResponse)(nil), "opsee.InviteUserResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "opsee.DeleteUserRequest")
	proto.RegisterType((*DeleteUserResponse)(nil), "opsee.DeleteUserResponse")
	proto.RegisterType((*UpdateUserRequest)(nil), "opsee.UpdateUserRequest")
	proto.RegisterType((*UserTokenResponse)(nil), "opsee.UserTokenResponse")
	proto.RegisterType((*GetTeamRequest)(nil), "opsee.GetTeamRequest")
	proto.RegisterType((*GetTeamResponse)(nil), "opsee.GetTeamResponse")
	proto.RegisterType((*UpdateTeamRequest)(nil), "opsee.UpdateTeamRequest")
	proto.RegisterType((*UpdateTeamResponse)(nil), "opsee.UpdateTeamResponse")
	proto.RegisterType((*DeleteTeamRequest)(nil), "opsee.DeleteTeamRequest")
	proto.RegisterType((*DeleteTeamResponse)(nil), "opsee.DeleteTeamResponse")
}
func (this *GetCheckCountRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetCheckCountRequest)
	if !ok {
		that2, ok := that.(GetCheckCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if this.Prorated != that1.Prorated {
		return false
	}
	return true
}
func (this *GetCheckCountResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetCheckCountResponse)
	if !ok {
		that2, ok := that.(GetCheckCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Prorated != that1.Prorated {
		return false
	}
	return true
}
func (this *ListCustomersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListCustomersResponse)
	if !ok {
		that2, ok := that.(ListCustomersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Customers) != len(that1.Customers) {
		return false
	}
	for i := range this.Customers {
		if !this.Customers[i].Equal(that1.Customers[i]) {
			return false
		}
	}
	if this.Page != that1.Page {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *GetUserRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetUserRequest)
	if !ok {
		that2, ok := that.(GetUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Requestor.Equal(that1.Requestor) {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *GetUserResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetUserResponse)
	if !ok {
		that2, ok := that.(GetUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if this.BasicToken != that1.BasicToken {
		return false
	}
	return true
}
func (this *ListUsersRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListUsersRequest)
	if !ok {
		that2, ok := that.(ListUsersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Requestor.Equal(that1.Requestor) {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	return true
}
func (this *ListUsersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListUsersResponse)
	if !ok {
		that2, ok := that.(ListUsersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if this.Page != that1.Page {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *InviteUserRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteUserRequest)
	if !ok {
		that2, ok := that.(InviteUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Requestor.Equal(that1.Requestor) {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if !this.Perms.Equal(that1.Perms) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *InviteUserResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteUserResponse)
	if !ok {
		that2, ok := that.(InviteUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Invite.Equal(that1.Invite) {
		return false
	}
	return true
}
func (this *DeleteUserRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteUserRequest)
	if !ok {
		that2, ok := that.(DeleteUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Requestor.Equal(that1.Requestor) {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	return true
}
func (this *DeleteUserResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteUserResponse)
	if !ok {
		that2, ok := that.(DeleteUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	return true
}
func (this *UpdateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateUserRequest)
	if !ok {
		that2, ok := that.(UpdateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Requestor.Equal(that1.Requestor) {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Perms.Equal(that1.Perms) {
		return false
	}
	return true
}
func (this *UserTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserTokenResponse)
	if !ok {
		that2, ok := that.(UserTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *GetTeamRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTeamRequest)
	if !ok {
		that2, ok := that.(GetTeamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Requestor.Equal(that1.Requestor) {
		return false
	}
	if !this.Team.Equal(that1.Team) {
		return false
	}
	return true
}
func (this *GetTeamResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTeamResponse)
	if !ok {
		that2, ok := that.(GetTeamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Team.Equal(that1.Team) {
		return false
	}
	return true
}
func (this *UpdateTeamRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateTeamRequest)
	if !ok {
		that2, ok := that.(UpdateTeamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Requestor.Equal(that1.Requestor) {
		return false
	}
	if !this.Team.Equal(that1.Team) {
		return false
	}
	return true
}
func (this *UpdateTeamResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateTeamResponse)
	if !ok {
		that2, ok := that.(UpdateTeamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Team.Equal(that1.Team) {
		return false
	}
	return true
}
func (this *DeleteTeamRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteTeamRequest)
	if !ok {
		that2, ok := that.(DeleteTeamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Requestor.Equal(that1.Requestor) {
		return false
	}
	if !this.Team.Equal(that1.Team) {
		return false
	}
	return true
}
func (this *DeleteTeamResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteTeamResponse)
	if !ok {
		that2, ok := that.(DeleteTeamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Team.Equal(that1.Team) {
		return false
	}
	return true
}

type GetCheckCountRequestGetter interface {
	GetGetCheckCountRequest() *GetCheckCountRequest
}

var GraphQLGetCheckCountRequestType *github_com_graphql_go_graphql.Object

type GetCheckCountResponseGetter interface {
	GetGetCheckCountResponse() *GetCheckCountResponse
}

var GraphQLGetCheckCountResponseType *github_com_graphql_go_graphql.Object

type ListCustomersResponseGetter interface {
	GetListCustomersResponse() *ListCustomersResponse
}

var GraphQLListCustomersResponseType *github_com_graphql_go_graphql.Object

type GetUserRequestGetter interface {
	GetGetUserRequest() *GetUserRequest
}

var GraphQLGetUserRequestType *github_com_graphql_go_graphql.Object

type GetUserResponseGetter interface {
	GetGetUserResponse() *GetUserResponse
}

var GraphQLGetUserResponseType *github_com_graphql_go_graphql.Object

type ListUsersRequestGetter interface {
	GetListUsersRequest() *ListUsersRequest
}

var GraphQLListUsersRequestType *github_com_graphql_go_graphql.Object

type ListUsersResponseGetter interface {
	GetListUsersResponse() *ListUsersResponse
}

var GraphQLListUsersResponseType *github_com_graphql_go_graphql.Object

type InviteUserRequestGetter interface {
	GetInviteUserRequest() *InviteUserRequest
}

var GraphQLInviteUserRequestType *github_com_graphql_go_graphql.Object

type InviteUserResponseGetter interface {
	GetInviteUserResponse() *InviteUserResponse
}

var GraphQLInviteUserResponseType *github_com_graphql_go_graphql.Object

type DeleteUserRequestGetter interface {
	GetDeleteUserRequest() *DeleteUserRequest
}

var GraphQLDeleteUserRequestType *github_com_graphql_go_graphql.Object

type DeleteUserResponseGetter interface {
	GetDeleteUserResponse() *DeleteUserResponse
}

var GraphQLDeleteUserResponseType *github_com_graphql_go_graphql.Object

type UpdateUserRequestGetter interface {
	GetUpdateUserRequest() *UpdateUserRequest
}

var GraphQLUpdateUserRequestType *github_com_graphql_go_graphql.Object

type UserTokenResponseGetter interface {
	GetUserTokenResponse() *UserTokenResponse
}

var GraphQLUserTokenResponseType *github_com_graphql_go_graphql.Object

type GetTeamRequestGetter interface {
	GetGetTeamRequest() *GetTeamRequest
}

var GraphQLGetTeamRequestType *github_com_graphql_go_graphql.Object

type GetTeamResponseGetter interface {
	GetGetTeamResponse() *GetTeamResponse
}

var GraphQLGetTeamResponseType *github_com_graphql_go_graphql.Object

type UpdateTeamRequestGetter interface {
	GetUpdateTeamRequest() *UpdateTeamRequest
}

var GraphQLUpdateTeamRequestType *github_com_graphql_go_graphql.Object

type UpdateTeamResponseGetter interface {
	GetUpdateTeamResponse() *UpdateTeamResponse
}

var GraphQLUpdateTeamResponseType *github_com_graphql_go_graphql.Object

type DeleteTeamRequestGetter interface {
	GetDeleteTeamRequest() *DeleteTeamRequest
}

var GraphQLDeleteTeamRequestType *github_com_graphql_go_graphql.Object

type DeleteTeamResponseGetter interface {
	GetDeleteTeamResponse() *DeleteTeamResponse
}

var GraphQLDeleteTeamResponseType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLGetCheckCountRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetCheckCountRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetCheckCountRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(GetCheckCountRequestGetter)
						if ok {
							face := inter.GetGetCheckCountRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"prorated": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetCheckCountRequest)
						if ok {
							return obj.Prorated, nil
						}
						inter, ok := p.Source.(GetCheckCountRequestGetter)
						if ok {
							face := inter.GetGetCheckCountRequest()
							if face == nil {
								return nil, nil
							}
							return face.Prorated, nil
						}
						return nil, fmt.Errorf("field prorated not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetCheckCountResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetCheckCountResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"count": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetCheckCountResponse)
						if ok {
							return obj.Count, nil
						}
						inter, ok := p.Source.(GetCheckCountResponseGetter)
						if ok {
							face := inter.GetGetCheckCountResponse()
							if face == nil {
								return nil, nil
							}
							return face.Count, nil
						}
						return nil, fmt.Errorf("field count not resolved")
					},
				},
				"prorated": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetCheckCountResponse)
						if ok {
							return obj.Prorated, nil
						}
						inter, ok := p.Source.(GetCheckCountResponseGetter)
						if ok {
							face := inter.GetGetCheckCountResponse()
							if face == nil {
								return nil, nil
							}
							return face.Prorated, nil
						}
						return nil, fmt.Errorf("field prorated not resolved")
					},
				},
			}
		}),
	})
	GraphQLListCustomersResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceListCustomersResponse",
		Description: "Customers",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"customers": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee1.GraphQLCustomerType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListCustomersResponse)
						if ok {
							return obj.Customers, nil
						}
						inter, ok := p.Source.(ListCustomersResponseGetter)
						if ok {
							face := inter.GetListCustomersResponse()
							if face == nil {
								return nil, nil
							}
							return face.Customers, nil
						}
						return nil, fmt.Errorf("field customers not resolved")
					},
				},
				"page": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListCustomersResponse)
						if ok {
							return obj.Page, nil
						}
						inter, ok := p.Source.(ListCustomersResponseGetter)
						if ok {
							face := inter.GetListCustomersResponse()
							if face == nil {
								return nil, nil
							}
							return face.Page, nil
						}
						return nil, fmt.Errorf("field page not resolved")
					},
				},
				"per_page": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListCustomersResponse)
						if ok {
							return obj.PerPage, nil
						}
						inter, ok := p.Source.(ListCustomersResponseGetter)
						if ok {
							face := inter.GetListCustomersResponse()
							if face == nil {
								return nil, nil
							}
							return face.PerPage, nil
						}
						return nil, fmt.Errorf("field per_page not resolved")
					},
				},
				"total": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListCustomersResponse)
						if ok {
							return obj.Total, nil
						}
						inter, ok := p.Source.(ListCustomersResponseGetter)
						if ok {
							face := inter.GetListCustomersResponse()
							if face == nil {
								return nil, nil
							}
							return face.Total, nil
						}
						return nil, fmt.Errorf("field total not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetUserRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetUserRequest",
		Description: "Users",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"requestor": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetUserRequest)
						if ok {
							if obj.Requestor == nil {
								return nil, nil
							}
							return obj.GetRequestor(), nil
						}
						inter, ok := p.Source.(GetUserRequestGetter)
						if ok {
							face := inter.GetGetUserRequest()
							if face == nil {
								return nil, nil
							}
							if face.Requestor == nil {
								return nil, nil
							}
							return face.GetRequestor(), nil
						}
						return nil, fmt.Errorf("field requestor not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetUserRequest)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(GetUserRequestGetter)
						if ok {
							face := inter.GetGetUserRequest()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetUserRequest)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(GetUserRequestGetter)
						if ok {
							face := inter.GetGetUserRequest()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"email": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetUserRequest)
						if ok {
							return obj.Email, nil
						}
						inter, ok := p.Source.(GetUserRequestGetter)
						if ok {
							face := inter.GetGetUserRequest()
							if face == nil {
								return nil, nil
							}
							return face.Email, nil
						}
						return nil, fmt.Errorf("field email not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetUserResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetUserResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetUserResponse)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(GetUserResponseGetter)
						if ok {
							face := inter.GetGetUserResponse()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"basic_token": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetUserResponse)
						if ok {
							return obj.BasicToken, nil
						}
						inter, ok := p.Source.(GetUserResponseGetter)
						if ok {
							face := inter.GetGetUserResponse()
							if face == nil {
								return nil, nil
							}
							return face.BasicToken, nil
						}
						return nil, fmt.Errorf("field basic_token not resolved")
					},
				},
			}
		}),
	})
	GraphQLListUsersRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceListUsersRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"requestor": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListUsersRequest)
						if ok {
							if obj.Requestor == nil {
								return nil, nil
							}
							return obj.GetRequestor(), nil
						}
						inter, ok := p.Source.(ListUsersRequestGetter)
						if ok {
							face := inter.GetListUsersRequest()
							if face == nil {
								return nil, nil
							}
							if face.Requestor == nil {
								return nil, nil
							}
							return face.GetRequestor(), nil
						}
						return nil, fmt.Errorf("field requestor not resolved")
					},
				},
				"page": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListUsersRequest)
						if ok {
							return obj.Page, nil
						}
						inter, ok := p.Source.(ListUsersRequestGetter)
						if ok {
							face := inter.GetListUsersRequest()
							if face == nil {
								return nil, nil
							}
							return face.Page, nil
						}
						return nil, fmt.Errorf("field page not resolved")
					},
				},
				"per_page": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListUsersRequest)
						if ok {
							return obj.PerPage, nil
						}
						inter, ok := p.Source.(ListUsersRequestGetter)
						if ok {
							face := inter.GetListUsersRequest()
							if face == nil {
								return nil, nil
							}
							return face.PerPage, nil
						}
						return nil, fmt.Errorf("field per_page not resolved")
					},
				},
			}
		}),
	})
	GraphQLListUsersResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceListUsersResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"users": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee1.GraphQLUserType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListUsersResponse)
						if ok {
							return obj.Users, nil
						}
						inter, ok := p.Source.(ListUsersResponseGetter)
						if ok {
							face := inter.GetListUsersResponse()
							if face == nil {
								return nil, nil
							}
							return face.Users, nil
						}
						return nil, fmt.Errorf("field users not resolved")
					},
				},
				"page": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListUsersResponse)
						if ok {
							return obj.Page, nil
						}
						inter, ok := p.Source.(ListUsersResponseGetter)
						if ok {
							face := inter.GetListUsersResponse()
							if face == nil {
								return nil, nil
							}
							return face.Page, nil
						}
						return nil, fmt.Errorf("field page not resolved")
					},
				},
				"per_page": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListUsersResponse)
						if ok {
							return obj.PerPage, nil
						}
						inter, ok := p.Source.(ListUsersResponseGetter)
						if ok {
							face := inter.GetListUsersResponse()
							if face == nil {
								return nil, nil
							}
							return face.PerPage, nil
						}
						return nil, fmt.Errorf("field per_page not resolved")
					},
				},
				"total": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListUsersResponse)
						if ok {
							return obj.Total, nil
						}
						inter, ok := p.Source.(ListUsersResponseGetter)
						if ok {
							face := inter.GetListUsersResponse()
							if face == nil {
								return nil, nil
							}
							return face.Total, nil
						}
						return nil, fmt.Errorf("field total not resolved")
					},
				},
			}
		}),
	})
	GraphQLInviteUserRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceInviteUserRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"requestor": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InviteUserRequest)
						if ok {
							if obj.Requestor == nil {
								return nil, nil
							}
							return obj.GetRequestor(), nil
						}
						inter, ok := p.Source.(InviteUserRequestGetter)
						if ok {
							face := inter.GetInviteUserRequest()
							if face == nil {
								return nil, nil
							}
							if face.Requestor == nil {
								return nil, nil
							}
							return face.GetRequestor(), nil
						}
						return nil, fmt.Errorf("field requestor not resolved")
					},
				},
				"email": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InviteUserRequest)
						if ok {
							return obj.Email, nil
						}
						inter, ok := p.Source.(InviteUserRequestGetter)
						if ok {
							face := inter.GetInviteUserRequest()
							if face == nil {
								return nil, nil
							}
							return face.Email, nil
						}
						return nil, fmt.Errorf("field email not resolved")
					},
				},
				"perms": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserFlagsType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InviteUserRequest)
						if ok {
							if obj.Perms == nil {
								return nil, nil
							}
							return obj.GetPerms(), nil
						}
						inter, ok := p.Source.(InviteUserRequestGetter)
						if ok {
							face := inter.GetInviteUserRequest()
							if face == nil {
								return nil, nil
							}
							if face.Perms == nil {
								return nil, nil
							}
							return face.GetPerms(), nil
						}
						return nil, fmt.Errorf("field perms not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InviteUserRequest)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(InviteUserRequestGetter)
						if ok {
							face := inter.GetInviteUserRequest()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
			}
		}),
	})
	GraphQLInviteUserResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceInviteUserResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"invite": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLInviteType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*InviteUserResponse)
						if ok {
							if obj.Invite == nil {
								return nil, nil
							}
							return obj.GetInvite(), nil
						}
						inter, ok := p.Source.(InviteUserResponseGetter)
						if ok {
							face := inter.GetInviteUserResponse()
							if face == nil {
								return nil, nil
							}
							if face.Invite == nil {
								return nil, nil
							}
							return face.GetInvite(), nil
						}
						return nil, fmt.Errorf("field invite not resolved")
					},
				},
			}
		}),
	})
	GraphQLDeleteUserRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceDeleteUserRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"requestor": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DeleteUserRequest)
						if ok {
							if obj.Requestor == nil {
								return nil, nil
							}
							return obj.GetRequestor(), nil
						}
						inter, ok := p.Source.(DeleteUserRequestGetter)
						if ok {
							face := inter.GetDeleteUserRequest()
							if face == nil {
								return nil, nil
							}
							if face.Requestor == nil {
								return nil, nil
							}
							return face.GetRequestor(), nil
						}
						return nil, fmt.Errorf("field requestor not resolved")
					},
				},
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DeleteUserRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(DeleteUserRequestGetter)
						if ok {
							face := inter.GetDeleteUserRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
			}
		}),
	})
	GraphQLDeleteUserResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceDeleteUserResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DeleteUserResponse)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(DeleteUserResponseGetter)
						if ok {
							face := inter.GetDeleteUserResponse()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
			}
		}),
	})
	GraphQLUpdateUserRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceUpdateUserRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"requestor": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateUserRequest)
						if ok {
							if obj.Requestor == nil {
								return nil, nil
							}
							return obj.GetRequestor(), nil
						}
						inter, ok := p.Source.(UpdateUserRequestGetter)
						if ok {
							face := inter.GetUpdateUserRequest()
							if face == nil {
								return nil, nil
							}
							if face.Requestor == nil {
								return nil, nil
							}
							return face.GetRequestor(), nil
						}
						return nil, fmt.Errorf("field requestor not resolved")
					},
				},
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateUserRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(UpdateUserRequestGetter)
						if ok {
							face := inter.GetUpdateUserRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"email": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateUserRequest)
						if ok {
							return obj.Email, nil
						}
						inter, ok := p.Source.(UpdateUserRequestGetter)
						if ok {
							face := inter.GetUpdateUserRequest()
							if face == nil {
								return nil, nil
							}
							return face.Email, nil
						}
						return nil, fmt.Errorf("field email not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateUserRequest)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(UpdateUserRequestGetter)
						if ok {
							face := inter.GetUpdateUserRequest()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"password": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateUserRequest)
						if ok {
							return obj.Password, nil
						}
						inter, ok := p.Source.(UpdateUserRequestGetter)
						if ok {
							face := inter.GetUpdateUserRequest()
							if face == nil {
								return nil, nil
							}
							return face.Password, nil
						}
						return nil, fmt.Errorf("field password not resolved")
					},
				},
				"status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateUserRequest)
						if ok {
							return obj.Status, nil
						}
						inter, ok := p.Source.(UpdateUserRequestGetter)
						if ok {
							face := inter.GetUpdateUserRequest()
							if face == nil {
								return nil, nil
							}
							return face.Status, nil
						}
						return nil, fmt.Errorf("field status not resolved")
					},
				},
				"perms": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserFlagsType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateUserRequest)
						if ok {
							if obj.Perms == nil {
								return nil, nil
							}
							return obj.GetPerms(), nil
						}
						inter, ok := p.Source.(UpdateUserRequestGetter)
						if ok {
							face := inter.GetUpdateUserRequest()
							if face == nil {
								return nil, nil
							}
							if face.Perms == nil {
								return nil, nil
							}
							return face.GetPerms(), nil
						}
						return nil, fmt.Errorf("field perms not resolved")
					},
				},
			}
		}),
	})
	GraphQLUserTokenResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceUserTokenResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserTokenResponse)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(UserTokenResponseGetter)
						if ok {
							face := inter.GetUserTokenResponse()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"token": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UserTokenResponse)
						if ok {
							return obj.Token, nil
						}
						inter, ok := p.Source.(UserTokenResponseGetter)
						if ok {
							face := inter.GetUserTokenResponse()
							if face == nil {
								return nil, nil
							}
							return face.Token, nil
						}
						return nil, fmt.Errorf("field token not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetTeamRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetTeamRequest",
		Description: "Teams",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"requestor": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetTeamRequest)
						if ok {
							if obj.Requestor == nil {
								return nil, nil
							}
							return obj.GetRequestor(), nil
						}
						inter, ok := p.Source.(GetTeamRequestGetter)
						if ok {
							face := inter.GetGetTeamRequest()
							if face == nil {
								return nil, nil
							}
							if face.Requestor == nil {
								return nil, nil
							}
							return face.GetRequestor(), nil
						}
						return nil, fmt.Errorf("field requestor not resolved")
					},
				},
				"team": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLTeamType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetTeamRequest)
						if ok {
							if obj.Team == nil {
								return nil, nil
							}
							return obj.GetTeam(), nil
						}
						inter, ok := p.Source.(GetTeamRequestGetter)
						if ok {
							face := inter.GetGetTeamRequest()
							if face == nil {
								return nil, nil
							}
							if face.Team == nil {
								return nil, nil
							}
							return face.GetTeam(), nil
						}
						return nil, fmt.Errorf("field team not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetTeamResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetTeamResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"team": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLTeamType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetTeamResponse)
						if ok {
							if obj.Team == nil {
								return nil, nil
							}
							return obj.GetTeam(), nil
						}
						inter, ok := p.Source.(GetTeamResponseGetter)
						if ok {
							face := inter.GetGetTeamResponse()
							if face == nil {
								return nil, nil
							}
							if face.Team == nil {
								return nil, nil
							}
							return face.GetTeam(), nil
						}
						return nil, fmt.Errorf("field team not resolved")
					},
				},
			}
		}),
	})
	GraphQLUpdateTeamRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceUpdateTeamRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"requestor": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateTeamRequest)
						if ok {
							if obj.Requestor == nil {
								return nil, nil
							}
							return obj.GetRequestor(), nil
						}
						inter, ok := p.Source.(UpdateTeamRequestGetter)
						if ok {
							face := inter.GetUpdateTeamRequest()
							if face == nil {
								return nil, nil
							}
							if face.Requestor == nil {
								return nil, nil
							}
							return face.GetRequestor(), nil
						}
						return nil, fmt.Errorf("field requestor not resolved")
					},
				},
				"team": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLTeamType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateTeamRequest)
						if ok {
							if obj.Team == nil {
								return nil, nil
							}
							return obj.GetTeam(), nil
						}
						inter, ok := p.Source.(UpdateTeamRequestGetter)
						if ok {
							face := inter.GetUpdateTeamRequest()
							if face == nil {
								return nil, nil
							}
							if face.Team == nil {
								return nil, nil
							}
							return face.GetTeam(), nil
						}
						return nil, fmt.Errorf("field team not resolved")
					},
				},
			}
		}),
	})
	GraphQLUpdateTeamResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceUpdateTeamResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"team": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLTeamType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*UpdateTeamResponse)
						if ok {
							if obj.Team == nil {
								return nil, nil
							}
							return obj.GetTeam(), nil
						}
						inter, ok := p.Source.(UpdateTeamResponseGetter)
						if ok {
							face := inter.GetUpdateTeamResponse()
							if face == nil {
								return nil, nil
							}
							if face.Team == nil {
								return nil, nil
							}
							return face.GetTeam(), nil
						}
						return nil, fmt.Errorf("field team not resolved")
					},
				},
			}
		}),
	})
	GraphQLDeleteTeamRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceDeleteTeamRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"requestor": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DeleteTeamRequest)
						if ok {
							if obj.Requestor == nil {
								return nil, nil
							}
							return obj.GetRequestor(), nil
						}
						inter, ok := p.Source.(DeleteTeamRequestGetter)
						if ok {
							face := inter.GetDeleteTeamRequest()
							if face == nil {
								return nil, nil
							}
							if face.Requestor == nil {
								return nil, nil
							}
							return face.GetRequestor(), nil
						}
						return nil, fmt.Errorf("field requestor not resolved")
					},
				},
				"team": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLTeamType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DeleteTeamRequest)
						if ok {
							if obj.Team == nil {
								return nil, nil
							}
							return obj.GetTeam(), nil
						}
						inter, ok := p.Source.(DeleteTeamRequestGetter)
						if ok {
							face := inter.GetDeleteTeamRequest()
							if face == nil {
								return nil, nil
							}
							if face.Team == nil {
								return nil, nil
							}
							return face.GetTeam(), nil
						}
						return nil, fmt.Errorf("field team not resolved")
					},
				},
			}
		}),
	})
	GraphQLDeleteTeamResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceDeleteTeamResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"team": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLTeamType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DeleteTeamResponse)
						if ok {
							if obj.Team == nil {
								return nil, nil
							}
							return obj.GetTeam(), nil
						}
						inter, ok := p.Source.(DeleteTeamResponseGetter)
						if ok {
							face := inter.GetDeleteTeamResponse()
							if face == nil {
								return nil, nil
							}
							if face.Team == nil {
								return nil, nil
							}
							return face.GetTeam(), nil
						}
						return nil, fmt.Errorf("field team not resolved")
					},
				},
			}
		}),
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Cats service

type CatsClient interface {
	GetCheckCount(ctx context.Context, in *GetCheckCountRequest, opts ...grpc.CallOption) (*GetCheckCountResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserTokenResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error)
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error)
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
}

type catsClient struct {
	cc *grpc.ClientConn
}

func NewCatsClient(cc *grpc.ClientConn) CatsClient {
	return &catsClient{cc}
}

func (c *catsClient) GetCheckCount(ctx context.Context, in *GetCheckCountRequest, opts ...grpc.CallOption) (*GetCheckCountResponse, error) {
	out := new(GetCheckCountResponse)
	err := grpc.Invoke(ctx, "/opsee.Cats/GetCheckCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/opsee.Cats/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserTokenResponse, error) {
	out := new(UserTokenResponse)
	err := grpc.Invoke(ctx, "/opsee.Cats/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := grpc.Invoke(ctx, "/opsee.Cats/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error) {
	out := new(InviteUserResponse)
	err := grpc.Invoke(ctx, "/opsee.Cats/InviteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := grpc.Invoke(ctx, "/opsee.Cats/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error) {
	out := new(GetTeamResponse)
	err := grpc.Invoke(ctx, "/opsee.Cats/GetTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error) {
	out := new(UpdateTeamResponse)
	err := grpc.Invoke(ctx, "/opsee.Cats/UpdateTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	out := new(DeleteTeamResponse)
	err := grpc.Invoke(ctx, "/opsee.Cats/DeleteTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cats service

type CatsServer interface {
	GetCheckCount(context.Context, *GetCheckCountRequest) (*GetCheckCountResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserTokenResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error)
	UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error)
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
}

func RegisterCatsServer(s *grpc.Server, srv CatsServer) {
	s.RegisterService(&_Cats_serviceDesc, srv)
}

func _Cats_GetCheckCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).GetCheckCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Cats/GetCheckCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).GetCheckCount(ctx, req.(*GetCheckCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Cats/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Cats/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Cats/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Cats/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Cats/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Cats/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Cats/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Cats/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opsee.Cats",
	HandlerType: (*CatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckCount",
			Handler:    _Cats_GetCheckCount_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Cats_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Cats_UpdateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Cats_ListUsers_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _Cats_InviteUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Cats_DeleteUser_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Cats_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _Cats_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Cats_DeleteTeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorCats,
}

func (m *GetCheckCountRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetCheckCountRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Prorated {
		data[i] = 0x10
		i++
		if m.Prorated {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetCheckCountResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetCheckCountResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		data[i] = 0xd
		i++
		i = encodeFixed32Cats(data, i, uint32(math.Float32bits(float32(m.Count))))
	}
	if m.Prorated {
		data[i] = 0x10
		i++
		if m.Prorated {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ListCustomersResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListCustomersResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Customers) > 0 {
		for _, msg := range m.Customers {
			data[i] = 0xa
			i++
			i = encodeVarintCats(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintCats(data, i, uint64(m.Page))
	}
	if m.PerPage != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintCats(data, i, uint64(m.PerPage))
	}
	if m.Total != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintCats(data, i, uint64(m.Total))
	}
	return i, nil
}

func (m *GetUserRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetUserRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestor != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Requestor.Size()))
		n2, err := m.Requestor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.CustomerId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(len(m.CustomerId)))
		i += copy(data[i:], m.CustomerId)
	}
	if m.Id != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintCats(data, i, uint64(m.Id))
	}
	if len(m.Email) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintCats(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	return i, nil
}

func (m *GetUserResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetUserResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.User.Size()))
		n3, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.BasicToken) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(len(m.BasicToken)))
		i += copy(data[i:], m.BasicToken)
	}
	return i, nil
}

func (m *ListUsersRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListUsersRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestor != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Requestor.Size()))
		n4, err := m.Requestor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Page != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintCats(data, i, uint64(m.Page))
	}
	if m.PerPage != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintCats(data, i, uint64(m.PerPage))
	}
	return i, nil
}

func (m *ListUsersResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListUsersResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			data[i] = 0xa
			i++
			i = encodeVarintCats(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintCats(data, i, uint64(m.Page))
	}
	if m.PerPage != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintCats(data, i, uint64(m.PerPage))
	}
	if m.Total != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintCats(data, i, uint64(m.Total))
	}
	return i, nil
}

func (m *InviteUserRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InviteUserRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestor != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Requestor.Size()))
		n5, err := m.Requestor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Email) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if m.Perms != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintCats(data, i, uint64(m.Perms.Size()))
		n6, err := m.Perms.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Name) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintCats(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *InviteUserResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InviteUserResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Invite != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Invite.Size()))
		n7, err := m.Invite.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *DeleteUserRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteUserRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestor != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Requestor.Size()))
		n8, err := m.Requestor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.User != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(m.User.Size()))
		n9, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *DeleteUserResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteUserResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(m.User.Size()))
		n10, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *UpdateUserRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateUserRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestor != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Requestor.Size()))
		n11, err := m.Requestor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.User != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(m.User.Size()))
		n12, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Email) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintCats(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.Name) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintCats(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Password) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintCats(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if len(m.Status) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintCats(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if m.Perms != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintCats(data, i, uint64(m.Perms.Size()))
		n13, err := m.Perms.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *UserTokenResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UserTokenResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.User.Size()))
		n14, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Token) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *GetTeamRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetTeamRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestor != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Requestor.Size()))
		n15, err := m.Requestor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Team != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(m.Team.Size()))
		n16, err := m.Team.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *GetTeamResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetTeamResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Team.Size()))
		n17, err := m.Team.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *UpdateTeamRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateTeamRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestor != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Requestor.Size()))
		n18, err := m.Requestor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Team != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(m.Team.Size()))
		n19, err := m.Team.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *UpdateTeamResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateTeamResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(m.Team.Size()))
		n20, err := m.Team.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *DeleteTeamRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteTeamRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestor != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCats(data, i, uint64(m.Requestor.Size()))
		n21, err := m.Requestor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Team != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(m.Team.Size()))
		n22, err := m.Team.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *DeleteTeamResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteTeamResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCats(data, i, uint64(m.Team.Size()))
		n23, err := m.Team.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func encodeFixed64Cats(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Cats(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCats(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetCheckCountRequest(r randyCats, easy bool) *GetCheckCountRequest {
	this := &GetCheckCountRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	this.Prorated = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetCheckCountResponse(r randyCats, easy bool) *GetCheckCountResponse {
	this := &GetCheckCountResponse{}
	this.Count = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Count *= -1
	}
	this.Prorated = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListCustomersResponse(r randyCats, easy bool) *ListCustomersResponse {
	this := &ListCustomersResponse{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Customers = make([]*opsee1.Customer, v1)
		for i := 0; i < v1; i++ {
			this.Customers[i] = opsee1.NewPopulatedCustomer(r, easy)
		}
	}
	this.Page = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Page *= -1
	}
	this.PerPage = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PerPage *= -1
	}
	this.Total = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Total *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserRequest(r randyCats, easy bool) *GetUserRequest {
	this := &GetUserRequest{}
	if r.Intn(10) != 0 {
		this.Requestor = opsee1.NewPopulatedUser(r, easy)
	}
	this.CustomerId = randStringCats(r)
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Email = randStringCats(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserResponse(r randyCats, easy bool) *GetUserResponse {
	this := &GetUserResponse{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	this.BasicToken = randStringCats(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListUsersRequest(r randyCats, easy bool) *ListUsersRequest {
	this := &ListUsersRequest{}
	if r.Intn(10) != 0 {
		this.Requestor = opsee1.NewPopulatedUser(r, easy)
	}
	this.Page = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Page *= -1
	}
	this.PerPage = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PerPage *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListUsersResponse(r randyCats, easy bool) *ListUsersResponse {
	this := &ListUsersResponse{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Users = make([]*opsee1.User, v2)
		for i := 0; i < v2; i++ {
			this.Users[i] = opsee1.NewPopulatedUser(r, easy)
		}
	}
	this.Page = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Page *= -1
	}
	this.PerPage = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PerPage *= -1
	}
	this.Total = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Total *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInviteUserRequest(r randyCats, easy bool) *InviteUserRequest {
	this := &InviteUserRequest{}
	if r.Intn(10) != 0 {
		this.Requestor = opsee1.NewPopulatedUser(r, easy)
	}
	this.Email = randStringCats(r)
	if r.Intn(10) != 0 {
		this.Perms = opsee1.NewPopulatedUserFlags(r, easy)
	}
	this.Name = randStringCats(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInviteUserResponse(r randyCats, easy bool) *InviteUserResponse {
	this := &InviteUserResponse{}
	if r.Intn(10) != 0 {
		this.Invite = opsee1.NewPopulatedInvite(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteUserRequest(r randyCats, easy bool) *DeleteUserRequest {
	this := &DeleteUserRequest{}
	if r.Intn(10) != 0 {
		this.Requestor = opsee1.NewPopulatedUser(r, easy)
	}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteUserResponse(r randyCats, easy bool) *DeleteUserResponse {
	this := &DeleteUserResponse{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateUserRequest(r randyCats, easy bool) *UpdateUserRequest {
	this := &UpdateUserRequest{}
	if r.Intn(10) != 0 {
		this.Requestor = opsee1.NewPopulatedUser(r, easy)
	}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	this.Email = randStringCats(r)
	this.Name = randStringCats(r)
	this.Password = randStringCats(r)
	this.Status = randStringCats(r)
	if r.Intn(10) != 0 {
		this.Perms = opsee1.NewPopulatedUserFlags(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserTokenResponse(r randyCats, easy bool) *UserTokenResponse {
	this := &UserTokenResponse{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	this.Token = randStringCats(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTeamRequest(r randyCats, easy bool) *GetTeamRequest {
	this := &GetTeamRequest{}
	if r.Intn(10) != 0 {
		this.Requestor = opsee1.NewPopulatedUser(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Team = opsee1.NewPopulatedTeam(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTeamResponse(r randyCats, easy bool) *GetTeamResponse {
	this := &GetTeamResponse{}
	if r.Intn(10) != 0 {
		this.Team = opsee1.NewPopulatedTeam(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateTeamRequest(r randyCats, easy bool) *UpdateTeamRequest {
	this := &UpdateTeamRequest{}
	if r.Intn(10) != 0 {
		this.Requestor = opsee1.NewPopulatedUser(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Team = opsee1.NewPopulatedTeam(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateTeamResponse(r randyCats, easy bool) *UpdateTeamResponse {
	this := &UpdateTeamResponse{}
	if r.Intn(10) != 0 {
		this.Team = opsee1.NewPopulatedTeam(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteTeamRequest(r randyCats, easy bool) *DeleteTeamRequest {
	this := &DeleteTeamRequest{}
	if r.Intn(10) != 0 {
		this.Requestor = opsee1.NewPopulatedUser(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Team = opsee1.NewPopulatedTeam(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteTeamResponse(r randyCats, easy bool) *DeleteTeamResponse {
	this := &DeleteTeamResponse{}
	if r.Intn(10) != 0 {
		this.Team = opsee1.NewPopulatedTeam(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyCats interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCats(r randyCats) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCats(r randyCats) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneCats(r)
	}
	return string(tmps)
}
func randUnrecognizedCats(r randyCats, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldCats(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldCats(data []byte, r randyCats, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateCats(data, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		data = encodeVarintPopulateCats(data, uint64(v4))
	case 1:
		data = encodeVarintPopulateCats(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateCats(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateCats(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateCats(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateCats(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *GetCheckCountRequest) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	if m.Prorated {
		n += 2
	}
	return n
}

func (m *GetCheckCountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 5
	}
	if m.Prorated {
		n += 2
	}
	return n
}

func (m *ListCustomersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Customers) > 0 {
		for _, e := range m.Customers {
			l = e.Size()
			n += 1 + l + sovCats(uint64(l))
		}
	}
	if m.Page != 0 {
		n += 1 + sovCats(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovCats(uint64(m.PerPage))
	}
	if m.Total != 0 {
		n += 1 + sovCats(uint64(m.Total))
	}
	return n
}

func (m *GetUserRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovCats(uint64(m.Id))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *GetUserResponse) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	l = len(m.BasicToken)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *ListUsersRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovCats(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovCats(uint64(m.PerPage))
	}
	return n
}

func (m *ListUsersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovCats(uint64(l))
		}
	}
	if m.Page != 0 {
		n += 1 + sovCats(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovCats(uint64(m.PerPage))
	}
	if m.Total != 0 {
		n += 1 + sovCats(uint64(m.Total))
	}
	return n
}

func (m *InviteUserRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	if m.Perms != nil {
		l = m.Perms.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *InviteUserResponse) Size() (n int) {
	var l int
	_ = l
	if m.Invite != nil {
		l = m.Invite.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *DeleteUserRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *DeleteUserResponse) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *UpdateUserRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	if m.Perms != nil {
		l = m.Perms.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *UserTokenResponse) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *GetTeamRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *GetTeamResponse) Size() (n int) {
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *UpdateTeamRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *UpdateTeamResponse) Size() (n int) {
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *DeleteTeamRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func (m *DeleteTeamResponse) Size() (n int) {
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCats(uint64(l))
	}
	return n
}

func sovCats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCats(x uint64) (n int) {
	return sovCats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetCheckCountRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCheckCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCheckCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prorated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prorated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCheckCountResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCheckCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCheckCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(data[iNdEx-4])
			v |= uint32(data[iNdEx-3]) << 8
			v |= uint32(data[iNdEx-2]) << 16
			v |= uint32(data[iNdEx-1]) << 24
			m.Count = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prorated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prorated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCustomersResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCustomersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCustomersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Customers = append(m.Customers, &opsee1.Customer{})
			if err := m.Customers[len(m.Customers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PerPage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &opsee1.User{}
			}
			if err := m.Requestor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasicToken = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUsersRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &opsee1.User{}
			}
			if err := m.Requestor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PerPage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUsersResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUsersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUsersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &opsee1.User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PerPage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteUserRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &opsee1.User{}
			}
			if err := m.Requestor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Perms == nil {
				m.Perms = &opsee1.UserFlags{}
			}
			if err := m.Perms.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteUserResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invite == nil {
				m.Invite = &opsee1.Invite{}
			}
			if err := m.Invite.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &opsee1.User{}
			}
			if err := m.Requestor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &opsee1.User{}
			}
			if err := m.Requestor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Perms == nil {
				m.Perms = &opsee1.UserFlags{}
			}
			if err := m.Perms.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTokenResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &opsee1.User{}
			}
			if err := m.Requestor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &opsee1.Team{}
			}
			if err := m.Team.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &opsee1.Team{}
			}
			if err := m.Team.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTeamRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &opsee1.User{}
			}
			if err := m.Requestor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &opsee1.Team{}
			}
			if err := m.Team.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTeamResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &opsee1.Team{}
			}
			if err := m.Team.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTeamRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &opsee1.User{}
			}
			if err := m.Requestor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &opsee1.Team{}
			}
			if err := m.Team.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTeamResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &opsee1.Team{}
			}
			if err := m.Team.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCats(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCats(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCats   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorCats = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0x3d, 0x6f, 0x13, 0x4d,
	0x10, 0x7e, 0xcf, 0xf1, 0x47, 0x3c, 0x56, 0xbe, 0x56, 0x49, 0x5e, 0xc7, 0xef, 0xab, 0x04, 0x4e,
	0x0a, 0x0a, 0x05, 0x31, 0x32, 0xa2, 0x20, 0x34, 0x28, 0x46, 0xa0, 0xa0, 0x14, 0xe8, 0x48, 0x1a,
	0x84, 0x64, 0xad, 0xcf, 0x4b, 0x72, 0x8a, 0xcf, 0x67, 0x6e, 0xd7, 0x89, 0x10, 0x1d, 0x2d, 0x0d,
	0xbf, 0x81, 0x8a, 0x9f, 0x40, 0x49, 0x49, 0xc9, 0x4f, 0x00, 0x24, 0xf8, 0x0d, 0x94, 0xcc, 0xed,
	0xee, 0xdd, 0xad, 0xcf, 0x8e, 0x09, 0x16, 0x29, 0x4e, 0xda, 0x99, 0xd9, 0x79, 0xe6, 0x99, 0x8f,
	0x1d, 0x1b, 0xc0, 0xa5, 0x82, 0x6f, 0xf7, 0xc3, 0x40, 0x04, 0xa4, 0x10, 0xf4, 0x39, 0x63, 0xb5,
	0x9b, 0x47, 0x9e, 0x38, 0x1e, 0xb4, 0xb7, 0xdd, 0xc0, 0xaf, 0x4b, 0x4d, 0x5d, 0x9a, 0xdb, 0x83,
	0xe7, 0x4a, 0x94, 0x92, 0x3a, 0x2a, 0xc7, 0xda, 0xce, 0x85, 0x3c, 0xc4, 0xcb, 0x3e, 0xe3, 0x75,
	0xe1, 0xf9, 0x8c, 0x0b, 0xea, 0xf7, 0xb5, 0xef, 0x9d, 0x11, 0xdf, 0x36, 0xe5, 0x9e, 0x5b, 0xe7,
	0xee, 0x31, 0xf3, 0x69, 0x9d, 0x9e, 0xf1, 0xba, 0x1b, 0xb2, 0x0e, 0xeb, 0x09, 0x8f, 0x76, 0xb9,
	0x02, 0xd1, 0xae, 0x5b, 0x93, 0x5d, 0x07, 0x9c, 0x85, 0xea, 0xa6, 0xfd, 0x04, 0x96, 0x1f, 0x32,
	0xd1, 0x3c, 0x66, 0xee, 0x49, 0x33, 0x18, 0xf4, 0x84, 0xc3, 0x5e, 0x0c, 0x90, 0x05, 0xd9, 0x80,
	0x7c, 0x74, 0xab, 0x6a, 0x5d, 0xb1, 0xb6, 0x2a, 0x8d, 0xca, 0xb6, 0x4a, 0xea, 0x10, 0x55, 0x8e,
	0x34, 0x90, 0x1a, 0xcc, 0x22, 0x42, 0x48, 0x05, 0xeb, 0x54, 0x73, 0x78, 0x69, 0xd6, 0x49, 0x64,
	0x7b, 0x0f, 0x56, 0x32, 0xa0, 0xbc, 0x1f, 0xf4, 0x38, 0x23, 0xcb, 0x50, 0x70, 0x23, 0x85, 0x84,
	0xcd, 0x39, 0x4a, 0x98, 0x08, 0xf5, 0xc6, 0x82, 0x95, 0x7d, 0x8f, 0x8b, 0xe6, 0x80, 0x8b, 0xc0,
	0x67, 0x21, 0x4f, 0xb0, 0x6e, 0x40, 0xd9, 0x8d, 0x95, 0x88, 0x37, 0x83, 0x34, 0x17, 0x34, 0xcd,
	0xf8, 0xb2, 0x93, 0xde, 0x20, 0x04, 0xf2, 0x7d, 0x7a, 0xc4, 0x64, 0x80, 0x82, 0x23, 0xcf, 0x64,
	0x0d, 0x03, 0xb3, 0xb0, 0x25, 0xf5, 0x33, 0x52, 0x5f, 0x42, 0xf9, 0x71, 0x64, 0x42, 0xa6, 0x22,
	0x10, 0xb4, 0x5b, 0xcd, 0x4b, 0xbd, 0x12, 0xec, 0xd7, 0x16, 0xcc, 0x63, 0x66, 0xb2, 0x0c, 0xba,
	0x50, 0xd7, 0xa1, 0x1c, 0xaa, 0x63, 0x30, 0xb6, 0x5a, 0xa9, 0x15, 0x6b, 0x5a, 0x89, 0xf9, 0xb4,
	0x3c, 0x95, 0x6a, 0xd9, 0x81, 0x58, 0xb5, 0xd7, 0x21, 0xf3, 0x90, 0x43, 0xbd, 0x62, 0x82, 0xa7,
	0x88, 0x04, 0xb6, 0xcb, 0x53, 0x24, 0xca, 0x8e, 0x12, 0xb0, 0x65, 0x0b, 0x09, 0x07, 0x5d, 0x8b,
	0xdf, 0x76, 0x0b, 0x43, 0xcb, 0x09, 0x68, 0x89, 0xe0, 0x84, 0xf5, 0xe2, 0xd0, 0x52, 0x75, 0x10,
	0x69, 0xec, 0x2e, 0x2c, 0x46, 0x65, 0x8e, 0x5c, 0xf8, 0x14, 0xa9, 0xfd, 0x59, 0x75, 0xed, 0x57,
	0xb0, 0x64, 0x44, 0xd3, 0x49, 0x5c, 0x85, 0x42, 0xc4, 0x35, 0x6e, 0xe6, 0x50, 0x28, 0x65, 0xf9,
	0x3b, 0x4d, 0x7c, 0x6b, 0xc1, 0xd2, 0x5e, 0xef, 0xd4, 0x13, 0x6c, 0xca, 0x3e, 0x26, 0x6d, 0xc9,
	0x19, 0x6d, 0x21, 0xd7, 0xa0, 0x80, 0x71, 0x7d, 0x2e, 0x49, 0x54, 0x1a, 0x8b, 0x86, 0xf3, 0x83,
	0x2e, 0x3d, 0xe2, 0x8e, 0x32, 0x47, 0x39, 0xf4, 0xa8, 0xcf, 0x74, 0x4f, 0xe5, 0xd9, 0xbe, 0x0b,
	0xc4, 0x64, 0xa4, 0x0b, 0xb2, 0x09, 0x45, 0x4f, 0x6a, 0x35, 0x9f, 0x39, 0x0d, 0xa9, 0xae, 0x3a,
	0xda, 0x68, 0xb7, 0x60, 0xe9, 0x3e, 0xeb, 0xb2, 0xa9, 0xd3, 0x89, 0x87, 0x27, 0x77, 0xce, 0xf0,
	0xd8, 0xb7, 0x81, 0x98, 0x01, 0x32, 0x33, 0x77, 0xae, 0xdb, 0x77, 0xac, 0xf3, 0x61, 0xbf, 0x43,
	0x2f, 0x8d, 0x58, 0xda, 0x88, 0x19, 0xb3, 0x11, 0x63, 0x0a, 0x2c, 0x57, 0x0c, 0xe5, 0xfc, 0x2c,
	0x08, 0x3b, 0xd5, 0x82, 0xd4, 0x27, 0x32, 0x59, 0x85, 0x22, 0xae, 0x5d, 0x31, 0xe0, 0xd5, 0xa2,
	0xb4, 0x68, 0x29, 0x6d, 0x68, 0x69, 0x62, 0x43, 0xed, 0x47, 0x98, 0x26, 0xea, 0xe4, 0x3b, 0xba,
	0xf8, 0x8b, 0x94, 0xb3, 0x99, 0xbe, 0x45, 0x25, 0xd8, 0xcf, 0xe4, 0x7e, 0x39, 0x60, 0xd4, 0x9f,
	0xae, 0x5e, 0x02, 0x3d, 0x33, 0xf5, 0x92, 0x60, 0xd2, 0x60, 0x37, 0xe4, 0xe6, 0x50, 0xe8, 0x29,
	0x4f, 0xe9, 0x63, 0x9d, 0xe7, 0xd3, 0x8a, 0x9b, 0x78, 0x59, 0xa4, 0x70, 0xba, 0xcc, 0x00, 0x19,
	0x5e, 0xb9, 0x09, 0xbc, 0xd4, 0x50, 0x5e, 0x22, 0x2f, 0x33, 0xc0, 0x05, 0x79, 0x35, 0x7e, 0xe4,
	0x21, 0xdf, 0xc4, 0x7f, 0x0e, 0x64, 0x1f, 0xe6, 0x86, 0x7e, 0x04, 0xc9, 0x7f, 0xfa, 0xf2, 0xb8,
	0xdf, 0xdb, 0xda, 0xff, 0xe3, 0x8d, 0x2a, 0xaa, 0xfd, 0x0f, 0xd9, 0x81, 0x92, 0x5e, 0xfa, 0x64,
	0x25, 0xbd, 0x6a, 0x3c, 0xac, 0xda, 0x6a, 0x56, 0x9d, 0xf8, 0xee, 0x02, 0xa4, 0xef, 0x90, 0x54,
	0xe3, 0x82, 0x64, 0x9f, 0x66, 0xad, 0x6a, 0x94, 0x6a, 0x68, 0x9a, 0x11, 0xe3, 0x1e, 0x94, 0x93,
	0x8d, 0x4d, 0xfe, 0xd5, 0x17, 0xb3, 0xbf, 0x18, 0x09, 0xc2, 0xc8, 0x72, 0x47, 0x84, 0x26, 0x40,
	0xba, 0xe3, 0x12, 0x16, 0x23, 0x8b, 0xb8, 0xb6, 0x36, 0xc6, 0x62, 0x82, 0xa4, 0xab, 0x28, 0x01,
	0x19, 0x59, 0x7f, 0x09, 0xc8, 0xe8, 0xde, 0x4a, 0x6a, 0x19, 0xf5, 0xcc, 0xac, 0xa5, 0x31, 0x47,
	0x66, 0x2d, 0xcd, 0xee, 0x2b, 0x02, 0xe9, 0xb4, 0x66, 0x6a, 0x69, 0x22, 0xac, 0x8d, 0xb1, 0x8c,
	0x66, 0x31, 0x04, 0x32, 0x32, 0xce, 0x99, 0x2c, 0x86, 0x41, 0x76, 0x37, 0x7f, 0x7e, 0x5d, 0xb7,
	0xde, 0x7f, 0x5b, 0xb7, 0x3e, 0xe0, 0xf7, 0x09, 0xbf, 0xcf, 0xf8, 0x7d, 0xc1, 0xef, 0xe3, 0xbb,
	0x0d, 0xeb, 0x69, 0x09, 0x53, 0x3e, 0xf5, 0x5c, 0xd6, 0x2e, 0xca, 0xff, 0x79, 0xb7, 0x7e, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0x6a, 0xf4, 0x49, 0xcf, 0x0a, 0x00, 0x00,
}
